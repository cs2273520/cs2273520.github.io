<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>vue3中使用rem</title>
      <link href="/posts/3299.html"/>
      <url>/posts/3299.html</url>
      
        <content type="html"><![CDATA[<h2 id="1、在根文件的-index-html-中直接加入"><a href="#1、在根文件的-index-html-中直接加入" class="headerlink" title="1、在根文件的 index.html 中直接加入"></a>1、在根文件的 index.html 中直接加入</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  (<span class="keyword">function</span> (<span class="params">doc, win</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> docEl = doc.<span class="property">documentElement</span>,</span><br><span class="line">      resizeEvt = <span class="string">&#x27;orientationchange&#x27;</span> <span class="keyword">in</span> <span class="variable language_">window</span> ? <span class="string">&#x27;orientationchange&#x27;</span> : <span class="string">&#x27;resize&#x27;</span>,</span><br><span class="line">      recalc = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> clientWidth = docEl.<span class="property">clientWidth</span>;</span><br><span class="line">        <span class="keyword">if</span> (!clientWidth) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (clientWidth &gt;= <span class="number">640</span>) &#123;</span><br><span class="line">          docEl.<span class="property">style</span>.<span class="property">fontSize</span> = <span class="string">&#x27;16px&#x27;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          docEl.<span class="property">style</span>.<span class="property">fontSize</span> = <span class="number">16</span> * (clientWidth / <span class="number">640</span>) + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="keyword">if</span> (!doc.<span class="property">addEventListener</span>) <span class="keyword">return</span>;</span><br><span class="line">    win.<span class="title function_">addEventListener</span>(resizeEvt, recalc, <span class="literal">false</span>);</span><br><span class="line">    doc.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, recalc, <span class="literal">false</span>);</span><br><span class="line">  &#125;)(<span class="variable language_">document</span>, <span class="variable language_">window</span>);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="2、meta-设置"><a href="#2、meta-设置" class="headerlink" title="2、meta 设置"></a>2、meta 设置</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;user-scalable=0,width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="3、完成页面布局，先全部使用-px，代页面完善后用-px-to-rem-插件进行转换即可"><a href="#3、完成页面布局，先全部使用-px，代页面完善后用-px-to-rem-插件进行转换即可" class="headerlink" title="3、完成页面布局，先全部使用 px，代页面完善后用 px to rem 插件进行转换即可"></a>3、完成页面布局，先全部使用 px，代页面完善后用 px to rem 插件进行转换即可</h2>]]></content>
      
      
      <categories>
          
          <category> vue3.x </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>小程序地图</title>
      <link href="/posts/a64f.html"/>
      <url>/posts/a64f.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、准备阶段"><a href="#一、准备阶段" class="headerlink" title="一、准备阶段"></a>一、准备阶段</h2><p>1、在高德开放平台注册成为开发者。<br>2、申请开发者密钥（key）。<br>链接:<a href="https://lbs.amap.com/api/wx/gettingstarted">https://lbs.amap.com/api/wx/gettingstarted</a><br>3、下载微信小程序插件，将里面的 amapwx.130.js 放到相对应位置。<br>下载链接:<a href="https://lbs.amap.com/api/wx/download">https://lbs.amap.com/api/wx/download</a></p><h2 id="二、代码开发-（地图定位，自定义-marker）"><a href="#二、代码开发-（地图定位，自定义-marker）" class="headerlink" title="二、代码开发 （地图定位，自定义 marker）"></a>二、代码开发 （地图定位，自定义 marker）</h2><p>html:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;map</span><br><span class="line">  id=<span class="string">&quot;mapId&quot;</span></span><br><span class="line">  <span class="keyword">class</span>=<span class="string">&quot;map&quot;</span></span><br><span class="line">  longitude=<span class="string">&quot;&#123;&#123;longitude&#125;&#125;&quot;</span></span><br><span class="line">  latitude=<span class="string">&quot;&#123;&#123;latitude&#125;&#125;&quot;</span></span><br><span class="line">  show-location=<span class="string">&quot;true&quot;</span></span><br><span class="line">  markers=<span class="string">&quot;&#123;&#123;markers&#125;&#125;&quot;</span></span><br><span class="line">  customCallout=<span class="string">&quot;callout&quot;</span></span><br><span class="line">  scale=<span class="string">&quot;&#123;&#123;scale&#125;&#125;&quot;</span></span><br><span class="line">  bindregionchange=<span class="string">&quot;bindregionchange&quot;</span></span><br><span class="line">&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">cover-view</span> <span class="attr">slot</span>=<span class="string">&quot;callout&quot;</span> <span class="attr">wx:if</span>=<span class="string">&quot;&#123;&#123;isExceed&#125;&#125;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">cover-view</span> <span class="attr">marker-id</span>=<span class="string">&quot;0&quot;</span> <span class="attr">class</span>=<span class="string">&quot;customCallout&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">cover-view</span> <span class="attr">wx:if</span>=<span class="string">&quot;&#123;&#123;isUser&#125;&#125;&quot;</span>&gt;</span> 自定义标签文本1<span class="tag">&lt;/<span class="name">cover-view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">cover-view</span> <span class="attr">wx:else</span>&gt;</span>自定义标签文本2<span class="tag">&lt;/<span class="name">cover-view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">cover-view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">cover-view</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">cover-view</span> <span class="attr">slot</span>=<span class="string">&quot;callout&quot;</span> <span class="attr">wx:else</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">cover-view</span> <span class="attr">marker-id</span>=<span class="string">&quot;0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">cover-view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">cover-view</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">cover-view</span> <span class="attr">slot</span>=<span class="string">&quot;callout&quot;</span> <span class="attr">wx:if</span>=<span class="string">&quot;&#123;&#123;isExceed&#125;&#125;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">cover-view</span> <span class="attr">marker-id</span>=<span class="string">&quot;1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;customCallout&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">cover-view</span>&gt;</span>自定义标签文本3<span class="tag">&lt;/<span class="name">cover-view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">cover-view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">cover-view</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">cover-view</span> <span class="attr">slot</span>=<span class="string">&quot;callout&quot;</span> <span class="attr">wx:else</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">cover-view</span> <span class="attr">marker-id</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">cover-view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">cover-view</span>&gt;</span></span></span><br><span class="line">&lt;/map&gt;</span><br></pre></td></tr></table></figure><p>js:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">data</span>: &#123;</span><br><span class="line">       <span class="attr">key</span>: <span class="string">&quot;feed7dfd82fe7ed449d87ae3b3e78c24&quot;</span>,</span><br><span class="line">       <span class="attr">myAmapFun</span>: <span class="literal">null</span>,</span><br><span class="line">       <span class="attr">textData</span>: <span class="literal">null</span>,</span><br><span class="line">       <span class="attr">longitude</span>: <span class="literal">null</span>,</span><br><span class="line">       <span class="attr">latitude</span>: <span class="literal">null</span>,</span><br><span class="line">       <span class="attr">mapId</span>: <span class="string">&quot;mapId&quot;</span>,</span><br><span class="line">       <span class="title class_">CurrentPositioning</span>: <span class="literal">null</span>,</span><br><span class="line">       <span class="title class_">NearbyAddress</span>: <span class="literal">null</span>,</span><br><span class="line">       <span class="attr">target</span>: <span class="literal">null</span>,</span><br><span class="line">       <span class="attr">markers</span>: [],</span><br><span class="line">       <span class="attr">distance</span>: <span class="literal">null</span>,</span><br><span class="line">       <span class="attr">num</span>: <span class="number">1</span>,</span><br><span class="line">       <span class="attr">scale</span>: <span class="literal">null</span>,</span><br><span class="line">       <span class="attr">isUser</span>: <span class="literal">true</span>,</span><br><span class="line">       <span class="attr">iconPath</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">       <span class="attr">isExceed</span>: <span class="literal">true</span>,</span><br><span class="line">       <span class="attr">hasAuthorization</span>: <span class="literal">null</span>,</span><br><span class="line">   &#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取定位函数</span></span><br><span class="line">       <span class="title function_">getLocation</span>(<span class="params"></span>) &#123;</span><br><span class="line">           <span class="keyword">const</span> myAmapFun = <span class="keyword">new</span> amapFile.<span class="title class_">AMapWX</span>(&#123;</span><br><span class="line">               <span class="attr">key</span>: <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">key</span></span><br><span class="line">           &#125;);</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">reslove, reject</span>) =&gt;</span> &#123;</span><br><span class="line">               myAmapFun.<span class="title function_">getRegeo</span>(&#123;</span><br><span class="line">                   <span class="attr">success</span>: <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">                       <span class="keyword">let</span> textData = &#123;&#125;;</span><br><span class="line">                       textData.<span class="property">name</span> = data[<span class="number">0</span>].<span class="property">name</span>;</span><br><span class="line">                       textData.<span class="property">desc</span> = data[<span class="number">0</span>].<span class="property">desc</span></span><br><span class="line">                       <span class="comment">//用户- 从这里进行请求获取服务人员的位置</span></span><br><span class="line">                       <span class="comment">// 服务人员- 从这里进行请求获取用户的位置</span></span><br><span class="line">                       <span class="comment">// 机构- 从这里进行请求获取所有服务人员的位置</span></span><br><span class="line">                       <span class="comment">// 请求开始</span></span><br><span class="line">                       <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">                           <span class="attr">textData</span>: textData,</span><br><span class="line">                           <span class="attr">longitude</span>: data[<span class="number">0</span>].<span class="property">longitude</span>,</span><br><span class="line">                           <span class="attr">latitude</span>: data[<span class="number">0</span>].<span class="property">latitude</span>,</span><br><span class="line">                           <span class="attr">markers</span>: [&#123;</span><br><span class="line">                                   <span class="attr">id</span>: <span class="number">0</span>,</span><br><span class="line">                                   <span class="attr">iconPath</span>: <span class="string">&quot;/image/common/map/transparency.png&quot;</span>,</span><br><span class="line">                                   <span class="attr">longitude</span>: data[<span class="number">0</span>].<span class="property">longitude</span>,</span><br><span class="line">                                   <span class="attr">latitude</span>: data[<span class="number">0</span>].<span class="property">latitude</span>,</span><br><span class="line">                                   <span class="attr">width</span>: <span class="number">30</span>, <span class="comment">//宽</span></span><br><span class="line">                                   <span class="attr">height</span>: <span class="number">30</span>, <span class="comment">//高</span></span><br><span class="line">                                   <span class="attr">joinCluster</span>: <span class="literal">true</span>,</span><br><span class="line">                                   <span class="attr">customCallout</span>: &#123;</span><br><span class="line">                                       <span class="attr">anchorY</span>: <span class="number">0</span>,</span><br><span class="line">                                       <span class="attr">anchorX</span>: <span class="number">0</span>,</span><br><span class="line">                                       <span class="attr">display</span>: <span class="string">&quot;ALWAYS&quot;</span></span><br><span class="line">                                   &#125;,</span><br><span class="line">                               &#125;,</span><br><span class="line">                               &#123;</span><br><span class="line">                                   <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">                                   <span class="attr">iconPath</span>: <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">iconPath</span>,</span><br><span class="line">                                   <span class="attr">longitude</span>: data[<span class="number">0</span>].<span class="property">longitude</span> + <span class="number">0.005</span>,</span><br><span class="line">                                   <span class="attr">latitude</span>: data[<span class="number">0</span>].<span class="property">latitude</span> + <span class="number">0.005</span>,</span><br><span class="line">                                   <span class="attr">width</span>: <span class="number">30</span>, <span class="comment">//宽</span></span><br><span class="line">                                   <span class="attr">height</span>: <span class="number">30</span>, <span class="comment">//高</span></span><br><span class="line">                                   <span class="attr">joinCluster</span>: <span class="literal">true</span>,</span><br><span class="line">                                   <span class="attr">customCallout</span>: &#123;</span><br><span class="line">                                       <span class="attr">anchorY</span>: <span class="number">0</span>,</span><br><span class="line">                                       <span class="attr">anchorX</span>: <span class="number">0</span>,</span><br><span class="line">                                       <span class="attr">display</span>: <span class="string">&quot;ALWAYS&quot;</span></span><br><span class="line">                                   &#125;,</span><br><span class="line">                               &#125;,</span><br><span class="line">                           ],</span><br><span class="line">                       &#125;);</span><br><span class="line">                       <span class="comment">// 请求结束</span></span><br><span class="line"></span><br><span class="line">                       <span class="comment">// 缩放地图</span></span><br><span class="line">                       <span class="keyword">let</span> mapCtx = wx.<span class="title function_">createMapContext</span>(<span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">mapId</span>, <span class="variable language_">this</span>)</span><br><span class="line">                       mapCtx.<span class="title function_">includePoints</span>(&#123;</span><br><span class="line">                           <span class="attr">padding</span>: [<span class="number">70</span>],</span><br><span class="line">                           <span class="attr">points</span>: <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">markers</span></span><br><span class="line">                       &#125;)</span><br><span class="line">                       <span class="title function_">reslove</span>();</span><br><span class="line">                   &#125;,</span><br><span class="line">                   <span class="attr">fail</span>: <span class="keyword">function</span> (<span class="params">info</span>) &#123;</span><br><span class="line">                       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;get Location fail&quot;</span>, info);</span><br><span class="line">                       <span class="title function_">reject</span>();</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;);</span><br><span class="line">           &#125;)</span><br><span class="line"></span><br><span class="line">       &#125;,</span><br></pre></td></tr></table></figure><p>css:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">.<span class="property">map_content</span> &#123;</span><br><span class="line">    <span class="attr">position</span>: relative;</span><br><span class="line"></span><br><span class="line">    .<span class="property">location</span> &#123;</span><br><span class="line">        <span class="attr">position</span>: absolute;</span><br><span class="line">        <span class="attr">bottom</span>: 30rpx;</span><br><span class="line">        <span class="attr">left</span>: 30rpx;</span><br><span class="line">        <span class="attr">width</span>: 60rpx;</span><br><span class="line">        <span class="attr">height</span>: 60rpx;</span><br><span class="line">    &#125;</span><br><span class="line">    .<span class="property">customCallout</span> &#123;</span><br><span class="line">        <span class="attr">height</span>: 60rpx;</span><br><span class="line">        <span class="attr">padding</span>: <span class="number">0</span> 10px;</span><br><span class="line">        <span class="attr">display</span>: flex;</span><br><span class="line">        justify-<span class="attr">content</span>: center;</span><br><span class="line">        align-<span class="attr">items</span>: center;</span><br><span class="line">        font-<span class="attr">size</span>: 24rpx;</span><br><span class="line">        box-<span class="attr">sizing</span>: border-box;</span><br><span class="line">        background-<span class="attr">color</span>: #<span class="number">005826</span>;</span><br><span class="line">        <span class="attr">color</span>: white;</span><br><span class="line">        <span class="attr">border</span>: 1rpx solid #ccc;</span><br><span class="line">        border-<span class="attr">radius</span>: 60rpx;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>app.json</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;permission&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;scope.userLocation&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;desc&quot;</span>: <span class="string">&quot;你的位置信息将用于小程序位置接口的效果展示&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;requiredPrivateInfos&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;getLocation&quot;</span>,</span><br><span class="line">        <span class="string">&quot;startLocationUpdate&quot;</span>,</span><br><span class="line">        <span class="string">&quot;onLocationChange&quot;</span>,</span><br><span class="line">        <span class="string">&quot;startLocationUpdateBackground&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;requiredBackgroundModes&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;location&quot;</span>,</span><br><span class="line">    <span class="string">&quot;startLocationUpdate&quot;</span>,</span><br><span class="line">    <span class="string">&quot;onLocationChange&quot;</span>,</span><br><span class="line">    <span class="string">&quot;startLocationUpdateBackground&quot;</span></span><br><span class="line">    ],</span><br></pre></td></tr></table></figure><p>项目 demon:<br><a href="https://github.com/cs2273520/map_use_wechat">https://github.com/cs2273520/map_use_wechat</a></p>]]></content>
      
      
      <categories>
          
          <category> wechat </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>大文件上传</title>
      <link href="/posts/e71f.html"/>
      <url>/posts/e71f.html</url>
      
        <content type="html"><![CDATA[<h2 id="1、读取文件"><a href="#1、读取文件" class="headerlink" title="1、读取文件"></a>1、读取文件</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//html</span></span><br><span class="line">&lt;input type=<span class="string">&quot;file&quot;</span> id=<span class="string">&quot;input&quot;</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;upload&quot;</span>&gt;</span>上传<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!-- 上传进度 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width: 300px&quot;</span> <span class="attr">id</span>=<span class="string">&quot;progress&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//js</span></span><br><span class="line"><span class="comment">// 读取文件</span></span><br><span class="line">input.<span class="title function_">addEventListener</span>(<span class="string">&quot;change&quot;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">files = e.<span class="property">target</span>.<span class="property">files</span>[<span class="number">0</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(files);</span><br><span class="line">chunkList = <span class="title function_">createChunk</span>(files);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(chunkList);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>对应的控制台输出信息</p><p><img src="/images/js/%E5%A4%A7%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A01.png"></p><h2 id="2、创建切片"><a href="#2、创建切片" class="headerlink" title="2、创建切片"></a>2、创建切片</h2><p>可通过获取文件的名字，文件的大小，文件的类型等信息对文件进行切片</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建切片</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createChunk</span>(<span class="params">file, size = <span class="number">2</span> _ <span class="number">1024</span> _ <span class="number">1024</span></span>) &#123;</span><br><span class="line"><span class="comment">//两个形参:file 是大文件，size 是切片的大小</span></span><br><span class="line"><span class="keyword">const</span> chunkList = [];</span><br><span class="line"><span class="keyword">let</span> cur = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (cur &lt; file.<span class="property">size</span>) &#123;</span><br><span class="line">chunkList.<span class="title function_">push</span>(&#123;</span><br><span class="line"></span><br><span class="line">      <span class="attr">file</span>: file.<span class="title function_">slice</span>(cur, cur + size),   <span class="comment">//切片的起始位置</span></span><br><span class="line">    &#125;);</span><br><span class="line">    cur += size;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> chunkList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>切片的核心思想是去创建一个空的切片列表数组，然后将大文件按照每个切片的指定大小进行切片操作，对大文件可以使用数组的 Array.prototype.slice()方法，那么每个切片都应在指定的大小左右。<br>控制台信息</p><p><img src="/images/js/%E5%A4%A7%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A02.png"></p><h2 id="3、上传切片"><a href="#3、上传切片" class="headerlink" title="3、上传切片"></a>3、上传切片</h2><p>关键步骤:<br>一、数据处理<br>需要将切片的数据进行维护成一个包括该文件，文件名，切片名的对象，所以采用 formData 对象来进行数据整理。formData 对象 将数据编译成键值对，可用于发送带键数据，通过调用它的 append()方法来添加字段，FormData.append()方法会将字段类型为数字类型转为字符串（字符串类型可以是 Blob、File 或者字符串:如果它的字段类型不是 Blob 也不是 File，则会被转换成字符串类）<br>二、并发请求<br>每一个切片都分别作为一个请求，只有当这四个请求都传输给后端之后，才算是上传成功，使用 Promise.all()保证所有的切片都已经传输给后端。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//数据处理</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">uploadFile</span>(<span class="params">list</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> requestList = list</span><br><span class="line">    .<span class="title function_">map</span>(<span class="function">(<span class="params">&#123; file, fileName, index, chunkName &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>(); <span class="comment">// 创建表单类型数据</span></span><br><span class="line">      formData.<span class="title function_">append</span>(<span class="string">&quot;file&quot;</span>, file); <span class="comment">//该文件</span></span><br><span class="line">      formData.<span class="title function_">append</span>(<span class="string">&quot;fileName&quot;</span>, fileName); <span class="comment">//文件名</span></span><br><span class="line">      formData.<span class="title function_">append</span>(<span class="string">&quot;chunkName&quot;</span>, chunkName); <span class="comment">//切片名</span></span><br><span class="line">      <span class="keyword">return</span> &#123; formData, index &#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//二级遍历 return 里面的表单数据，然后将表单数据进行上传</span></span><br><span class="line">    .<span class="title function_">map</span>(<span class="function">(<span class="params">&#123; formData, index &#125;</span>) =&gt;</span></span><br><span class="line">      <span class="title function_">axiosRequest</span>(&#123;</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&quot;post&quot;</span>,</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;http://localhost:3000/upload&quot;</span>, <span class="comment">//请求接口，要与后端一一一对应</span></span><br><span class="line">        <span class="attr">data</span>: formData,</span><br><span class="line">      &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">        <span class="comment">//显示每个切片上传进度</span></span><br><span class="line">        <span class="keyword">let</span> p = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;p&quot;</span>);</span><br><span class="line">        p.<span class="property">innerHTML</span> = <span class="string">`<span class="subst">$&#123;list[index].chunkName&#125;</span>--<span class="subst">$&#123;res.data.message&#125;</span>`</span>;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;progress&quot;</span>).<span class="title function_">appendChild</span>(p);</span><br><span class="line">      &#125;)</span><br><span class="line">    );</span><br><span class="line">  <span class="comment">//保证所有的切片都已经传输完毕</span></span><br><span class="line">  <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>(requestList);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//请求函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">axiosRequest</span>(<span class="params">&#123; method = <span class="string">&quot;post&quot;</span>, url, data &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> config = &#123;</span><br><span class="line">      <span class="comment">//设置请求头</span></span><br><span class="line">      <span class="attr">headers</span>: <span class="string">&quot;Content-Type:application/x-www-form-urlencoded&quot;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 默认是 post 请求，可更改</span></span><br><span class="line">    axios[method](url, data, config).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(res);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件上传</span></span><br><span class="line">upload.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> uploadList = chunkList.<span class="title function_">map</span>(<span class="function">(<span class="params">&#123; file &#125;, index</span>) =&gt;</span> (&#123;</span><br><span class="line">    file,</span><br><span class="line">    <span class="attr">size</span>: file.<span class="property">size</span>,</span><br><span class="line">    <span class="attr">precent</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">chunkName</span>: <span class="string">`<span class="subst">$&#123;files.name&#125;</span>-<span class="subst">$&#123;index&#125;</span>`</span>,</span><br><span class="line">    <span class="attr">fileName</span>: files.<span class="property">name</span>,</span><br><span class="line">    index,</span><br><span class="line">  &#125;));</span><br><span class="line">  <span class="comment">// 发请求，调用函数</span></span><br><span class="line">  <span class="title function_">uploadFile</span>(uploadList);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="4、后端"><a href="#4、后端" class="headerlink" title="4、后端"></a>4、后端</h2><p>（1）接收切片<br>主要工作:<br>1、引入 multiparty 中间件，来解析前端传来的 FormData 对象数据;<br>2、通过 path.reslove()在根目录创建一个文件夹 qiepian ，该文件夹将存放另一个文件夹(存放所有切片)以及合并后的文件;<br>3、处理跨越问题，通过 setHeader()方法设置所有的请求头和所有的请求源都允许。<br>4、解析数据成功后，拿到文件相关信息，并且在 qiepian 文件夹中创建一个新的文件夹${fileName}-chunks，用来存放接收到的所有切片;<br>5、通过fse.move(filePath,fileName)将切片移入${fileName}-chunks 文件夹，最后向前端返回上传成功的信息。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//app.js</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> multiparty = <span class="built_in">require</span>(<span class="string">&quot;multiparty&quot;</span>); <span class="comment">// 中间件，处理 FormData 对象的中间件</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> fse = <span class="built_in">require</span>(<span class="string">&quot;fs-extra&quot;</span>); <span class="comment">//文件处理模块</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>();</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">UPLOAD_DIR</span> = path.<span class="title function_">resolve</span>(\_\_dirname, <span class="string">&quot;.&quot;</span>, <span class="string">&quot;qiepian&quot;</span>); <span class="comment">// 读取根目录，创建一个文件夹 qiepian 存放切片</span></span><br><span class="line"></span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&quot;request&quot;</span>, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line"><span class="comment">// 处理跨域问题，允许所有的请求头和请求源</span></span><br><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;_&quot;</span>);</span><br><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&quot;Access-Control-Allow-Headers&quot;</span>, <span class="string">&quot;_&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (req.<span class="property">url</span> === <span class="string">&quot;/upload&quot;</span>) &#123;</span><br><span class="line"><span class="comment">//前端访问的地址正确</span></span><br><span class="line"><span class="keyword">const</span> multipart = <span class="keyword">new</span> multiparty.<span class="title class_">Form</span>(); <span class="comment">// 解析 FormData 对象</span></span><br><span class="line">multipart.<span class="title function_">parse</span>(req, <span class="keyword">async</span> (err, fields, files) =&gt; &#123;</span><br><span class="line"><span class="keyword">if</span> (err) &#123;</span><br><span class="line"><span class="comment">//解析失败</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;fields=&quot;</span>, fields);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;files=&quot;</span>, files);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> [file] = files.<span class="property">file</span>;</span><br><span class="line">      <span class="keyword">const</span> [fileName] = fields.<span class="property">fileName</span>;</span><br><span class="line">      <span class="keyword">const</span> [chunkName] = fields.<span class="property">chunkName</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> chunkDir = path.<span class="title function_">resolve</span>(<span class="variable constant_">UPLOAD_DIR</span>, <span class="string">`<span class="subst">$&#123;fileName&#125;</span>-chunks`</span>); <span class="comment">//在qiepian文件夹创建一个新的文件夹，存放接收到的所有切片</span></span><br><span class="line">      <span class="keyword">if</span> (!fse.<span class="title function_">existsSync</span>(chunkDir)) &#123;</span><br><span class="line">        <span class="comment">//文件夹不存在，新建该文件夹</span></span><br><span class="line">        <span class="keyword">await</span> fse.<span class="title function_">mkdirs</span>(chunkDir);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 把切片移动进chunkDir</span></span><br><span class="line">      <span class="keyword">await</span> fse.<span class="title function_">move</span>(file.<span class="property">path</span>, <span class="string">`<span class="subst">$&#123;chunkDir&#125;</span>/<span class="subst">$&#123;chunkName&#125;</span>`</span>);</span><br><span class="line">      res.<span class="title function_">end</span>(</span><br><span class="line">        <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span><br><span class="line">          <span class="comment">//向前端输出</span></span><br><span class="line">          <span class="attr">code</span>: <span class="number">0</span>,</span><br><span class="line">          <span class="attr">message</span>: <span class="string">&quot;切片上传成功&quot;</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">      );</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>(2)合并切片<br>1、前端得到后端返回的上传成功信息后，通知后端合并切片<br>&#x2F;&#x2F;通知后端去做切片合并</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">merge</span>(<span class="params">size, fileName</span>) &#123;</span><br><span class="line">  <span class="title function_">axiosRequest</span>(&#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&quot;post&quot;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&quot;http://localhost:3000/merge&quot;</span>, <span class="comment">//后端合并请求</span></span><br><span class="line">    <span class="attr">data</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span><br><span class="line">      size,</span><br><span class="line">      fileName,</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用函数，当所有切片上传成功之后，通知后端合并</span></span><br><span class="line"><span class="title function_">merge</span>(files.<span class="property">size</span>, files.<span class="property">name</span>);</span><br></pre></td></tr></table></figure><p>2、后端接收到合并的数据，创建新的路由进行合并，合并的关键在于:前端通过 post 请求向后端传递的合并数据是通过 JSON.stringify()将数据转换成字符串，所以后端合并之前，需要进行以下操作：<br>(1)解析 post 请求传递的参数，自定义函数 reslovePost 将每个切片请求传递的数据及逆行拼接，拼接后的数据仍然是字符串，然后通过 JSON.parse()将字符串格式的数据转换成 JSON 对象;<br>(2)拿到上个步骤解析成功后的数据进行解构，通过 path.reslove 获取每个切片所在的路径;<br>(3)自定义合并函数 mergeFileChunk，只要传入切片路径，切片名字和切片大小，就真的将所有的切片进行合并。在此之前需要将每个切片转换成流 stream 对象的形式进行合并，自定义函数 pipeStream，目的是将切片转换成流对象，在这个函数里面创建可读流，读取所有的切片，监听 end 事件，所有的切片读取完毕后，销毁 其对应的路径，保证每个切片只被读取一次，不重复读取，最后将汇聚所有切片的可读流汇入可写流；<br>(4)最后，切片被读取成流对象，可读流被汇入可写流，那么在指定的位置通过 createWriteStream 创建可写流，同样使用 Promise.all()的方法，保证所有切片都被读取，最后调用合并函数进行合并。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (req.<span class="property">url</span> === <span class="string">&quot;/merge&quot;</span>) &#123;</span><br><span class="line"><span class="comment">// 该去合并切片了</span></span><br><span class="line"><span class="keyword">const</span> data = <span class="keyword">await</span> <span class="title function_">resolvePost</span>(req);</span><br><span class="line"><span class="keyword">const</span> &#123; fileName, size &#125; = data;</span><br><span class="line"><span class="keyword">const</span> filePath = path.<span class="title function_">resolve</span>(<span class="variable constant_">UPLOAD_DIR</span>, fileName); <span class="comment">//获取切片路径</span></span><br><span class="line"><span class="keyword">await</span> <span class="title function_">mergeFileChunk</span>(filePath, fileName, size);</span><br><span class="line">res.<span class="title function_">end</span>(</span><br><span class="line"><span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span><br><span class="line"><span class="attr">code</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">message</span>: <span class="string">&quot;文件合并成功&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 合并</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">mergeFileChunk</span>(<span class="params">filePath, fileName, size</span>) &#123;</span><br><span class="line"><span class="keyword">const</span> chunkDir = path.<span class="title function_">resolve</span>(<span class="variable constant_">UPLOAD_DIR</span>, <span class="string">`<span class="subst">$&#123;fileName&#125;</span>-chunks`</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> chunkPaths = <span class="keyword">await</span> fse.<span class="title function_">readdir</span>(chunkDir);</span><br><span class="line">chunkPaths.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a.<span class="title function_">split</span>(<span class="string">&quot;-&quot;</span>)[<span class="number">1</span>] - b.<span class="title function_">split</span>(<span class="string">&quot;-&quot;</span>)[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = chunkPaths.<span class="title function_">map</span>(<span class="function">(<span class="params">chunkPath, index</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="title function_">pipeStream</span>(</span><br><span class="line">path.<span class="title function_">resolve</span>(chunkDir, chunkPath),</span><br><span class="line"><span class="comment">// 在指定的位置创建可写流</span></span><br><span class="line">fse.<span class="title function_">createWriteStream</span>(filePath, &#123;</span><br><span class="line"><span class="attr">start</span>: index _ size,</span><br><span class="line"><span class="attr">end</span>: (index + <span class="number">1</span>) _ size,</span><br><span class="line">&#125;)</span><br><span class="line">);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>(arr); <span class="comment">//保证所有的切片都被读取</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将切片转换成流进行合并</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">pipeStream</span>(<span class="params">path, writeStream</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 创建可读流，读取所有切片</span></span><br><span class="line"><span class="keyword">const</span> readStream = fse.<span class="title function_">createReadStream</span>(path);</span><br><span class="line">readStream.<span class="title function_">on</span>(<span class="string">&quot;end&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">fse.<span class="title function_">unlinkSync</span>(path); <span class="comment">// 读取完毕后，删除已经读取过的切片路径</span></span><br><span class="line"><span class="title function_">resolve</span>();</span><br><span class="line">&#125;);</span><br><span class="line">readStream.<span class="title function_">pipe</span>(writeStream); <span class="comment">//将可读流流入可写流</span></span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析 POST 请求传递的参数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">resolvePost</span>(<span class="params">req</span>) &#123;</span><br><span class="line"><span class="comment">// 解析参数</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">let</span> chunk = <span class="string">&quot;&quot;</span>;</span><br><span class="line">req.<span class="title function_">on</span>(<span class="string">&quot;data&quot;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">//req 接收到了前端的数据</span></span><br><span class="line">chunk += data; <span class="comment">//将接收到的所有参数进行拼接</span></span><br><span class="line">&#125;);</span><br><span class="line">req.<span class="title function_">on</span>(<span class="string">&quot;end&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="title function_">resolve</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(chunk)); <span class="comment">//将字符串转为 JSON 对象</span></span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="完整项目地址"><a href="#完整项目地址" class="headerlink" title="完整项目地址:"></a>完整项目地址:</h2><p><a href="https://github.com/cs2273520/FileUpload">https://github.com/cs2273520/FileUpload</a></p><h2 id="学习参考链接"><a href="#学习参考链接" class="headerlink" title="学习参考链接:"></a>学习参考链接:</h2><p><a href="https://juejin.cn/post/7177045936298786872">https://juejin.cn/post/7177045936298786872</a></p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序使用sass</title>
      <link href="/posts/d61f.html"/>
      <url>/posts/d61f.html</url>
      
        <content type="html"><![CDATA[<h1 id="1、"><a href="#1、" class="headerlink" title="1、"></a>1、</h1><p>从微信开发者工具中选择 拓展—-&gt;导入已安装的 vscode 拓展—-&gt;拓展设置—-&gt;搜索 Easysass:Formats—-&gt;点开在 setting.json 中编辑修改 easysass.formats</p><h1 id="2、"><a href="#2、" class="headerlink" title="2、"></a>2、</h1><p>修改 easysass.formats 中 extension 为.wxss</p>]]></content>
      
      
      <categories>
          
          <category> wechat </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>vue3中使用elementplus中的多选框操作</title>
      <link href="/posts/3da3.html"/>
      <url>/posts/3da3.html</url>
      
        <content type="html"><![CDATA[<h1 id="1、在-el-table-中添加如下属性"><a href="#1、在-el-table-中添加如下属性" class="headerlink" title="1、在 el-table 中添加如下属性"></a>1、在 el-table 中添加如下属性</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@selection-change=&quot;handleSelectionChange&quot;</span><br></pre></td></tr></table></figure><h1 id="2、定义方法，获取选中内容"><a href="#2、定义方法，获取选中内容" class="headerlink" title="2、定义方法，获取选中内容"></a>2、定义方法，获取选中内容</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const handleSelectionChange = (selection) =&gt; &#123;</span><br><span class="line">  console.log(selection)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vue3.x </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>vue3中使用refs</title>
      <link href="/posts/bfb4.html"/>
      <url>/posts/bfb4.html</url>
      
        <content type="html"><![CDATA[<p>不同于 vue2，可以直接在页面中使用<br>this.$refs.元素绑定名<br>在 vue3 中，已经取消了这种用法，使用方法：<br>1、</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123;getCurrentInstance&#125; from &#x27;vue&#x27;</span><br></pre></td></tr></table></figure><p>2、</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const &#123; proxy &#125; = getCurrentInstance()</span><br></pre></td></tr></table></figure><p>3、<br>元素中给一个属性 ref&#x3D;”元素绑定名”</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">proxy.$refs.元素绑定名</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vue3.x </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>vue动画</title>
      <link href="/posts/718d.html"/>
      <url>/posts/718d.html</url>
      
        <content type="html"><![CDATA[<h1 id="vue-动画"><a href="#vue-动画" class="headerlink" title="vue 动画"></a>vue 动画</h1><p><img src="/images/vue/vue%E5%8A%A8%E7%94%BB.jpg"></p><p>html 核心代码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    &lt;button v-on:click=&quot;show = !show&quot;&gt;Toggle&lt;/button&gt;</span><br><span class="line">    &lt;transition name=&quot;fade&quot;&gt;</span><br><span class="line">      &lt;p v-if=&quot;show&quot;&gt;hello&lt;/p&gt;</span><br></pre></td></tr></table></figure><p>css 核心代码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.fade-enter &#123;</span><br><span class="line">  opacity: 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.fade-enter-active &#123;</span><br><span class="line">  transition: opacity 2s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.fade-enter-to &#123;</span><br><span class="line">  opacity: 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.fade-leave &#123;</span><br><span class="line">  opacity: 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.fade-leave-active &#123;</span><br><span class="line">  transition: opacity 2s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.fade-leave-to &#123;</span><br><span class="line">  opacity: 0;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vue2.x </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>代码提交规范</title>
      <link href="/posts/fd99.html"/>
      <url>/posts/fd99.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-在-Vscode-插件中安装-prettier"><a href="#1-在-Vscode-插件中安装-prettier" class="headerlink" title="1.在 Vscode 插件中安装 prettier"></a>1.在 Vscode 插件中安装 prettier</h1><h1 id="2-在根目录下新建配置文件-prettierrc"><a href="#2-在根目录下新建配置文件-prettierrc" class="headerlink" title="2.在根目录下新建配置文件(.prettierrc)"></a>2.在根目录下新建配置文件(.prettierrc)</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;semi&quot;: false,</span><br><span class="line">  &quot;singleQuote&quot;: true,</span><br><span class="line">  &quot;trailingComma&quot;: &quot;none&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-在-vscode-的设置里-搜索-save-就能看到并勾上-format-on-save"><a href="#3-在-vscode-的设置里-搜索-save-就能看到并勾上-format-on-save" class="headerlink" title="3.在 vscode 的设置里 搜索 save 就能看到并勾上 format on save"></a>3.在 vscode 的设置里 搜索 save 就能看到并勾上 format on save</h1><h1 id="4-右键-使用…格式化文档-配置默认格式化文档程序-选择-prettier"><a href="#4-右键-使用…格式化文档-配置默认格式化文档程序-选择-prettier" class="headerlink" title="4.右键 使用…格式化文档 配置默认格式化文档程序 选择 prettier"></a>4.右键 使用…格式化文档 配置默认格式化文档程序 选择 prettier</h1><h1 id="5-在配置下-eslintrc-js-里的-rules-新增-为了解决-eslint-与-prettier-冲突"><a href="#5-在配置下-eslintrc-js-里的-rules-新增-为了解决-eslint-与-prettier-冲突" class="headerlink" title="5.在配置下.eslintrc.js 里的 rules 新增 为了解决 eslint 与 prettier 冲突"></a>5.在配置下.eslintrc.js 里的 rules 新增 为了解决 eslint 与 prettier 冲突</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">indent: 0,</span><br><span class="line">&#x27;space-before-function-paren&#x27;: 0,</span><br><span class="line">&#x27;vue/multi-word-component-names&#x27;: &#x27;off&#x27;</span><br></pre></td></tr></table></figure><h1 id="6-使用-husky-强制代码格式化-创建配置文件"><a href="#6-使用-husky-强制代码格式化-创建配置文件" class="headerlink" title="6.使用 husky 强制代码格式化 创建配置文件"></a>6.使用 husky 强制代码格式化 创建配置文件</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npx husky add .husky/pre-commit</span><br></pre></td></tr></table></figure><h1 id="7-往第六步生成的文件中-x2F-husky-x2F-pre-commit-写入"><a href="#7-往第六步生成的文件中-x2F-husky-x2F-pre-commit-写入" class="headerlink" title="7.往第六步生成的文件中(.&#x2F;husky&#x2F;pre-commit)写入"></a>7.往第六步生成的文件中(.&#x2F;husky&#x2F;pre-commit)写入</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npx lint-staged</span><br></pre></td></tr></table></figure><h1 id="8-把-package-json-文件的-lint-staged-修改为"><a href="#8-把-package-json-文件的-lint-staged-修改为" class="headerlink" title="8.把 package.json 文件的 lint-staged 修改为"></a>8.把 package.json 文件的 lint-staged 修改为</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;lint-staged&quot;: &#123;</span><br><span class="line">&quot;src/\*_/_.&#123;js,vue&#125;&quot;: [</span><br><span class="line">&quot;eslint --fix&quot;,</span><br><span class="line">&quot;git add&quot;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> basis </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>git提交规范</title>
      <link href="/posts/3bd0.html"/>
      <url>/posts/3bd0.html</url>
      
        <content type="html"><![CDATA[<h1 id="1、安装-commitizen-和-cz-customizable"><a href="#1、安装-commitizen-和-cz-customizable" class="headerlink" title="1、安装 commitizen 和 cz-customizable"></a>1、安装 commitizen 和 cz-customizable</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g commitizen@4.2.4</span><br><span class="line">npm i cz-customizable@6.3.0 --save-dev</span><br></pre></td></tr></table></figure><h1 id="2、在-package-json-中进行新增"><a href="#2、在-package-json-中进行新增" class="headerlink" title="2、在 package.json 中进行新增"></a>2、在 package.json 中进行新增</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;config&quot;: &#123;</span><br><span class="line">  &quot;commitizen&quot;: &#123;</span><br><span class="line">    &quot;path&quot;: &quot;node_modules/cz-customizable&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3、在根目录下新建-cz-config-js-文件并写入配置-之后就可以用-git-cz-来代替-git-commit"><a href="#3、在根目录下新建-cz-config-js-文件并写入配置-之后就可以用-git-cz-来代替-git-commit" class="headerlink" title="3、在根目录下新建.cz-config.js 文件并写入配置 之后就可以用 git cz 来代替 git commit"></a>3、在根目录下新建.cz-config.js 文件并写入配置 之后就可以用 git cz 来代替 git commit</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  // 可选类型</span><br><span class="line">  types: [</span><br><span class="line">    &#123; value: &#x27;feat&#x27;, name: &#x27;feat:     新功能&#x27; &#125;,</span><br><span class="line">    &#123; value: &#x27;fix&#x27;, name: &#x27;fix:      修复&#x27; &#125;,</span><br><span class="line">    &#123; value: &#x27;docs&#x27;, name: &#x27;docs:     文档变更&#x27; &#125;,</span><br><span class="line">    &#123; value: &#x27;style&#x27;, name: &#x27;style:    代码格式(不影响代码运行的变动)&#x27; &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      value: &#x27;refactor&#x27;,</span><br><span class="line">      name: &#x27;refactor: 重构(既不是增加feature，也不是修复bug)&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123; value: &#x27;perf&#x27;, name: &#x27;perf:     性能优化&#x27; &#125;,</span><br><span class="line">    &#123; value: &#x27;test&#x27;, name: &#x27;test:     增加测试&#x27; &#125;,</span><br><span class="line">    &#123; value: &#x27;chore&#x27;, name: &#x27;chore:    构建过程或辅助工具的变动&#x27; &#125;,</span><br><span class="line">    &#123; value: &#x27;revert&#x27;, name: &#x27;revert:   回退&#x27; &#125;,</span><br><span class="line">    &#123; value: &#x27;build&#x27;, name: &#x27;build:    打包&#x27; &#125;</span><br><span class="line">  ],</span><br><span class="line">  // 消息步骤</span><br><span class="line">  messages: &#123;</span><br><span class="line">    type: &#x27;请选择提交类型:&#x27;,</span><br><span class="line">    customScope: &#x27;请输入修改范围(可选):&#x27;,</span><br><span class="line">    subject: &#x27;请简要描述提交(必填):&#x27;,</span><br><span class="line">    body: &#x27;请输入详细描述(可选):&#x27;,</span><br><span class="line">    footer: &#x27;请输入要关闭的issue(可选):&#x27;,</span><br><span class="line">    confirmCommit: &#x27;确认使用以上信息提交？(y/n/e/h)&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  // 跳过问题</span><br><span class="line">  skipQuestions: [&#x27;body&#x27;, &#x27;footer&#x27;],</span><br><span class="line">  // subject文字长度默认是72</span><br><span class="line">  subjectLimit: 72</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="4、使用-husky-进行强制-git-代码提交规范"><a href="#4、使用-husky-进行强制-git-代码提交规范" class="headerlink" title="4、使用 husky 进行强制 git 代码提交规范"></a>4、使用 husky 进行强制 git 代码提交规范</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save-dev @commitlint/config-conventional@12.1.4 @commitlint/cli@12.1.4</span><br><span class="line">npm install husky@7.0.1 --save-dev</span><br><span class="line">npx husky install</span><br></pre></td></tr></table></figure><h1 id="5、在-package-json-的-scripts-中新增指令"><a href="#5、在-package-json-的-scripts-中新增指令" class="headerlink" title="5、在 package.json 的 scripts 中新增指令"></a>5、在 package.json 的 scripts 中新增指令</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;prepare&quot;: &quot;husky install&quot;</span><br></pre></td></tr></table></figure><h1 id="6、执行下一步"><a href="#6、执行下一步" class="headerlink" title="6、执行下一步"></a>6、执行下一步</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm run prepare</span><br></pre></td></tr></table></figure><h1 id="7、新增-husky-配置文件-并往里面-commit-msg-写入"><a href="#7、新增-husky-配置文件-并往里面-commit-msg-写入" class="headerlink" title="7、新增 husky 配置文件 并往里面(commit-msg)写入"></a>7、新增 husky 配置文件 并往里面(commit-msg)写入</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npx husky add .husky/commit-msg  //第一步</span><br><span class="line"></span><br><span class="line">npx --no-install commitlint --edit  //第二步在生成的页面中写入</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>关于axios中使用post的问题</title>
      <link href="/posts/91e3.html"/>
      <url>/posts/91e3.html</url>
      
        <content type="html"><![CDATA[<h2 id="axios-中进行-post-请求后端可能无法通过-query-或者-body-获取参数"><a href="#axios-中进行-post-请求后端可能无法通过-query-或者-body-获取参数" class="headerlink" title="axios 中进行 post 请求后端可能无法通过 query 或者 body 获取参数"></a>axios 中进行 post 请求后端可能无法通过 query 或者 body 获取参数</h2><h2 id="1、在-axios-中设置"><a href="#1、在-axios-中设置" class="headerlink" title="1、在 axios 中设置"></a>1、在 axios 中设置</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">headers: &#123;</span><br><span class="line">&#x27;Content-Type&#x27;: &#x27;application/x-www-form-urlencoded&#x27;,</span><br><span class="line">Accept: &#x27;application/json&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、后端-node-js-配合-body-parser"><a href="#2、后端-node-js-配合-body-parser" class="headerlink" title="2、后端 node.js 配合 body-parser"></a>2、后端 node.js 配合 body-parser</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const bodyParser = require(&quot;body-parser&quot;);</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; extended: false &#125;));</span><br><span class="line">然后就可以通过 body 获取参数了</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vue2.x </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>vue组件之间传值</title>
      <link href="/posts/7b0.html"/>
      <url>/posts/7b0.html</url>
      
        <content type="html"><![CDATA[<h1 id="父-→-子传值"><a href="#父-→-子传值" class="headerlink" title="父 → 子传值"></a>父 → 子传值</h1><p>父组件以属性的形式绑定值到子组件身上<br>子组件通过使用属性 props 接收<br>props 是单向绑定的（只读属性）：当父组件的属性变化时，将传导给子组件，但是 反过来不会 props 属性支持两种常见的写法形式<br>数组（推荐） 优点：书写简单 缺点：不能设置默认值、数据类型<br>对象 优点：可以设置数据默认值与数据类型 缺点：写法复杂<br>代码实例：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">child</span> <span class="attr">:a</span>=<span class="string">&#x27;money&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!-- 这里就相当于父组件来传递数据 --&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">child</span> <span class="attr">:a</span>=<span class="string">&#x27;name&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">child</span> <span class="attr">a</span>=<span class="string">&#x27;asdasdasd&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 这个组件就相当于子来接受数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> child=&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">props</span>:[<span class="string">&#x27;a&#x27;</span>],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">template</span>:<span class="string">`&lt;p&gt;&#123;&#123;a&#125;&#125;-------我是子child&lt;/p&gt;`</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">props</span>: [],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">created</span>(<span class="params"></span>) &#123;&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">components</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            child</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">beforeMount</span>(<span class="params"></span>) &#123;&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">mounted</span>(<span class="params"></span>) &#123;&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">beforeUpdate</span>(<span class="params"></span>) &#123;&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">updated</span>(<span class="params"></span>) &#123;&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">beforeDestroy</span>(<span class="params"></span>) &#123;&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">destroyed</span>(<span class="params"></span>) &#123;&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">name</span>: <span class="string">&quot;我是一段数据&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">money</span>:<span class="string">&#x27;我要给你很多钱&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="title function_">bbb</span>(<span class="params"></span>) &#123;&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="title function_">aaa</span>(<span class="params"></span>) &#123;&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">computed</span>: &#123;&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">watch</span>: &#123;&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">filters</span>: &#123;&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>解析：<br>父组件接收数据：<br><img src="/images/vue/vue%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC1.png"></p><p>子组件接收数据：<br><img src="/images/vue/vue%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC2.png"></p><p>子传父：<br>子组件通过$emit来发射数据，父组件通过子组件$emit 定义的名字来识别并接收数据<br>实例代码：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">         <span class="tag">&lt;<span class="name">child</span> @<span class="attr">xinhao</span>=<span class="string">&#x27;bigger&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">         <span class="tag">&lt;<span class="name">p</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;fontSize:fontSize+&#x27;px&#x27;&#125;&quot;</span>&gt;</span> 我是一个字体我可能会长大 我出生是24px<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> child=&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">template</span>:<span class="string">`&lt;button @click=&quot;$emit(&#x27;xinhao&#x27;,9,10)&quot;&gt;我是一个子组件&lt;/button&gt;`</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">props</span>: [],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">components</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            child</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">name</span>: <span class="string">&quot;Vue.js&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">fontSize</span>:<span class="number">24</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">bigger</span>(<span class="params">n,x</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="variable language_">console</span>.<span class="title function_">log</span>(n)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="variable language_">console</span>.<span class="title function_">log</span>(x)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;bigger&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="variable language_">this</span>.<span class="property">fontSize</span> +=x</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">computed</span>: &#123;&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">watch</span>: &#123;&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">filters</span>: &#123;&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>代码解析：<br><img src="/images/vue/vue%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC3.png"><br><img src="/images/vue/vue%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC4.png"></p>]]></content>
      
      
      <categories>
          
          <category> vue2.x </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>动态路由匹配</title>
      <link href="/posts/770b.html"/>
      <url>/posts/770b.html</url>
      
        <content type="html"><![CDATA[<p>所谓动态路由就是路由规则中有部分规则是动态变化的，不是固定的值，需要去匹配取出数据（即路由参数 ）<br><img src="/images/vue/%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1.png"><br>问题：如上代码，如果路由规则里声明需要传递参数，但是实际使用的时候没传递参数会怎么样？<br>答：如果声明需要传递参数，但是实际不传的话则会影响落地页的显示，显示成白板（但是不报错）。<br>注意：在实际开发的时候会有可能需要传参也可能不需要传参的情况，这个时候需要用到可选路由参数点。<br>定义可选路由参数的方式很简单，只需要在原有的路由参数声明位置后面加上个 ? 即可。<br>例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123; path: &quot;film/showdetail/:id?&quot;, component: ShowDetail &#125;,</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vue2.x </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>请求轮询</title>
      <link href="/posts/884a.html"/>
      <url>/posts/884a.html</url>
      
        <content type="html"><![CDATA[<h1 id="第一种方法："><a href="#第一种方法：" class="headerlink" title="第一种方法："></a>第一种方法：</h1><p>相当于给请求设置一个定时器，通过不断请求服务器的数据来更新前端的数据</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="title function_">aaa</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">axios</span>(&#123;</span><br><span class="line">          <span class="attr">url</span>: <span class="string">&quot;/api/kuayu&quot;</span>,</span><br><span class="line">          <span class="attr">method</span>: <span class="string">&quot;get&quot;</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">          .<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">msg</span> = response.<span class="property">data</span>.<span class="property">message</span>;</span><br><span class="line">          &#125;)</span><br><span class="line">          .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;, <span class="number">1000</span>);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我要给服务器发送请求&quot;</span>);</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><h1 id="第二种方法（socket）："><a href="#第二种方法（socket）：" class="headerlink" title="第二种方法（socket）："></a>第二种方法（socket）：</h1><p>服务器端下载好ws:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i ws</span><br></pre></td></tr></table></figure><p>引入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const webSocket=require(&#x27;ws&#x27;)</span><br></pre></td></tr></table></figure><p>前后端的代码：（知道怎么用就行了）</p><p><img src="/images/vue/%E8%AF%B7%E6%B1%82%E8%BD%AE%E8%AF%A2.png"></p>]]></content>
      
      
      <categories>
          
          <category> vue2.x </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>路由概述</title>
      <link href="/posts/9298.html"/>
      <url>/posts/9298.html</url>
      
        <content type="html"><![CDATA[<h1 id="1、路由的概念"><a href="#1、路由的概念" class="headerlink" title="1、路由的概念"></a>1、路由的概念</h1><p>路由的本质就是一种对应关系，根据不同的URL请求，返回对应不同的资源。那么url地址和真实的资源之间就有一种对应的关系，就是路由。<br>路由分为： 后端路由 和 前端路由<br>后端路由：由服务器端进行实现并实现资源映射分发<br>概念：根据不同的用户URL请求，返回不同的内容（地址与资源产生对应关系）<br>本质：URL请求地址与服务器资源之间的对应关系<br>前端路由：根据不同的事件来显示不同的页面内容，是事件与事件处理函数之间的对应关系<br>概念：根据不同的用户事件，显示不同的页面内容（地址与事件产生对应关系）<br>本质：用户事件与事件处理函数之间的对应关系SPA(Single Page Application)单页面应用程序，基于前端路由而起：整个网站只有一个页面，通过监听地址栏中的变化事件，来通过Ajax局部更新内容信息显示、同时支持浏览器地址栏的前进和后退操作。</p><h1 id="2、前端路由实现"><a href="#2、前端路由实现" class="headerlink" title="2、前端路由实现"></a>2、前端路由实现</h1><p>前端路由有2种模式：</p><h2 id="hash模式"><a href="#hash模式" class="headerlink" title="hash模式"></a>hash模式</h2><p>hash路由模式是这样的：<a href="http://xxx.abc.com/#/xx%E3%80%82">http://xxx.abc.com/#/xx。</a> 有带#号，后面就是hash值的变化。改变后面的hash值，它不会向服务器发出请求，因此也就不会刷新页面。并且每次hash值发生改变的时候，会触发hashchange事件。因此我们可以通过监听该事件，来知道hash值发生了哪些变<br>化。<br>window.addEventListener(‘hashchange’, ()&#x3D;&gt;{<br>&#x2F;&#x2F; 通过 location.hash 获取到最新的 hash 值<br>console.log(location.hash);<br>});</p><h2 id="history模式"><a href="#history模式" class="headerlink" title="history模式"></a>history模式</h2><p>HTML5的History API为浏览器的全局history对象增加了该扩展方法。它是一个浏览器<br>（bom）的一个接口，在window对象中提供了onpopstate事件来监听历史栈的改变，只要历史<br>栈有信息发生改变的话，就会触发该事件<br>history.pushState({},title,url); &#x2F;&#x2F; 向历史记录中追加一条记录<br>history.replaceState({},title,url); &#x2F;&#x2F; 替换当前页在历史记录中的信息。<br>window.addEventListener(‘popstate’, function(event) {<br>console.log(event)})<br>注：浏览器地址没有#， 比如(<a href="http://localhost:3001/a">http://localhost:3001/a</a>); 它也一样不会刷新页面的。但是url地<br>址会改变。但它在服务器没有配置的情况下，不能手动刷新，否则返回404页面<br>hash路由体验：</p><body><h1 id="3、Vue-Router"><a href="#3、Vue-Router" class="headerlink" title="3、Vue Router"></a>3、Vue Router</h1><p>网址：<a href="https://router.vuejs.org/zh/">https://router.vuejs.org/zh/</a><br>此处建议创建一个不带 ESlint 的vue项目。</p><h2 id="3-1、介绍"><a href="#3-1、介绍" class="headerlink" title="3.1、介绍"></a>3.1、介绍</h2><p>Vue Router 是 Vue.js 官方的路由管理器。它和 Vue.js 的核心深度集成，让构建单页面应用变得<br>易如反掌。包含的功能有：<br>嵌套的路由&#x2F;视图表<br>模块化的、基于组件的路由配置</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;a href=<span class="string">&quot;#/a&quot;</span>&gt;去a页面&lt;/a&gt;&lt;hr&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#/b&quot;</span>&gt;</span>去b页面<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span>&lt;hr&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#/c&quot;</span>&gt;</span>去c页面<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span>&lt;hr&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#/d&quot;</span>&gt;</span>去d页面<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span>&lt;hr&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;route-view&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 获取元内容素</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">var</span> ctn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;route-view&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 默认渲染</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">render</span>(<span class="string">&#x27;/a&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 监听hashchange事件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;hashchange&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">render</span>(location.<span class="property">hash</span>.<span class="title function_">slice</span>(<span class="number">1</span>))</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 分支</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">function</span> <span class="title function_">render</span>(<span class="params">router</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">switch</span> (router) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">case</span> <span class="string">&#x27;/a&#x27;</span>:</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">ctn.<span class="property">innerHTML</span> = <span class="string">&#x27;这是a页面&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">break</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">case</span> <span class="string">&#x27;/b&#x27;</span>:</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">ctn.<span class="property">innerHTML</span> = <span class="string">&#x27;这是b页面&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">break</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">case</span> <span class="string">&#x27;/c&#x27;</span>:</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">ctn.<span class="property">innerHTML</span> = <span class="string">&#x27;这是c页面&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">break</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">case</span> <span class="string">&#x27;/d&#x27;</span>:</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">ctn.<span class="property">innerHTML</span> = <span class="string">&#x27;这是d页面&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">break</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">default</span>:</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">ctn.<span class="property">innerHTML</span> = <span class="string">&#x27;404页面&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">break</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></body>]]></content>
      
      
      <categories>
          
          <category> vue2.x </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>mixin和主体执行顺序</title>
      <link href="/posts/de0f.html"/>
      <url>/posts/de0f.html</url>
      
        <content type="html"><![CDATA[<h1 id="总结：mixin混入的组件先执行，然后再执行本体"><a href="#总结：mixin混入的组件先执行，然后再执行本体" class="headerlink" title="总结：mixin混入的组件先执行，然后再执行本体"></a>总结：mixin混入的组件先执行，然后再执行本体</h1><h2 id="作用：函数和方法复用"><a href="#作用：函数和方法复用" class="headerlink" title="作用：函数和方法复用"></a>作用：函数和方法复用</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;h1 @click=&#x27;aaa&#x27;&gt;</span><br><span class="line">            mixin学习</span><br><span class="line">        &lt;/h1&gt;</span><br><span class="line">        &lt;h1&gt;</span><br><span class="line">            &#123;&#123;num&#125;&#125;</span><br><span class="line">        &lt;/h1&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var mymixin = &#123;</span><br><span class="line">        </span><br><span class="line">        beforeCreate() &#123; console.log(&#x27;mixin beforeCreate&#x27;) &#125;,</span><br><span class="line">        created() &#123;</span><br><span class="line">            console.log(&#x27;mixin  Create&#x27;)</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeMount() &#123;</span><br><span class="line">            console.log(&#x27;mixin beforemount&#x27;)</span><br><span class="line">        &#125;,</span><br><span class="line">        mounted() &#123;</span><br><span class="line">            console.log(&#x27;mixin mounted&#x27;)</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeUpdate() &#123; console.log(&#x27;mixin beforeupdate&#x27;) &#125;,</span><br><span class="line">        updated() &#123; console.log(&#x27;mixin updated&#x27;) &#125;,</span><br><span class="line">        beforeDestroy() &#123; console.log(&#x27;mixin bdes&#x27;) &#125;,</span><br><span class="line">        destroyed() &#123; console.log(&#x27;mixin des&#x27;) &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            hello: function () &#123;</span><br><span class="line">                console.log(&#x27;我进入mixin的hello里面了&#x27;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    var app = new Vue(&#123;</span><br><span class="line">        mixins: [mymixin],</span><br><span class="line">        el: &#x27;#app&#x27;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            fruits: [&#x27;apple&#x27;, &#x27;pear&#x27;, &#x27;banana&#x27;, &#x27;orange&#x27;],</span><br><span class="line">            num:0</span><br><span class="line">        &#125;,</span><br><span class="line">      </span><br><span class="line">        beforeCreate() &#123; console.log(&#x27; 组件beforeCreate&#x27;) &#125;,</span><br><span class="line">        created() &#123;</span><br><span class="line">            console.log(&#x27;  组件Created&#x27;)</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeMount() &#123;</span><br><span class="line">            console.log(&#x27; 组件beforemount&#x27;)</span><br><span class="line">        &#125;,</span><br><span class="line">        mounted() &#123;</span><br><span class="line">            console.log(&#x27; 组件mounted&#x27;)</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeUpdate() &#123; console.log(&#x27;组件beforeupdate&#x27;) &#125;,</span><br><span class="line">        updated() &#123; console.log(&#x27;组件updated&#x27;) &#125;,</span><br><span class="line">        beforeDestroy() &#123; console.log(&#x27;组件bdes&#x27;) &#125;,</span><br><span class="line">        destroyed() &#123; console.log(&#x27;组件des&#x27;) &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            aaa() &#123;</span><br><span class="line">                this.num++</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vue2.x </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>vue的filter过滤器</title>
      <link href="/posts/2b3d.html"/>
      <url>/posts/2b3d.html</url>
      
        <content type="html"><![CDATA[<p><img src="/images/vue/vue_filter.jpg"></p><h1 id="关键字：-（管道语法）"><a href="#关键字：-（管道语法）" class="headerlink" title="关键字：    |     （管道语法）"></a>关键字：    |     （管道语法）</h1><h2 id="全局过滤器：Vue-filter-‘管道右边的名字’-val-x3D-gt-return-val-需要的操做"><a href="#全局过滤器：Vue-filter-‘管道右边的名字’-val-x3D-gt-return-val-需要的操做" class="headerlink" title="全局过滤器：Vue.filter(‘管道右边的名字’,(val)&#x3D;&gt;(){return val.需要的操做})"></a>全局过滤器：Vue.filter(‘管道右边的名字’,(val)&#x3D;&gt;(){return val.需要的操做})</h2><h2 id="局部过滤器：在声明的vue中用vue-filters"><a href="#局部过滤器：在声明的vue中用vue-filters" class="headerlink" title="局部过滤器：在声明的vue中用vue.filters"></a>局部过滤器：在声明的vue中用vue.filters</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">代码：</span><br><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- html写这里  --&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">            &lt;div&gt;&#123;&#123;msg1 | toUp&#125;&#125;&lt;/div&gt;</span><br><span class="line">            &lt;div&gt;&#123;&#123;msg2 | toLow&#125;&#125;&lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">        &lt;!-- 开始写vue的核心代码 --&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line"></span><br><span class="line">            // 全局过滤器</span><br><span class="line">            Vue.filter(&#x27;toUp&#x27;,(val)=&gt;&#123;</span><br><span class="line">                return val.toUpperCase();</span><br><span class="line">            &#125;)</span><br><span class="line">            var vm = new Vue(&#123;</span><br><span class="line">                // 传入监管哪个容器</span><br><span class="line">                el: &#x27;#app&#x27;,</span><br><span class="line">                // 这个容器所需要的数据</span><br><span class="line">                data: &#123;</span><br><span class="line">                    msg1: &#x27;abcdefg&#x27;,</span><br><span class="line">                    msg2: &#x27;ABCDEFG&#x27;</span><br><span class="line">                &#125;,</span><br><span class="line">                methods: &#123;</span><br><span class="line"></span><br><span class="line">                &#125;,</span><br><span class="line">                computed: &#123;</span><br><span class="line"></span><br><span class="line">                &#125;,</span><br><span class="line">                filters:&#123;</span><br><span class="line">                    toLow:(val)=&gt;&#123;</span><br><span class="line">                        return val.toLowerCase() </span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            console.log(&#x27;vm&#x27;, vm)</span><br><span class="line">        &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vue2.x </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>匿名函数中this指向问题</title>
      <link href="/posts/e384.html"/>
      <url>/posts/e384.html</url>
      
        <content type="html"><![CDATA[<h1 id="关于this对象："><a href="#关于this对象：" class="headerlink" title="关于this对象："></a>关于this对象：</h1><p><strong>在js中，全局函数中的this指向windows，而当函数被作为某个对象的方法调用时，this指向那个对象。不过匿名函数的执行环境具有全局性，因此匿名函数的this通常指向windows，但是由于编写闭包的方式不同，this指向也会不同</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name=<span class="string">&#x27;windows&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;my object&#x27;</span>,</span><br><span class="line">    <span class="attr">getname</span>:<span class="title function_">fucntion</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>; <span class="comment">//this指向 windows</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name=<span class="string">&#x27;windows&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;my object&#x27;</span>,</span><br><span class="line">    <span class="attr">getname</span>:<span class="title function_">fucntion</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> that=<span class="variable language_">this</span></span><br><span class="line">            <span class="keyword">return</span> that.<span class="property">name</span>; <span class="comment">//this指向 my object</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>面向对象</title>
      <link href="/posts/9852.html"/>
      <url>/posts/9852.html</url>
      
        <content type="html"><![CDATA[<h1 id="1、工厂模式"><a href="#1、工厂模式" class="headerlink" title="1、工厂模式"></a>1、工厂模式</h1><p>简单的函数构建,没办法解决对象识别的问题(怎样知道一个对象的原型)</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">gongchang</span>(<span class="params">args1,args2</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> o=<span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    o.<span class="property">name</span>=args1;</span><br><span class="line">    o.<span class="property">fn</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是工厂模式&#x27;</span>+args2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> gong1=<span class="title function_">gongchang</span>(<span class="string">&#x27;参数1&#x27;</span>,<span class="string">&#x27;参数2&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="2、构造函数模式"><a href="#2、构造函数模式" class="headerlink" title="2、构造函数模式"></a>2、构造函数模式</h1><p>使用了new操作符，缺点就是每个方法都要在实例上创建一次，造成资源浪费</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">gouzao</span>(<span class="params">args1,args2</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span>=args1;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span>=args2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> zouzao1=<span class="keyword">new</span> <span class="title function_">gouzao</span>(<span class="string">&#x27;gouzao&#x27;</span>,<span class="number">20</span>);</span><br></pre></td></tr></table></figure><h2 id="new操作符省略了四个步骤"><a href="#new操作符省略了四个步骤" class="headerlink" title="new操作符省略了四个步骤:"></a>new操作符省略了四个步骤:</h2><p>1、创建新的对象；<br>2、将构造函数的作用域赋值给新的对象(this指向新对象)；<br>3、执行构造函数中的代码；<br>4、返回新的对象</p><h1 id="3、原型模式"><a href="#3、原型模式" class="headerlink" title="3、原型模式"></a>3、原型模式</h1><h2 id="定义的属性和方法都是共享的，一旦实例对象中不存在相对应的属性，就会去原型对象中寻找"><a href="#定义的属性和方法都是共享的，一旦实例对象中不存在相对应的属性，就会去原型对象中寻找" class="headerlink" title="定义的属性和方法都是共享的，一旦实例对象中不存在相对应的属性，就会去原型对象中寻找"></a>定义的属性和方法都是共享的，一旦实例对象中不存在相对应的属性，就会去原型对象中寻找</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">yuanxing</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">yuanxing.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span>=<span class="string">&#x27;yuanxing&#x27;</span>;</span><br><span class="line">yuanxing.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">age</span>=<span class="number">20</span>;</span><br><span class="line"><span class="keyword">var</span> yuanxing1=<span class="keyword">new</span> <span class="title function_">yuanxing</span>();</span><br></pre></td></tr></table></figure><h1 id="4、组合使用构造函数模式和原型模式"><a href="#4、组合使用构造函数模式和原型模式" class="headerlink" title="4、组合使用构造函数模式和原型模式"></a>4、组合使用构造函数模式和原型模式</h1><p>构造函数模式用于定义实例属性，原型模式用于定义方法和共享的属性</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name,age</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span>=name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span>=age;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">arr1</span>=[<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>=&#123;</span><br><span class="line">    <span class="attr">constructor</span>:<span class="title class_">Person</span>,</span><br><span class="line">    <span class="attr">sayName</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1=<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;ceshi1&#x27;</span>,<span class="number">20</span>);</span><br><span class="line"><span class="keyword">var</span> person2=<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;ceshi2&#x27;</span>,<span class="number">18</span>);</span><br><span class="line"></span><br><span class="line">person1.<span class="property">arr1</span>.<span class="title function_">push</span>(<span class="string">&#x27;7&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1.<span class="property">arr1</span>);  <span class="comment">//1,3,5,7</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person2.<span class="property">arr1</span>);  <span class="comment">//1,3,5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1.<span class="property">sayname</span>==person2.<span class="property">sayname</span>);   <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="5、动态原型模式"><a href="#5、动态原型模式" class="headerlink" title="5、动态原型模式"></a>5、动态原型模式</h1><p>把所有信息都封装在了构造函数中，而通过在构造函数中初始化原型(仅在必要的情况下)，又保持了同时使用构造函数和原型的优点</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name,age</span>)&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">name</span>=name;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">age</span>=age;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="variable language_">this</span>.<span class="property">sayname</span>!=<span class="string">&quot;function&quot;</span>)&#123;</span><br><span class="line">    <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayname</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> peroson1=<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;ceshi1&#x27;</span>,<span class="number">20</span>);</span><br><span class="line">person1.<span class="title function_">sayname</span>();</span><br></pre></td></tr></table></figure><h1 id="6、寄生构造函数模式"><a href="#6、寄生构造函数模式" class="headerlink" title="6、寄生构造函数模式"></a>6、寄生构造函数模式</h1><p>基本思想就是创建一个函数，该函数的作用仅仅是封装创建对象的代码，然后再返回新创建的对象，优点类似工厂模式，只不过在赋值的时候用了new操作符</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name,age</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> o=<span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    o.<span class="property">name</span>=name;</span><br><span class="line">    o.<span class="property">age</span>=age;</span><br><span class="line">    o.<span class="property">sayname</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> o</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1=<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;ceshi1&#x27;</span>,<span class="number">20</span>);</span><br><span class="line">person1.<span class="title function_">sayname</span>(); <span class="comment">//ceshi1</span></span><br><span class="line"></span><br><span class="line">**这个模式可以在特殊的情况下用来为对象创建构造函数(假设我们向创建一个具有额外方法的特殊数组)**</span><br></pre></td></tr></table></figure><h1 id="7、稳妥构造函数模式"><a href="#7、稳妥构造函数模式" class="headerlink" title="7、稳妥构造函数模式"></a>7、稳妥构造函数模式</h1><p>所谓稳妥对象，指的是没有公共属性，而且其方法也不引用this的对象，适合在一些安全的环境中，或者防止数据被其他应用程序改动时使用</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name,age</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> o=<span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    o.<span class="property">sayname</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(name)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//注意。在这种模式下。除了使用sayname方法外，没有其他方法访问name的值</span></span><br><span class="line"><span class="keyword">var</span> person1=<span class="title class_">Person</span>(<span class="string">&#x27;ceshi1&#x27;</span>,<span class="number">20</span>);</span><br><span class="line">person1.<span class="title function_">sayname</span>();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>computed以及watch</title>
      <link href="/posts/e58d.html"/>
      <url>/posts/e58d.html</url>
      
        <content type="html"><![CDATA[<h1 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h1><h2 id="计算属性可用于快速计算视图（-View-）中显示的属性。这些计算将被缓存，并且只在需要时更新。计算属性的用法：将胡子语法中的变量放在computed中声明，并且以函数的形式进行声明并返回data中监听的变量代码1："><a href="#计算属性可用于快速计算视图（-View-）中显示的属性。这些计算将被缓存，并且只在需要时更新。计算属性的用法：将胡子语法中的变量放在computed中声明，并且以函数的形式进行声明并返回data中监听的变量代码1：" class="headerlink" title="计算属性可用于快速计算视图（ View ）中显示的属性。这些计算将被缓存，并且只在需要时更新。计算属性的用法：将胡子语法中的变量放在computed中声明，并且以函数的形式进行声明并返回data中监听的变量代码1："></a><strong>计算属性可用于快速计算视图（ View ）中显示的属性。这些计算将被缓存，并且只在需要时更新。</strong><br><strong>计算属性的用法：将胡子语法中的变量放在computed中声明，并且以函数的形式进行声明并返回data中监听的变量</strong><br>代码1：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- html写这里  --&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">            &lt;h1&gt;&#123;&#123;fn()&#125;&#125;&lt;/h1&gt;</span><br><span class="line">             &lt;h1&gt;&#123;&#123;fn()&#125;&#125;&lt;/h1&gt;</span><br><span class="line">             &lt;h1&gt;&#123;&#123;fn()&#125;&#125;&lt;/h1&gt;</span><br><span class="line">             &lt;h1&gt;&#123;&#123;num&#125;&#125;&lt;/h1&gt;</span><br><span class="line">             &lt;h1&gt;&#123;&#123;computedfn&#125;&#125;&lt;/h1&gt;</span><br><span class="line">             &lt;h1&gt;&#123;&#123;computedfn&#125;&#125;&lt;/h1&gt;</span><br><span class="line">             &lt;button @click=&#x27;fn2&#x27;&gt;点击+数字&lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">        &lt;!-- 开始写vue的核心代码 --&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            var vm = new Vue(&#123;</span><br><span class="line">                // 传入监管哪个容器</span><br><span class="line">                el: &#x27;#app&#x27;,</span><br><span class="line">                // 这个容器所需要的数据</span><br><span class="line">                data: &#123;</span><br><span class="line">                    num:100</span><br><span class="line">                &#125;,</span><br><span class="line">                methods: &#123;</span><br><span class="line">                    fn()&#123;</span><br><span class="line">                        console.log(1);</span><br><span class="line">                        return this.num</span><br><span class="line">                    &#125;,</span><br><span class="line">                    fn2()&#123;</span><br><span class="line">                        console.log(2);</span><br><span class="line">                        this.num  = 100+1 </span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                computed:&#123;</span><br><span class="line">                    computedfn()&#123;</span><br><span class="line">                        console.log(3);</span><br><span class="line">                        return this.num</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            // console.log(&#x27;vm&#x27;, vm)</span><br><span class="line">        &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="代码2："><a href="#代码2：" class="headerlink" title="代码2："></a>代码2：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- html写这里  --&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">            &lt;h1&gt;&#123;&#123;msg&#125;&#125;&lt;/h1&gt;</span><br><span class="line">            &lt;h1&gt;&#123;&#123;msg2&#125;&#125;&lt;/h1&gt;</span><br><span class="line">            &lt;button @click=&quot;fn1&quot;&gt;反转&lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">        &lt;!-- 开始写vue的核心代码 --&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            var vm = new Vue(&#123;</span><br><span class="line">                // 传入监管哪个容器</span><br><span class="line">                el: &#x27;#app&#x27;,</span><br><span class="line">                // 这个容器所需要的数据</span><br><span class="line">                data: &#123;</span><br><span class="line">                    msg:&#x27;helloworld&#x27;,</span><br><span class="line">                    </span><br><span class="line">                &#125;,</span><br><span class="line">                methods: &#123;</span><br><span class="line">                    fn1()&#123;</span><br><span class="line">                        console.log(1);</span><br><span class="line">                        this.msg=&#x27;asd&#x27;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                computed:&#123;</span><br><span class="line">                    msg2:function()&#123;</span><br><span class="line">                        console.log(&#x27;进入到msg2中了&#x27;);</span><br><span class="line">                        return this.msg.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            console.log(&#x27;vm&#x27;, vm)</span><br><span class="line">        &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="代码3："><a href="#代码3：" class="headerlink" title="代码3："></a>代码3：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- html写这里  --&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                姓 &lt;input type=&quot;text&quot; v-model=&quot;first&quot; &gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">              名 &lt;input type=&quot;text&quot; v-model=&quot;last&quot;&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">               姓名 &lt;input type=&quot;text&quot; v-model=&quot;all&quot;&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">        &lt;!-- 开始写vue的核心代码 --&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            var vm = new Vue(&#123;</span><br><span class="line">                // 传入监管哪个容器</span><br><span class="line">                el: &#x27;#app&#x27;,</span><br><span class="line">                // 这个容器所需要的数据</span><br><span class="line">                data: &#123;</span><br><span class="line">                    first:&#x27;&#x27;,</span><br><span class="line">                    last:&#x27;&#x27;,</span><br><span class="line">                &#125;,</span><br><span class="line">                methods: &#123;</span><br><span class="line"></span><br><span class="line">                &#125;,</span><br><span class="line">                computed:&#123;</span><br><span class="line">                  all()&#123;</span><br><span class="line">                    return this.first+&#x27; &#x27;+this.last</span><br><span class="line">                  &#125;  </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            console.log(&#x27;vm&#x27;, vm)</span><br><span class="line">        &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h1 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h1><h2 id="用法：在watch中声明监听的变量以及属性值，这个变量必须是在data中存在，然后在methods中用属性值创建一个函数来执行监听后下一步的操作。代码1："><a href="#用法：在watch中声明监听的变量以及属性值，这个变量必须是在data中存在，然后在methods中用属性值创建一个函数来执行监听后下一步的操作。代码1：" class="headerlink" title="用法：在watch中声明监听的变量以及属性值，这个变量必须是在data中存在，然后在methods中用属性值创建一个函数来执行监听后下一步的操作。代码1："></a><strong>用法：在watch中声明监听的变量以及属性值，这个变量必须是在data中存在，然后在methods中用属性值创建一个函数来执行监听后下一步的操作。</strong><br>代码1：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- html写这里  --&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">            &lt;h1&gt;watch基础&lt;/h1&gt;</span><br><span class="line">            &lt;input type=&quot;text&quot; v-model=&#x27;msg&#x27;&gt;</span><br><span class="line">            &lt;h1&gt;&#123;&#123;copymsg&#125;&#125;&lt;/h1&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;!-- 开始写vue的核心代码 --&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        var vm = new Vue(&#123;</span><br><span class="line">            // 传入监管哪个容器</span><br><span class="line">            el:&#x27;#app&#x27;,</span><br><span class="line">            // 这个容器所需要的数据</span><br><span class="line">            data:&#123;</span><br><span class="line">                msg:&#x27;helloworld&#x27;,</span><br><span class="line">                copymsg:&#x27;&#x27;</span><br><span class="line">            &#125;,</span><br><span class="line">            // 这是计算属性</span><br><span class="line">            computed:&#123;</span><br><span class="line">               </span><br><span class="line">            &#125;,</span><br><span class="line">            // 这是watch侦听器</span><br><span class="line">            watch:&#123;</span><br><span class="line">                msg:&#x27;handlefn1&#x27;</span><br><span class="line">            &#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line">                // 这边的value会默认传你输入的数据</span><br><span class="line">                handlefn1(value)&#123;</span><br><span class="line">                    console.log(&#x27;value&#x27;,value)</span><br><span class="line">                    console.log(&#x27;来到了handlefn1methods里面了&#x27;)</span><br><span class="line">                    this.copymsg = value</span><br><span class="line">                &#125; </span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line">        console.log(&#x27;vm&#x27;,vm)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="代码2：深度监听、立刻执行："><a href="#代码2：深度监听、立刻执行：" class="headerlink" title="代码2：深度监听、立刻执行："></a>代码2：深度监听、立刻执行：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- html写这里  --&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">            &lt;p&gt;</span><br><span class="line">                &lt;input type=&quot;text&quot; v-model=&#x27;userinfo.firstname&#x27; placeholder=&quot;姓&quot;&gt;</span><br><span class="line">            &lt;/p&gt;</span><br><span class="line">            &lt;p&gt;</span><br><span class="line">                &lt;input type=&quot;text&quot; v-model=&#x27;userinfo.lastname&#x27; placeholder=&quot;名&quot;&gt;</span><br><span class="line">            &lt;/p&gt;</span><br><span class="line">            &lt;p&gt;</span><br><span class="line">                &lt;input type=&quot;text&quot; v-model=&#x27;userinfo.fullname&#x27; placeholder=&quot;全名&quot;&gt;</span><br><span class="line">            &lt;/p&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">        &lt;!-- 开始写vue的核心代码 --&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            var vm = new Vue(&#123;</span><br><span class="line">                // 传入监管哪个容器</span><br><span class="line">                el: &#x27;#app&#x27;,</span><br><span class="line">                // 这个容器所需要的数据</span><br><span class="line">                data: &#123;</span><br><span class="line">                    userinfo: &#123;</span><br><span class="line">                        firstname: &#x27;c&#x27;,</span><br><span class="line">                        lastname: &#x27;aaaa&#x27;,</span><br><span class="line">                        fullname: &#x27;&#x27;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                // 这是计算属性</span><br><span class="line">                computed: &#123;</span><br><span class="line"></span><br><span class="line">                &#125;,</span><br><span class="line">                // 这是watch侦听器</span><br><span class="line">                // 高难度用法 watch的deep深度监听</span><br><span class="line">                watch: &#123;</span><br><span class="line">                    userinfo: &#123;</span><br><span class="line">                        // 程序处理或者处理函数</span><br><span class="line">                        handler(val)&#123;</span><br><span class="line">                            // 此时的val理应是整个userinfo</span><br><span class="line">                            console.log(&#x27;val&#x27;,val)</span><br><span class="line">                            this.userinfo.fullname=val.firstname+&quot; &quot; +val.lastname</span><br><span class="line">                            // this.userinfo.fullname=this.userinfo.firstname+&quot; &quot; +val.lastname</span><br><span class="line">                            console.log(&#x27;this.userinfo.firstname&#x27;,this.userinfo.firstname)</span><br><span class="line">                        &#125;,</span><br><span class="line">                        // 要求深度监听</span><br><span class="line">                        deep:true,</span><br><span class="line">                        // 要求除了深度监听还要立即执行一次</span><br><span class="line">                        immediate:true</span><br><span class="line">                       </span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                methods: &#123;</span><br><span class="line">                    // 这边的value会默认传你输入的数据</span><br><span class="line">                    handlefn1(value) &#123;</span><br><span class="line">                        console.log(&#x27;value&#x27;, value)</span><br><span class="line">                        console.log(&#x27;来到了handlefn1methods里面了&#x27;)</span><br><span class="line">                        this.copymsg = value</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            console.log(&#x27;vm&#x27;, vm)</span><br><span class="line">        &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="监听到数据改变不交给methods-watch内部自己处理的方式"><a href="#监听到数据改变不交给methods-watch内部自己处理的方式" class="headerlink" title="监听到数据改变不交给methods watch内部自己处理的方式"></a>监听到数据改变不交给methods watch内部自己处理的方式</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- html写这里  --&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">            &lt;p&gt;</span><br><span class="line">                &lt;input type=&quot;text&quot; v-model=&#x27;firstname&#x27; placeholder=&quot;姓&quot;&gt;</span><br><span class="line">            &lt;/p&gt;</span><br><span class="line">            &lt;p&gt;</span><br><span class="line">                &lt;input type=&quot;text&quot; v-model=&#x27;lastname&#x27; placeholder=&quot;名&quot;&gt;</span><br><span class="line">            &lt;/p&gt;</span><br><span class="line">            &lt;p&gt;</span><br><span class="line">                &lt;input type=&quot;text&quot; v-model=&#x27;fullname&#x27; placeholder=&quot;全名&quot;&gt;</span><br><span class="line">            &lt;/p&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;!-- 开始写vue的核心代码 --&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        var vm = new Vue(&#123;</span><br><span class="line">            // 传入监管哪个容器</span><br><span class="line">            el:&#x27;#app&#x27;,</span><br><span class="line">            // 这个容器所需要的数据</span><br><span class="line">            data:&#123;</span><br><span class="line">                firstname:&#x27;&#x27;,</span><br><span class="line">                lastname:&#x27;&#x27;,</span><br><span class="line">                fullname:&#x27;&#x27;</span><br><span class="line">            &#125;,</span><br><span class="line">            // 这是计算属性</span><br><span class="line">            computed:&#123;</span><br><span class="line">               </span><br><span class="line">            &#125;,</span><br><span class="line">            // 这是watch侦听器</span><br><span class="line">            watch:&#123;</span><br><span class="line">                // 第一种无法立即执行</span><br><span class="line">                // msg:&#x27;handlefn1&#x27;</span><br><span class="line">                // 这是一个监听到数据改变不交给methods watch内部自己处理的方式</span><br><span class="line">                firstname:function(val) &#123;</span><br><span class="line">                    console.log(&#x27;firstname改变了&#x27;)</span><br><span class="line">                    this.fullname = val + &#x27; &#x27; + this.lastname</span><br><span class="line">                &#125;,</span><br><span class="line">                lastname:function(val) &#123;</span><br><span class="line">                    console.log(&#x27;lastname改变了&#x27;)</span><br><span class="line">                    this.fullname = this.firstname + &#x27; &#x27; + val</span><br><span class="line">                &#125;,</span><br><span class="line">               </span><br><span class="line">            &#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line">                // 这边的value会默认传你输入的数据</span><br><span class="line">                handlefn1(value)&#123;</span><br><span class="line">                    console.log(&#x27;value&#x27;,value)</span><br><span class="line">                    console.log(&#x27;来到了handlefn1methods里面了&#x27;)</span><br><span class="line">                    this.copymsg = value</span><br><span class="line">                &#125; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        console.log(&#x27;vm&#x27;,vm)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h1 id="两者的区别"><a href="#两者的区别" class="headerlink" title="两者的区别:"></a>两者的区别:</h1><p>1、computed支持缓存，依赖的数据发生改变才会触发进行重新计算；watch不支持缓存，只要监听的数据变化就会触发相应操作;<br>2、computed不支持异步,watch支持异步操作;<br>3、computed属性的属性值是一函数，函数返回值为属性的属性值，computed中每个属性都可以设置set与get方法。watch监听的数据必须是data中声明过或父组件传递过来的props中的数据，当数据变化时，触发监听器;</p>]]></content>
      
      
      <categories>
          
          <category> vue2.x </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>vue生命周期</title>
      <link href="/posts/54f6.html"/>
      <url>/posts/54f6.html</url>
      
        <content type="html"><![CDATA[<p><strong>生命周期：是在特定情况下，在页面或者应用从创建到消亡会被自动调用的回调函数</strong></p><h1 id="有8个：beforeCreate"><a href="#有8个：beforeCreate" class="headerlink" title="有8个：beforeCreate(){}"></a>有8个：<br>beforeCreate(){}</h1><p>第一个生命周期beforeCreate 的调用时机是应用未完全创建好就会被调用，这时候data和methods还不能够使用</p><h1 id="created"><a href="#created" class="headerlink" title="created(){}"></a>created(){}</h1><p>应用创建了并且数据data和methods可用了，但是都dom还没有挂载</p><h1 id="beforeMount"><a href="#beforeMount" class="headerlink" title="beforeMount(){}"></a>beforeMount(){}</h1><p>页面渲染之前，应用创建了data和methods，dom即将挂载，beforeMount大多数情况和created保持一直，因为dom都是即将挂载</p><h1 id="mounted"><a href="#mounted" class="headerlink" title="mounted(){}"></a>mounted(){}</h1><p>页面渲染之后data和methods可用了 最大的区别就是dom挂载成功，在vue中最快想进入的DOM操作必须在mounted里面</p><h1 id="beforeUpdate"><a href="#beforeUpdate" class="headerlink" title="beforeUpdate(){}"></a>beforeUpdate(){}</h1><p>数据更新之前，重点要求数据和视图必须有以来并且改变</p><h1 id="updated"><a href="#updated" class="headerlink" title="updated(){}"></a>updated(){}</h1><p>数据更新之后，重点要求数据和视图必须有以来并且改变，如果项目中有重要数据不能超过某个值，这个数据还经常更新，就可以用updated</p><h1 id="beforeDestroy"><a href="#beforeDestroy" class="headerlink" title="beforeDestroy() {}"></a>beforeDestroy() {}</h1><p>页面销毁之前，会在页面跳转的时候自动执行</p><h1 id="destroyed"><a href="#destroyed" class="headerlink" title="destroyed(){}"></a>destroyed(){}</h1><p>页面销毁之后，会把内部的算法全部断开，清除此页面多余的内存。如果手动在本页面清除，数据还会残余，但是如果跳转页面，没用的数据、方法都会被清除，节约内存，提高篇性能</p><p>注意点：在beforeUpdate和updated两者之间，虽然是都已经刷新视图了，但是在beforeUpdate中，由于只是在虚拟DOM中更改数据，所以用实际上还是没有更新数据到DOM中（可以获取元素用innerHTML来了解beforeUpdate到底在DOM中是不是更改了数据）</p><p>代码：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- html写这里  --&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">            &lt;h1 id=&quot;h1&quot;&gt;</span><br><span class="line">                &#123;&#123;msg2&#125;&#125;</span><br><span class="line">            &lt;/h1&gt;</span><br><span class="line">            &lt;h1 id=&quot;h2&quot;&gt;</span><br><span class="line">                &#123;&#123;num&#125;&#125;</span><br><span class="line">            &lt;/h1&gt;</span><br><span class="line">            &lt;button @click=&#x27;change&#x27;&gt;改变数字&lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;!-- 开始写vue的核心代码 --&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        // new 操作符的过程是不是有四步隐藏的函数</span><br><span class="line">        var vm = new Vue(&#123;</span><br><span class="line">            // 传入监管哪个容器</span><br><span class="line">            el:&#x27;#app&#x27;,</span><br><span class="line">            // 这个容器所需要的数据</span><br><span class="line">            data:&#123;</span><br><span class="line">                msg:&#x27;&#x27;,</span><br><span class="line">                msg2:&#x27;你好世界&#x27;,</span><br><span class="line">                num:0,</span><br><span class="line">                num2:1</span><br><span class="line">            &#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line">                a()&#123;</span><br><span class="line">                    console.log(&#x27;a方法调用了&#x27;)</span><br><span class="line">                &#125;,</span><br><span class="line">                change()&#123;</span><br><span class="line">                    console.log(&#x27;进入change里面&#x27;)</span><br><span class="line">                    this.num++</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            // 生命周期 是在特定情况下 在页面或者应用从创建到消亡会被自动调用的回调函数</span><br><span class="line">            // 组件创建之前 beforeCreate() 四个桥梁函数还未完全给到能量</span><br><span class="line">            //第一个生命周期beforeCreate 的调用时机是应用未完全创建好就会被调用</span><br><span class="line">            beforeCreate()&#123;</span><br><span class="line">                console.log(&#x27;beforeCreate&#x27;,this.msg2)</span><br><span class="line">             </span><br><span class="line">            &#125;,</span><br><span class="line">            // 第二个生命周期 应用创建了 已经出生了并且数据data和methods可用了 但是dom没有挂载 准备挂载</span><br><span class="line">            created()&#123;</span><br><span class="line">                console.log(&#x27;created&#x27;)</span><br><span class="line">                console.log(this.msg2)</span><br><span class="line">                this.a()</span><br><span class="line">                var h = document.getElementById(&#x27;h1&#x27;)</span><br><span class="line">                console.log(h)</span><br><span class="line">            &#125;,</span><br><span class="line">            // 第三个生命周期    页面渲染之前 应用创建了data和methods可用了 dom即将挂载</span><br><span class="line">            // beforeMout的大多数时候 和created保持一致 因为dom即将挂在 </span><br><span class="line">            // 也是没有挂载 所以大多数他俩生命周期二选一的时候 用created </span><br><span class="line">            beforeMount()&#123;</span><br><span class="line">                console.log(&#x27;beforeMount&#x27;)</span><br><span class="line">                console.log(this.msg2)</span><br><span class="line">                this.a()</span><br><span class="line">                var h = document.getElementById(&#x27;h1&#x27;)</span><br><span class="line">                console.log(h)</span><br><span class="line">            &#125;,</span><br><span class="line">            // 第四个生命周期    页面渲染之后 data和methods可用了  重大区别就是 dom挂载成功</span><br><span class="line">            // 在vue中最快想进入的DOM操作必须在 mounted里面 </span><br><span class="line">            mounted()&#123;</span><br><span class="line">                console.log(&#x27; Mounted&#x27;)</span><br><span class="line">                console.log(this.msg2)</span><br><span class="line">                this.a()</span><br><span class="line">                var h = document.getElementById(&#x27;h1&#x27;)</span><br><span class="line">                console.log(h)</span><br><span class="line"></span><br><span class="line">            &#125;,</span><br><span class="line">            // 第五个生命周期   数据更新之前  重点要求数据和视图必须有依赖并且改变</span><br><span class="line">            beforeUpdate()&#123;</span><br><span class="line">                console.log(&#x27;beforeUpdate&#x27;)</span><br><span class="line">                 console.log(this.num)</span><br><span class="line">                //  这个只能打印到虚拟dom 虚拟dom已经变了看起来无异常 但是虚拟dom还未真实的</span><br><span class="line">                // 渲染到dom上面 </span><br><span class="line">                //  var h = document.getElementById(&#x27;h2&#x27;)</span><br><span class="line">                //  console.log(h)</span><br><span class="line">                console.log( document.getElementById(&#x27;app&#x27;).innerHTML)</span><br><span class="line">                </span><br><span class="line">                </span><br><span class="line">            &#125;,</span><br><span class="line">              // 第六个生命周期   数据更新之后  重点要求数据和视图必须有依赖并且改变</span><br><span class="line">            //   如果项目中有重要数据不能超过某个值  这个数据还经常更新 就可用用updated</span><br><span class="line">            updated()&#123;</span><br><span class="line">                console.log(&#x27;updated&#x27;)</span><br><span class="line">                if(this.num&gt;10) &#123;</span><br><span class="line">                    this.num =10</span><br><span class="line">                &#125;</span><br><span class="line">                console.log(this.num)</span><br><span class="line">                // var h = document.getElementById(&#x27;h2&#x27;)</span><br><span class="line">                //  console.log(h)</span><br><span class="line">                console.log( document.getElementById(&#x27;app&#x27;).innerHTML)</span><br><span class="line">                </span><br><span class="line">            &#125;,</span><br><span class="line">            // 第七个生命周期   beforedestroy 页面销毁之前  </span><br><span class="line">            // 这两个销毁生命周期函数 会在页面跳转的时候自动执行 </span><br><span class="line">            //</span><br><span class="line">            beforeDestroy() &#123;</span><br><span class="line">                console.log(&#x27;beforeDestory&#x27;)</span><br><span class="line">            &#125;,</span><br><span class="line">            // 第八个生命周期 页面销毁之后 </span><br><span class="line">            // 作用会把内部的算法全部断开  清空此页面多余的内存  </span><br><span class="line">            // 如果手动在本页面清除 数据还会残余  如果真的跳转页面 没用的数据</span><br><span class="line">            // 方法都会清理内存空间 节约用户性能</span><br><span class="line">            // 探讨下框架的方便之处  </span><br><span class="line">            // 比如你在二阶段用跳页面功能的时候你是否做了 类似于垃圾清理 节约用户性能的事情</span><br><span class="line">            // 除此之外 销毁的两个生命周期还可以 清除定时器  监听事件等  再跳转页面的时候  </span><br><span class="line">            // 比如再mounted里面定义定时器 或者监听事件click  然后另一个页面不需要这个定时器</span><br><span class="line">            // 或者监听事件 然后跳转页面的时候会自动调用 销毁的两个生命周期函数 beforeDestroy  destroyed</span><br><span class="line">            // 就可用再这两个里面 顺便清除他们  </span><br><span class="line">            destroyed()&#123;</span><br><span class="line">                console.log(&#x27;destroyed页面销毁之后&#x27;)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line">        console.log(&#x27;vm&#x27;,vm)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vue2.x </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>vue自定义指令</title>
      <link href="/posts/477a.html"/>
      <url>/posts/477a.html</url>
      
        <content type="html"><![CDATA[<h1 id="自定义指令的参数："><a href="#自定义指令的参数：" class="headerlink" title="自定义指令的参数："></a>自定义指令的参数：</h1><p>全局：Vue.directive(‘参数1’，参数2)<br>局部:directives:{<br>参数1:{<br>参数2<br>}<br>}</p><h2 id="参数一：指令的名称，不需要加”v-“前缀；调用时需要加上。"><a href="#参数一：指令的名称，不需要加”v-“前缀；调用时需要加上。" class="headerlink" title="参数一：指令的名称，不需要加”v-“前缀；调用时需要加上。"></a>参数一：指令的名称，不需要加”v-“前缀；调用时需要加上。</h2><h2 id="参数二：是一个对象，有相关钩子函数（可选），可在特定阶段执行相关操作。"><a href="#参数二：是一个对象，有相关钩子函数（可选），可在特定阶段执行相关操作。" class="headerlink" title="参数二：是一个对象，有相关钩子函数（可选），可在特定阶段执行相关操作。"></a>参数二：是一个对象，有相关钩子函数（可选），可在特定阶段执行相关操作。</h2><h2 id="自定义指令的钩子函数："><a href="#自定义指令的钩子函数：" class="headerlink" title="自定义指令的钩子函数："></a>自定义指令的钩子函数：</h2><p>-bind()，只调用一次，指令在第一次绑定到元素身上时调用。可以定义一个在绑定时执行的初始化动作。<br>-inserted()，被绑定元素插入到父节点时调用（父节点存在即可调用，不必存在于dom中）。<br>-update()，所在组件的VNode跟新时调用，可能触发多次。但可能发生在其孩子的VNode跟新之前。指令的值可能发生了改变也可能没有。</p><p>钩子函数参数：<br>第一个参数：永远是el，表示绑定此自定义指令的元素，是个元素的js对象。<br>第二个参数：binding，是一个对象，包含以下参数：<br>name，指令名，不包含v-前缀。<br>value，指令的绑定值。如v-focus&#x3D;”1+1”，value即为2。<br>oldValue，指令绑定的前一个值，仅在update()和componentUpdated()钩子中使用。无论值是否改变都可用。<br>expression，绑定值的字符串形式，如value中值即为”1+1”。<br>第三个参数：vnode，Vue 编译生成的虚拟节点。<br>第四个参数：上一个虚拟节点，仅在 update 和 componentUpdated 钩子中可用。</p><h1 id="代码1：文字颜色以及手机号验证"><a href="#代码1：文字颜色以及手机号验证" class="headerlink" title="代码1：文字颜色以及手机号验证"></a>代码1：文字颜色以及手机号验证</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- html写这里  --&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">            &lt;!-- 第1个指令v-red  vue内置中没有我们自己写  实现把字体变红色功能--&gt;</span><br><span class="line">            &lt;div v-red&gt;</span><br><span class="line">                文字</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">               &lt;!-- 第2个指令 v-color=&#x27;&quot;blue&quot;&#x27;   --&gt;</span><br><span class="line">            &lt;div  v-color=&#x27;&quot;orange&quot;&#x27;&gt;</span><br><span class="line">                第二个文字</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">             &lt;!-- 第3个指令 v-mobile  --&gt;</span><br><span class="line">            &lt;input v-model=&#x27;phone&#x27; type=&quot;text&quot; v-mobile&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;!-- 开始写vue的核心代码 --&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        // 全局指令的定义 和全局的过滤器一样还是用Vue 提供API Vue.directive</span><br><span class="line">        Vue.directive(&#x27;red&#x27;,&#123;</span><br><span class="line">            // inserted：被绑定元素插入父节点时调用</span><br><span class="line">            inserted:function(el)&#123;</span><br><span class="line">                console.log(&#x27;el&#x27;,el)</span><br><span class="line">                el.style.color=&#x27;red&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        // 全局指令 v-colr </span><br><span class="line">        Vue.directive(&#x27;color&#x27;,&#123;</span><br><span class="line">            // inserted：被绑定元素插入父节点时调用</span><br><span class="line">            // bind：在指令第一次绑定到元素时调用</span><br><span class="line">            // bind会记录一些信息 核心是bingding.value传来的值  还包括原始的指令信息比如v-color</span><br><span class="line">            inserted:function(el,binding)&#123;</span><br><span class="line">                console.log(&#x27;el&#x27;,el)</span><br><span class="line">                console.log(&#x27;binding&#x27;,binding)</span><br><span class="line">                el.style.color= binding.value</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        var vm = new Vue(&#123;</span><br><span class="line">            // 传入监管哪个容器</span><br><span class="line">            el:&#x27;#app&#x27;,</span><br><span class="line">            // 这个容器所需要的数据</span><br><span class="line">            data:&#123;</span><br><span class="line">                phone:&#x27;&#x27;,</span><br><span class="line">                msg2:&#x27;你好世界&#x27;</span><br><span class="line">            &#125;,</span><br><span class="line">            // 局部指令是写在实例里面的 不写在Vue</span><br><span class="line">            directives:&#123;</span><br><span class="line">                mobile:&#123;</span><br><span class="line">                    // 因为输入手机号时候数据无时无刻在变化 所以用update的钩子函数其实就是回调函数</span><br><span class="line">                    update:function(el)&#123;</span><br><span class="line">                        console.log(&#x27;mobile&#x27;,el)</span><br><span class="line">                        console.log(&#x27;elvalue&#x27;,el.value)</span><br><span class="line">                        if(!(/^1[3-9]\d&#123;9&#125;$/).test(el.value)) &#123;</span><br><span class="line">                            el.style.color=&#x27;red&#x27;</span><br><span class="line">                        &#125;else &#123;</span><br><span class="line">                            el.style.color=&#x27;black&#x27;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        console.log(&#x27;vm&#x27;,vm)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h1 id="代码2：隐藏溢出文字"><a href="#代码2：隐藏溢出文字" class="headerlink" title="代码2：隐藏溢出文字"></a>代码2：隐藏溢出文字</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- html写这里   --&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">             &lt;div v-ellipsis&gt;</span><br><span class="line">                 &#123;&#123;msg2&#125;&#125;</span><br><span class="line">             &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;!-- 开始写vue的核心代码 --&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        // 溢出隐藏全局自定义指令</span><br><span class="line">        Vue.directive(&#x27;ellipsis&#x27;,&#123;</span><br><span class="line">            inserted:function(el)&#123;</span><br><span class="line">                el.style.width = 100 +&#x27;px&#x27;</span><br><span class="line">                el.style.whiteSpace = &#x27;nowrap&#x27;</span><br><span class="line">                el.style.overflow=&#x27;hidden&#x27;</span><br><span class="line">                el.style.textOverflow=&#x27;ellipsis&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        var vm = new Vue(&#123;</span><br><span class="line">            // 传入监管哪个容器</span><br><span class="line">            el:&#x27;#app&#x27;,</span><br><span class="line">            // 这个容器所需要的数据</span><br><span class="line">            data:&#123;</span><br><span class="line">                msg:&#x27;&#x27;,</span><br><span class="line">                msg2:&#x27;你好世界你好世界你好世界你好世界你好世界你好世界&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        console.log(&#x27;vm&#x27;,vm)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h1 id="自定义指令的高级用法：（用到钩子函数以及context）"><a href="#自定义指令的高级用法：（用到钩子函数以及context）" class="headerlink" title="自定义指令的高级用法：（用到钩子函数以及context）"></a>自定义指令的高级用法：（用到钩子函数以及context）</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        .box1 &#123;</span><br><span class="line">            width: 200px;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- html写这里  --&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;box1&quot;  v-clickoutside &gt;</span><br><span class="line">                请输入顺丰快递单号</span><br><span class="line">                &lt;input type=&quot;text&quot; v-model=&quot;msg&quot;&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">      </span><br><span class="line">            &lt;h1 v-if=&quot;isShow&quot;&gt;&#123;&#123;msg&#125;&#125;&lt;/h1&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;!-- 开始写vue的核心代码 --&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        var vm = new Vue(&#123;</span><br><span class="line">            // 传入监管哪个容器</span><br><span class="line">            el:&#x27;#app&#x27;,</span><br><span class="line">            // 这个容器所需要的数据</span><br><span class="line">            data:&#123;</span><br><span class="line">                isShow:false,</span><br><span class="line">                msg:&#x27;&#x27;,</span><br><span class="line">                msg2:&#x27;你好世界&#x27;</span><br><span class="line">            &#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line">                blur()&#123;</span><br><span class="line">                    this.isShow=false</span><br><span class="line">                &#125;,</span><br><span class="line">                focus()&#123;</span><br><span class="line">                    this.isShow=true</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            directives:&#123;</span><br><span class="line">                // 局部自定义指令 功能可以点外面焦点消失 里面焦点存在</span><br><span class="line">                clickoutside:&#123;</span><br><span class="line">                    // vnode 虚拟dom的全部  vnode可以理解为虚拟dom页面本身 </span><br><span class="line">                    bind(el,bindings,vnode) &#123;</span><br><span class="line">                        el.fn =(e)=&gt;&#123;</span><br><span class="line">                            if(el.contains(e.target)) &#123;</span><br><span class="line">                                console.log(&#x27;进来el.contains(e.target)&#x27;)</span><br><span class="line">                                // context是不是上下文  VNODE是页面本身  </span><br><span class="line">                                vnode.context[&#x27;focus&#x27;]()</span><br><span class="line">                            &#125;else &#123;</span><br><span class="line">                                console.log(&#x27;进入blur&#x27;)</span><br><span class="line">                                vnode.context[&#x27;blur&#x27;]()</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        document.addEventListener(&#x27;click&#x27;,el.fn)</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        console.log(&#x27;vm&#x27;,vm)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vue2.x </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>vue指令</title>
      <link href="/posts/6ea0.html"/>
      <url>/posts/6ea0.html</url>
      
        <content type="html"><![CDATA[<h1 id="指令："><a href="#指令：" class="headerlink" title="指令："></a>指令：</h1><p>是什么：<br>1、指令的本质就是标签中自定义的属性<br>2、指令格式以”v-“开始，例如v-cloak，v-text，v-html等<br>有什么作用：<br>当表达式的值改变时，将其产生的连带影响，响应式地作用于DOM。</p><h1 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h1><p>监听指令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;button v-on:click=&#x27;aaa&#x27;&gt;&#123;&#123;msg2&#125;&#125;+&lt;/button&gt;</span><br><span class="line">        &lt;h1&gt;&#123;&#123;num&#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        var vm=new Vue(&#123;</span><br><span class="line">            el:&quot;#app&quot;,</span><br><span class="line">            data:&#123;</span><br><span class="line">                msg:&#x27;11111&#x27;,</span><br><span class="line">                msg2:&#x27;22222&#x27;,</span><br><span class="line">                num:0</span><br><span class="line">            &#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line">                aaa()&#123;</span><br><span class="line">                    console.log(1);</span><br><span class="line">                    this.num++</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>传参：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;button @click=&quot;say(&#x27;say hello&#x27;)&quot;&gt;say hello&lt;/button&gt;</span><br><span class="line">        &lt;button @click=&quot;say(&#x27;say goodbye&#x27;)&quot;&gt;say goodbye&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        var vm=new Vue(&#123;</span><br><span class="line">            el:&#x27;#app&#x27;,</span><br><span class="line">            methods:&#123;</span><br><span class="line">                say(message)&#123;</span><br><span class="line">                    alert(message)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">    </span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">可以监听的事件：</span><br><span class="line">点击事件：click、</span><br><span class="line">键盘事件：keyup、</span><br><span class="line">改变事件：change（$event）</span><br></pre></td></tr></table></figure><h1 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h1><p>用于动态绑定 属性 的变量</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;p v-bind:title=&#x27;t1&#x27;&gt;</span><br><span class="line">            今天天气很热 还下了下雨广州</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        var vm=new Vue(&#123;</span><br><span class="line">            el:&#x27;#app&#x27;,</span><br><span class="line">            data:&#123;</span><br><span class="line">                t1:&#x27;天气预报2&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>还可以表达式用法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;p v-bind:title=&quot;t1 + &#x27; &#x27; + t2&quot;&gt;</span><br><span class="line">            今天天气很热 还下了下雨广州</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        var vm=new Vue(&#123;</span><br><span class="line">            el:&quot;#app&quot;,</span><br><span class="line">            data:&#123;</span><br><span class="line">                t1:&#x27;天气预报&#x27;,</span><br><span class="line">                t2:&#x27;广州天气预报&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>函数式使用：<br><!DOCTYPE html></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;p :title=&quot;getTi()&quot;&gt; &#123;&#123;msg&#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        var vm=new Vue(&#123;</span><br><span class="line">            el:&#x27;#app&#x27;,</span><br><span class="line">            data:&#123;</span><br><span class="line">                msg:&#x27;今天天气很热 还下了雨广州&#x27;,</span><br><span class="line">                getTi:()=&gt;&#123;</span><br><span class="line">                  console.log(&#x27; getTitleall&#x27;)</span><br><span class="line">                  return &#x27;天气预报 广州天气333333&#x27;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>v-bind动态绑定url：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;a v-bind:href=&quot;url&quot;&gt;&#123;&#123;alt&#125;&#125;&lt;/a&gt;</span><br><span class="line">        &lt;a  :href=&quot;url&quot;&gt;&#123;&#123;alt&#125;&#125;&lt;/a&gt;</span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">        &lt;a  :href=&quot;url&quot; :target=&#x27;type&#x27;&gt;&#123;&#123;alt&#125;&#125;&lt;/a&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        var vm=new Vue(&#123;el:&#x27;#app&#x27;,</span><br><span class="line">        data:&#123;</span><br><span class="line">            url:&#x27;https://www.baidu.com/&#x27;,</span><br><span class="line">                type:&#x27;_blank&#x27;,</span><br><span class="line">                alt:&#x27;我是百度网站&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    setTimeout(()=&gt;&#123;</span><br><span class="line">        vm.url =&#x27;https://www.sohu.com/&#x27;</span><br><span class="line">            vm.alt =&#x27;张朝阳搜狐&#x27;</span><br><span class="line">    &#125;,3000)</span><br><span class="line"></span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>v-bind数组版本：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;div v-bind:style=&quot;[bassStyles,newStyle]&quot;&gt;</span><br><span class="line">            我是样式</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        var vm = new Vue(&#123;</span><br><span class="line">            el: &#x27;#app&#x27;,</span><br><span class="line">            data: &#123;</span><br><span class="line">                bassStyles: &#123;</span><br><span class="line">                    color: &#x27;red&#x27;,</span><br><span class="line">                    fontSize: &#x27;100px&#x27;</span><br><span class="line">                &#125;,</span><br><span class="line">                newStyle: &#123;</span><br><span class="line">                    background: &#x27;orange&#x27;,</span><br><span class="line">                    fontWeight: 700</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        setTimeout(()=&gt;&#123;</span><br><span class="line">            vm.newStyle=&#123;</span><br><span class="line">                background: &#x27;blue&#x27;,</span><br><span class="line">                fontWeight: 700</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,2000)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h1 id="v-pre"><a href="#v-pre" class="headerlink" title="v-pre"></a>v-pre</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">强制将胡子语法转化为字符串  &#123;&#123;&#125;&#125;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;h1&gt;&#123;&#123;msg&#125;&#125;&lt;/h1&gt;</span><br><span class="line">        &lt;h1&gt;</span><br><span class="line">            &#123;&#123;msg2&#125;&#125;</span><br><span class="line">        &lt;/h1&gt;</span><br><span class="line">        &lt;h1 v-pre&gt;&#123;&#123;msg&#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        var vm=new Vue(&#123;</span><br><span class="line">            el:&#x27;#app&#x27;,</span><br><span class="line">            data:&#123;</span><br><span class="line">                msg:&#x27;hellowrld&#x27;,</span><br><span class="line">                msg2:&#x27;你好世界&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h1 id="v-cloak隐身指令"><a href="#v-cloak隐身指令" class="headerlink" title="v-cloak隐身指令"></a>v-cloak隐身指令</h1><p>用于浏览器在还未加载完全前可将元素隐藏，待加载完成后显示</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        [v-cloak] &#123;</span><br><span class="line">            display: none;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- html写这里  --&gt;</span><br><span class="line">    &lt;!-- 当vue没有实例化出来之前 容器隐藏 --&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;div v-cloak id=&quot;app&quot;&gt;</span><br><span class="line">            &lt;h1&gt;</span><br><span class="line">                &#123;&#123;msg&#125;&#125;</span><br><span class="line">               </span><br><span class="line">            &lt;/h1&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    &lt;!-- 引入网络版的vue框架源码 --&gt;</span><br><span class="line">    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;!-- 开始写vue的核心代码 --&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        setTimeout(()=&gt;&#123;</span><br><span class="line">               </span><br><span class="line">        var vm = new Vue(&#123;</span><br><span class="line">            // 传入监管哪个容器</span><br><span class="line">            el:&#x27;#app&#x27;,</span><br><span class="line">            // 这个容器所需要的数据</span><br><span class="line">            data:&#123;</span><br><span class="line">                msg:&#x27;hellowolrd&#x27;,</span><br><span class="line">                msg2:&#x27;你好世界&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    </span><br><span class="line">        &#125;,3000)</span><br><span class="line">    </span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h1 id="v-text和v-html的用法"><a href="#v-text和v-html的用法" class="headerlink" title="v-text和v-html的用法"></a>v-text和v-html的用法</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- html写这里  --&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">             &lt;p&gt;&#123;&#123;msg&#125;&#125;&lt;/p&gt;</span><br><span class="line">             &lt;p&gt;&#123;&#123;msg2&#125;&#125;---&#123;&#123;msg3&#125;&#125;----&#123;&#123;msg4&#125;&#125;&lt;/p&gt;</span><br><span class="line">             &lt;!-- v-text 作用和Mustache 插值表达式 胡子语法比较相似：都是用于将数据显示在界面中 --&gt;</span><br><span class="line">             &lt;p v-text=&#x27;msg2&#x27;&gt; &lt;/p&gt;</span><br><span class="line">             &lt;p v-text=&#x27;msg3&#x27;&gt; &lt;/p&gt;</span><br><span class="line">             &lt;p v-text=&#x27;msg4&#x27;&gt; &lt;/p&gt;</span><br><span class="line">             &lt;hr&gt;</span><br><span class="line">             &lt;!-- v-html  --&gt;</span><br><span class="line">             &lt;p v-html=&#x27;msg&#x27;&gt;&lt;/p&gt;</span><br><span class="line">             &lt;p v-html=&#x27;msg2&#x27;&gt;&lt;/p&gt;</span><br><span class="line">             &lt;p v-html=&#x27;msg4&#x27;&gt;&lt;/p&gt;</span><br><span class="line">             &lt;!-- &lt;p v-html=&#x27;msg3&#x27;&gt;&lt;/p&gt; --&gt;</span><br><span class="line">             &lt;!-- 这一步图片显示错误会引起XSS攻击 --&gt;</span><br><span class="line">             &lt;!-- XSS攻击会寻找合适的宿主 没有合适的宿主环境不会发作  --&gt;</span><br><span class="line">             &lt;p v-text=&#x27;msgxss&#x27;&gt;&lt;/p&gt;</span><br><span class="line">             &lt;!-- 这种就是XSS攻击最合适的宿主环境 --&gt;</span><br><span class="line">             &lt;p v-html=&#x27;msgxss&#x27;&gt;&lt;/p&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        // new操作符中间有一个桥梁函数  有四步内部处理</span><br><span class="line">        // 1 创建一个空对象 2 绑定原型链节约内存 3 赋值  4 把这个对象return 回去 </span><br><span class="line">        var vm = new Vue(&#123;</span><br><span class="line">            // 传入监管哪个容器    </span><br><span class="line">            el:&#x27;#app&#x27;,</span><br><span class="line">            // 这个容器所需要的数据</span><br><span class="line">            data:&#123;</span><br><span class="line">                msg:&#x27;hellowolrd&#x27;,</span><br><span class="line">                msg2:&#x27;&lt;a href=&quot;https://www.baidu.com/&quot;&gt;我是百度&lt;/a&gt;&#x27;,</span><br><span class="line">                msg3:&#x27;&lt;img src=&quot;https://ftp.bmp.ovh/imgs/2021/03/5bf94c83e1ca17da.jpg&quot; alt=&quot;美食美酒&quot;&gt;&#x27;,</span><br><span class="line">                msg4:&#x27;&lt;span style=&quot;color: red;&quot;&gt;我是span标签&lt;/span&gt;&#x27;,</span><br><span class="line">                msgxss:&#x27; &lt;img src=&quot;https://ftp.bmpmgs/2021/03/5bf94c83e1ca17d.jpg&quot; onerror=&quot;alert(444444)&quot; alt=&quot;美食美酒&quot;&gt;&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h1 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h1><h2 id="v-model-基础-1"><a href="#v-model-基础-1" class="headerlink" title="v-model 基础 1 "></a>v-model 基础 1 </h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;input v-model=&#x27;msg2&#x27; type=&quot;text&quot; &gt; </span><br><span class="line">        &lt;button @click=&#x27;showdata&#x27;&gt;点击查看数据&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    //  欢迎进入vue元编程的世界</span><br><span class="line">    var app = new Vue(&#123;</span><br><span class="line">        el: &#x27;#app&#x27;,</span><br><span class="line">        data: &#123;</span><br><span class="line">          msg2: &#x27;我是msg2&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            showdata()&#123;</span><br><span class="line">                console.log(this.msg2)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">v-model 基础2原理  </span><br><span class="line">---</span><br></pre></td></tr></table></figure><!DOCTYPE html><p><html lang="en"></html lang="en"></p><head>    <meta charset="UTF-8">    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <title>Document</title></meta name="viewport" content="width=device-width, initial-scale=1.0"></meta charset="UTF-8"></head><body>    <div id="app">        <input v-model='msg2' type="text" >        <hr>        <input type="text" :value="msg" @input="aaa($event)">        <p></p><p>        </p><h1></h1><br>    <p></p></input type="text" :value="msg" @input="aaa($event)"></input v-model='msg2' type="text" ></div id="app"></body><script src="https: cdn.jsdelivr.net npm vue dist vue.js"><script>    //  欢迎进入vue元编程的世界    var app = new Vue({        el: '#app',        data: {            msg: '我是msg',            msg2: '我是msg2'        },        methods: {            aaa(e) {                console.log('aaa')                this.msg = e.target.value            }        }<p>    })</p><p></script><p></p>```总结：v-model就是将v-bind的变量监听以及v-on的事件监听相结合的一个语法糖。</script src="https:>]]></content>
      
      
      <categories>
          
          <category> vue2.x </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>vue的插值表达式多种用法</title>
      <link href="/posts/35eb.html"/>
      <url>/posts/35eb.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- html写这里  --&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">            &lt;!-- &lt;%= %&gt;  ==  &#123;&#123;&#125;&#125; --&gt;</span><br><span class="line">            &lt;!-- 胡子语法或者插值表达式可以直接显示变量 --&gt;</span><br><span class="line">            &lt;p&gt; &#123;&#123;msg&#125;&#125;&lt;/p&gt;</span><br><span class="line">            </span><br><span class="line">            &lt;p&gt;&#123;&#123;name&#125;&#125;&lt;/p&gt;</span><br><span class="line">            &lt;p&gt;&#123;&#123;title&#125;&#125;&lt;/p&gt;</span><br><span class="line">            &lt;!-- 胡子语法或者插值表达式可以加减乘除运算 --&gt;</span><br><span class="line">            &lt;p&gt;&#123;&#123;20+50&#125;&#125;&lt;/p&gt;</span><br><span class="line">            &lt;p&gt;&#123;&#123;20*50&#125;&#125;&lt;/p&gt;</span><br><span class="line">             &lt;!-- 胡子语法或者插值表达式可以用JS的内部方法 --&gt;</span><br><span class="line">            &lt;p&gt;&#123;&#123;title.substr(0,3)&#125;&#125;&lt;/p&gt;</span><br><span class="line">             &lt;!-- 胡子语法或者插值表达式可以用JS的三元 --&gt;</span><br><span class="line">            &lt;p&gt;&#123;&#123;age&gt;17?&#x27;成年人&#x27;:&#x27;未成年&#x27;&#125;&#125;&lt;/p&gt;</span><br><span class="line">            &lt;!-- 胡子语法或者插值表达式可以用对象的数据 --&gt;</span><br><span class="line">            &lt;p&gt;&#123;&#123;obj.name&#125;&#125;----&#123;&#123;obj.age&#125;&#125;&lt;/p&gt;</span><br><span class="line">            &lt;!-- 胡子语法或者插值表达式可以调用函数return 会显示 --&gt;</span><br><span class="line">            &lt;p&gt;&#123;&#123;fn1()&#125;&#125;&lt;/p&gt;</span><br><span class="line">            &lt;p&gt;&#123;&#123;obj&#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        // new操作符中间有一个桥梁函数  有四步内部处理</span><br><span class="line">        // 1 创建一个空对象 2 绑定原型链节约内存 3 赋值  4 把这个对象return 回去 </span><br><span class="line">        var vm = new Vue(&#123;</span><br><span class="line">            // 传入监管哪个容器</span><br><span class="line">            el:&#x27;#app&#x27;,</span><br><span class="line">            // 这个容器所需要的数据</span><br><span class="line">            data:&#123;</span><br><span class="line">                msg:&#x27;hellowolrd6666&#x27;,</span><br><span class="line">                name:&#x27;张三&#x27;,</span><br><span class="line">                title:&#x27;我是一个标题&#x27;,</span><br><span class="line">                age:18,</span><br><span class="line">                obj:&#123;</span><br><span class="line">                    name:&#x27;tom&#x27;,</span><br><span class="line">                    age:20</span><br><span class="line">                &#125;,</span><br><span class="line">                fn1:()=&gt;&#123;</span><br><span class="line">                    return 666666666</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vue2.x </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>node.js 5、multer 文件上传插件的使用</title>
      <link href="/posts/b0dc.html"/>
      <url>/posts/b0dc.html</url>
      
        <content type="html"><![CDATA[<h1 id="1、下载"><a href="#1、下载" class="headerlink" title="1、下载"></a>1、下载</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i multer</span><br></pre></td></tr></table></figure><h1 id="2、"><a href="#2、" class="headerlink" title="2、"></a>2、</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入文件上传插件</span></span><br><span class="line"><span class="keyword">var</span> multer = <span class="built_in">require</span>(<span class="string">&#x27;multer&#x27;</span>)</span><br><span class="line"><span class="comment">// 控制文件存储</span></span><br><span class="line"><span class="keyword">var</span> storage = multer.<span class="title function_">diskStorage</span>(&#123;</span><br><span class="line">    <span class="attr">destination</span>: <span class="keyword">function</span> (<span class="params">req, file, cb</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> user=req.<span class="property">body</span>.<span class="property">user</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;user&#x27;</span>+user)</span><br><span class="line">        <span class="title function_">cb</span>(<span class="literal">null</span>, <span class="string">&#x27;./data/test&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">filename</span>: <span class="keyword">function</span> (<span class="params">req, file, cb</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(file);</span><br><span class="line">        <span class="comment">// 正则匹配后缀名</span></span><br><span class="line">        <span class="keyword">let</span> type=file.<span class="property">originalname</span>.<span class="title function_">replace</span>(<span class="regexp">/.+\./</span>,<span class="string">&quot;.&quot;</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(type);</span><br><span class="line">        <span class="title function_">cb</span>(<span class="literal">null</span>, <span class="title class_">Date</span>.<span class="title function_">now</span>()+type);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> upload = <span class="title function_">multer</span>(&#123;</span><br><span class="line">    <span class="attr">storage</span>: storage</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">function</span> (<span class="params">app</span>) &#123;</span><br><span class="line">    <span class="comment">// 前端文件上传</span></span><br><span class="line">    <span class="comment">//这里的地址对应前端保存图片地址</span></span><br><span class="line">    app.<span class="title function_">post</span>(<span class="string">&#x27;/files/upload&#x27;</span>, upload.<span class="title function_">array</span>(<span class="string">&#x27;file&#x27;</span>, <span class="number">10</span>), <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">        <span class="comment">//获取文件信息</span></span><br><span class="line">        <span class="keyword">let</span> data = req.<span class="property">files</span>;</span><br><span class="line">        <span class="comment">// 返回前端</span></span><br><span class="line">        res.<span class="title function_">send</span>(data)</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3、前端代码"><a href="#3、前端代码" class="headerlink" title="3、前端代码"></a>3、前端代码</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">upload</span>(<span class="params"></span>) &#123;</span><br><span class="line">uni.<span class="title function_">chooseImage</span>(&#123;</span><br><span class="line"><span class="attr">count</span>: <span class="number">6</span>, <span class="comment">//默认9</span></span><br><span class="line"><span class="attr">sizeType</span>: [<span class="string">&#x27;original&#x27;</span>, <span class="string">&#x27;compressed&#x27;</span>], <span class="comment">//可以指定是原图还是压缩图，默认二者都有</span></span><br><span class="line"><span class="attr">sourceType</span>: [<span class="string">&#x27;album&#x27;</span>,<span class="string">&#x27;camera&#x27;</span>], <span class="comment">//从相册选择</span></span><br><span class="line"><span class="attr">success</span>: <span class="function">(<span class="params">chooseImageRes</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">const</span> tempFilePaths = chooseImageRes.<span class="property">tempFilePaths</span>;</span><br><span class="line"><span class="keyword">const</span> uploadTask = uni.<span class="title function_">uploadFile</span>(&#123;</span><br><span class="line"><span class="attr">url</span>: <span class="string">&#x27;http://localhost:3000/files/upload&#x27;</span>, <span class="comment">//仅为示例，非真实的接口地址</span></span><br><span class="line"><span class="attr">filePath</span>: tempFilePaths[<span class="number">0</span>],</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;file&#x27;</span>,</span><br><span class="line"><span class="attr">formData</span>: &#123;</span><br><span class="line"><span class="string">&#x27;user&#x27;</span>: <span class="string">&#x27;test&#x27;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">success</span>: <span class="function">(<span class="params">uploadFileRes</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(uploadFileRes.<span class="property">data</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">uploadTask.<span class="title function_">onProgressUpdate</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;上传进度&#x27;</span> + res.<span class="property">progress</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;已经上传的数据长度&#x27;</span> + res.<span class="property">totalBytesSent</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;预期需要上传的数据总长度&#x27;</span> + res.<span class="property">totalBytesExpectedToSend</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试条件，取消上传任务。</span></span><br><span class="line"><span class="comment">// if (res.progress &gt; 50) &#123;</span></span><br><span class="line"><span class="comment">//     uploadTask.abort();</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4、限制文件上传大小，在引入body解析这里处理"><a href="#4、限制文件上传大小，在引入body解析这里处理" class="headerlink" title="4、限制文件上传大小，在引入body解析这里处理"></a>4、限制文件上传大小，在引入body解析这里处理</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入解析req.body插件</span></span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>);</span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">urlencoded</span>(&#123;<span class="attr">limit</span>:<span class="string">&#x27;50mb&#x27;</span>,<span class="attr">extended</span>:<span class="literal">true</span>&#125;));</span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">json</span>(&#123;<span class="attr">limit</span>:<span class="string">&#x27;50mb&#x27;</span>&#125;));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> node.js </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>node.js 4、数据库操作</title>
      <link href="/posts/b0dc.html"/>
      <url>/posts/b0dc.html</url>
      
        <content type="html"><![CDATA[<h1 id="1、find的用法：三个变量，第一个是搜索的条件，第二个是搜索的结果，第三个是要进行的操作"><a href="#1、find的用法：三个变量，第一个是搜索的条件，第二个是搜索的结果，第三个是要进行的操作" class="headerlink" title="1、find的用法：三个变量，第一个是搜索的条件，第二个是搜索的结果，第三个是要进行的操作"></a>1、find的用法：三个变量，第一个是搜索的条件，第二个是搜索的结果，第三个是要进行的操作</h1><h1 id="2、对搜索的结果进行遍历-map-的用法："><a href="#2、对搜索的结果进行遍历-map-的用法：" class="headerlink" title="2、对搜索的结果进行遍历 map 的用法："></a>2、对搜索的结果进行遍历 map 的用法：</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">res.<span class="title function_">map</span>(<span class="title function_">fun</span>(<span class="params">e</span>)&#123;</span><br><span class="line">    <span class="comment">//e为遍历数据表出来的所有元素</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exports</span>.<span class="property">userMatch</span> = <span class="keyword">function</span> (<span class="params">data, pwd, res</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> wherestr = &#123;</span><br><span class="line">        <span class="attr">$or</span>: [&#123;</span><br><span class="line">            <span class="string">&#x27;name&#x27;</span>: data</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            <span class="string">&#x27;email&#x27;</span>: data</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">let</span> out = &#123;</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">&#x27;imgurl&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">&#x27;psw&#x27;</span>: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">User</span>.<span class="title function_">find</span>(wherestr, out, <span class="keyword">function</span> (<span class="params">err, result</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            res.<span class="title function_">send</span>(&#123;</span><br><span class="line">                <span class="attr">status</span>: <span class="number">500</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (result == <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">                res.<span class="title function_">send</span>(&#123;</span><br><span class="line">                    <span class="attr">status</span>: <span class="number">400</span></span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">            result.<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">                <span class="keyword">const</span> pwdMatch = bcrypt.<span class="title function_">verification</span>(pwd, e.<span class="property">psw</span>);</span><br><span class="line">                <span class="keyword">if</span> (pwdMatch) &#123;</span><br><span class="line">                    <span class="keyword">let</span> token = jwt.<span class="title function_">generateToken</span>(e.<span class="property">_id</span>);</span><br><span class="line">                    <span class="keyword">let</span> back = &#123;</span><br><span class="line">                        <span class="attr">id</span>: e.<span class="property">_id</span>,</span><br><span class="line">                        <span class="attr">name</span>: e.<span class="property">name</span>,</span><br><span class="line">                        <span class="attr">imgurl</span>: e.<span class="property">imgurl</span>,</span><br><span class="line">                        <span class="attr">token</span>: token,</span><br><span class="line">                    &#125;</span><br><span class="line">                    res.<span class="title function_">send</span>(&#123;</span><br><span class="line">                        <span class="attr">status</span>: <span class="number">200</span>,</span><br><span class="line">                        back</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    res.<span class="title function_">send</span>(&#123;</span><br><span class="line">                        <span class="attr">status</span>: <span class="number">400</span></span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> node.js </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>node.js 3、路由</title>
      <link href="/posts/968.html"/>
      <url>/posts/968.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 注册页面</span></span><br><span class="line">    <span class="comment">// 注册</span></span><br><span class="line">    app.<span class="title function_">post</span>(<span class="string">&#x27;/signup/add&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">        signup.<span class="title function_">signUp</span>(req, res);</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 用户注册</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">signUp</span> = <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> name = req.<span class="property">body</span>.<span class="property">name</span>;</span><br><span class="line">    <span class="keyword">let</span> mail = req.<span class="property">body</span>.<span class="property">mail</span>;</span><br><span class="line">    <span class="keyword">let</span> pwd = req.<span class="property">body</span>.<span class="property">pwd</span>;</span><br><span class="line">    dbserver.<span class="title function_">buildUser</span>(name, mail, pwd, res);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 新建用户</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">buildUser</span> = <span class="keyword">function</span> (<span class="params">name, mail, pwd, res</span>) &#123;</span><br><span class="line">    <span class="comment">// 密码加密</span></span><br><span class="line">    <span class="keyword">let</span> password = bcrypt.<span class="title function_">ebcrytion</span>(pwd);</span><br><span class="line">    <span class="keyword">let</span> data = &#123;</span><br><span class="line">        <span class="attr">name</span>: name,</span><br><span class="line">        <span class="attr">email</span>: mail,</span><br><span class="line">        <span class="attr">psw</span>: password,</span><br><span class="line">        <span class="attr">time</span>: <span class="keyword">new</span> <span class="title class_">Date</span>(),</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> user = <span class="keyword">new</span> <span class="title class_">User</span>(data);</span><br><span class="line">    user.<span class="title function_">save</span>(<span class="keyword">function</span> (<span class="params">err, result</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            res.<span class="title function_">send</span>(&#123;</span><br><span class="line">                <span class="attr">status</span>: <span class="number">500</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.<span class="title function_">send</span>(&#123;</span><br><span class="line">                <span class="attr">status</span>: <span class="number">200</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> node.js </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>node.js 2、数据库连接+数据库表生成</title>
      <link href="/posts/d8d8.html"/>
      <url>/posts/d8d8.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入mongoose 模块</span></span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> db = mongoose.<span class="title function_">createConnection</span>(<span class="string">&#x27;mongodb://127.0.0.1:27017/yikes&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">useNewUrlParser</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">useUnifiedTopology</span>: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 连接成功</span></span><br><span class="line">db.<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, <span class="variable language_">console</span>.<span class="property">error</span>.<span class="title function_">bind</span>(<span class="variable language_">console</span>, <span class="string">&#x27;连接错误:&#x27;</span>));</span><br><span class="line">db.<span class="title function_">once</span>(<span class="string">&#x27;open&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;数据库连接成功&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接成功之后 将模块暴露出来</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = db</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mongoose=<span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Schema</span>=mongoose.<span class="property">Schema</span>;</span><br><span class="line"><span class="keyword">var</span> db=<span class="built_in">require</span>(<span class="string">&#x27;../config/db&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">SchemaUser</span>=<span class="keyword">new</span> <span class="title class_">Schema</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>:&#123;<span class="attr">type</span>:<span class="title class_">String</span>&#125;,</span><br><span class="line">    <span class="attr">psw</span>:&#123;<span class="attr">type</span>:<span class="title class_">String</span>&#125;,</span><br><span class="line">    <span class="attr">email</span>:&#123;<span class="attr">type</span>:<span class="title class_">String</span>&#125;,</span><br><span class="line">    <span class="attr">sex</span>:&#123;<span class="attr">type</span>:<span class="title class_">String</span>,<span class="attr">default</span>:<span class="string">&#x27;asexual&#x27;</span>&#125;,</span><br><span class="line">    <span class="attr">birth</span>:&#123;<span class="attr">type</span>:<span class="title class_">Date</span>&#125;,</span><br><span class="line">    <span class="attr">phone</span>:&#123;<span class="attr">type</span>:<span class="title class_">Number</span>&#125;,</span><br><span class="line">    <span class="attr">explain</span>:&#123;<span class="attr">type</span>:<span class="title class_">String</span>&#125;,                                <span class="comment">//介绍</span></span><br><span class="line">    <span class="attr">imgurl</span>:&#123;<span class="attr">type</span>:<span class="title class_">String</span>,<span class="attr">default</span>:<span class="string">&#x27;user.png&#x27;</span>&#125;,             <span class="comment">//用户头像   </span></span><br><span class="line">    <span class="attr">time</span>:&#123;<span class="attr">type</span>:<span class="title class_">Date</span>&#125;,                                    <span class="comment">//注册时间           </span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>=db.<span class="title function_">model</span>(<span class="string">&#x27;User&#x27;</span>,<span class="title class_">SchemaUser</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> node.js </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>node.js 1、初始化+连接</title>
      <link href="/posts/8586.html"/>
      <url>/posts/8586.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、npm init</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2、npm i express</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3、</span><br><span class="line">const express = require(&#x27;express&#x27;)</span><br><span class="line">const app = express()</span><br><span class="line">const port = 3000</span><br><span class="line">app.listen(port, () =&gt; &#123;</span><br><span class="line">    console.log(`Example app listening on port $&#123;port&#125;`)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> node.js </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>乐呵一下</title>
      <link href="/posts/823b.html"/>
      <url>/posts/823b.html</url>
      
        <content type="html"><![CDATA[<p><img src="/images/js/js%E6%90%9E%E7%AC%91.png"></p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>防抖节流柯里化</title>
      <link href="/posts/a782.html"/>
      <url>/posts/a782.html</url>
      
        <content type="html"><![CDATA[<h1 id="闭包的知识点"><a href="#闭包的知识点" class="headerlink" title="闭包的知识点"></a>闭包的知识点</h1><h1 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params">fn,delay</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> cd=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(cd)&#123;</span><br><span class="line">            <span class="title function_">fn</span>();</span><br><span class="line">            cd=<span class="literal">false</span></span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">                cd=<span class="literal">true</span>;</span><br><span class="line">            &#125;,delay)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h1 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//简单来说就是单位时间内触发，触发一次清空一次定时器，直到最后一次定时器走完触发;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params">fn,delay</span>)&#123;</span><br><span class="line"> <span class="keyword">let</span> time=<span class="literal">null</span>;</span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">     <span class="keyword">if</span>(time)&#123;</span><br><span class="line">         <span class="variable language_">window</span>.<span class="built_in">clearTimeout</span>(time)</span><br><span class="line">     &#125;</span><br><span class="line">     time=<span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">         <span class="title function_">fn</span>();</span><br><span class="line">         time=<span class="literal">null</span>;</span><br><span class="line">     &#125;,delay)</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="柯里化"><a href="#柯里化" class="headerlink" title="柯里化"></a>柯里化</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">curryIt</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">           <span class="comment">// 声明一个数组来累计参数，等到参数个数符合fn函数的参数个数的时候直接调fn函数结束这次函数调用</span></span><br><span class="line"></span><br><span class="line">           <span class="keyword">let</span> arr=[];</span><br><span class="line">           <span class="keyword">return</span> res= <span class="keyword">function</span>(<span class="params">args1</span>)&#123;</span><br><span class="line">               arr.<span class="title function_">push</span>(args1)</span><br><span class="line">               <span class="keyword">if</span>(arr.<span class="property">length</span>&gt;=fn.<span class="property">length</span>)&#123;</span><br><span class="line">                   <span class="keyword">return</span> fn.<span class="title function_">apply</span>(res,arr)</span><br><span class="line">               &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                   <span class="keyword">return</span> res;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">curryIt</span>(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>axios二次封装</title>
      <link href="/posts/d5fa.html"/>
      <url>/posts/d5fa.html</url>
      
        <content type="html"><![CDATA[<h1 id="在这个企业级axois请求中，案例是向后端发送请求，在后端还没进行数据返回的时候，页面显示loading图，数据返回后显示正常过程：1、在请求的主页面App-vue中导入请求接口getUsername，然后触发这个接口"><a href="#在这个企业级axois请求中，案例是向后端发送请求，在后端还没进行数据返回的时候，页面显示loading图，数据返回后显示正常过程：1、在请求的主页面App-vue中导入请求接口getUsername，然后触发这个接口" class="headerlink" title="在这个企业级axois请求中，案例是向后端发送请求，在后端还没进行数据返回的时候，页面显示loading图，数据返回后显示正常过程：1、在请求的主页面App.vue中导入请求接口getUsername，然后触发这个接口"></a>在这个企业级axois请求中，案例是向后端发送请求，在后端还没进行数据返回的时候，页面显示loading图，数据返回后显示正常<br><strong>过程：</strong><br>1、在请求的主页面App.vue中导入请求接口getUsername，然后触发这个接口</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  &#123;getUsername&#125; <span class="keyword">from</span> <span class="string">&#x27;@/api/user.js&#x27;</span></span><br><span class="line">  </span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line"> <span class="title function_">getUsername</span>()</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;response&#x27;</span>,response);</span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;进入外部页面catch里面了&quot;</span>);</span><br><span class="line"></span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;error&quot;</span>, error);</span><br><span class="line">          <span class="comment">// alert(error.message);</span></span><br><span class="line">          <span class="variable language_">this</span>.$message(&#123;</span><br><span class="line">            <span class="attr">message</span>: error.<span class="property">message</span>,</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&quot;error&quot;</span>,</span><br><span class="line">          &#125;);</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;error.responese&quot;</span>, error.<span class="property">response</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h1 id="2、因为getUsername在user-js中导出，这个步骤是一个请求发送的步骤，但是这个axios已经是被污染过的了"><a href="#2、因为getUsername在user-js中导出，这个步骤是一个请求发送的步骤，但是这个axios已经是被污染过的了" class="headerlink" title="2、因为getUsername在user.js中导出，这个步骤是一个请求发送的步骤，但是这个axios已经是被污染过的了"></a>2、因为getUsername在user.js中导出，这个步骤是一个请求发送的步骤，但是这个axios已经是被污染过的了</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;./index&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getUsername</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> axios.<span class="title function_">request</span>(&#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&#x27;/axiosget1&#x27;</span>,</span><br><span class="line">      <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">      <span class="attr">params</span>: &#123;</span><br><span class="line">        <span class="attr">a</span>:<span class="string">&#x27;1&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h1 id="3、而这个被污染过的axios在index-js中被初始化了"><a href="#3、而这个被污染过的axios在index-js中被初始化了" class="headerlink" title="3、而这个被污染过的axios在index.js中被初始化了"></a>3、而这个被污染过的axios在index.js中被初始化了</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这里引入的httprequest只是一个普通的类 没有执行 </span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">HttpRequest</span> <span class="keyword">from</span> <span class="string">&quot;./axios&quot;</span></span><br><span class="line"><span class="comment">//此时的这个axios已经是被 我们深度封装过企业级 污染过的axios了  </span></span><br><span class="line"><span class="comment">// 这时候只是初始化的一个类对象 httprequest</span></span><br><span class="line"><span class="keyword">const</span> axios = <span class="keyword">new</span> <span class="title class_">HttpRequest</span>();</span><br><span class="line"><span class="comment">// 这个axios 是初始化后的 类对象  就是constructor执行后的类对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> axios;</span><br></pre></td></tr></table></figure><h1 id="4、直接来到axios-js中查看被污染的axios"><a href="#4、直接来到axios-js中查看被污染的axios" class="headerlink" title="4、直接来到axios.js中查看被污染的axios"></a>4、直接来到axios.js中查看被污染的axios</h1><h2 id="4-1首先可以看到已经定义了一个类HttpRequest来封装axios"><a href="#4-1首先可以看到已经定义了一个类HttpRequest来封装axios" class="headerlink" title="4.1首先可以看到已经定义了一个类HttpRequest来封装axios"></a>4.1首先可以看到已经定义了一个类HttpRequest来封装axios</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class HttpRequest &#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="4-2因为在getUsername中触发了污染过的axios的request函数，所以一进来就触发request这个函数，在这里将getUsername传过来的数据（options）和自定义的变量-this-getInsideConfig-进行合并"><a href="#4-2因为在getUsername中触发了污染过的axios的request函数，所以一进来就触发request这个函数，在这里将getUsername传过来的数据（options）和自定义的变量-this-getInsideConfig-进行合并" class="headerlink" title="4.2因为在getUsername中触发了污染过的axios的request函数，所以一进来就触发request这个函数，在这里将getUsername传过来的数据（options）和自定义的变量(this.getInsideConfig)进行合并"></a>4.2因为在getUsername中触发了污染过的axios的request函数，所以一进来就触发request这个函数，在这里将getUsername传过来的数据（options）和自定义的变量(this.getInsideConfig)进行合并</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="title function_">request</span>(<span class="params">options</span>) &#123;</span><br><span class="line">     <span class="comment">//    这一句 axios内部的一个高级方法 可以重建一个新的axios instance是一个变量写啥都行</span></span><br><span class="line">     <span class="keyword">const</span> instance = axios.<span class="title function_">create</span>()</span><br><span class="line">     <span class="comment">//   Object.assign 是一个对象合并 </span></span><br><span class="line">     options = <span class="title class_">Object</span>.<span class="title function_">assign</span>(<span class="variable language_">this</span>.<span class="title function_">getInsideConfig</span>(), options)</span><br><span class="line">     <span class="comment">// options组合架构完成  多加了一条 baseurl:http:127.0.0.1:3003 </span></span><br><span class="line">     <span class="comment">// 下一步要去请求拦截器 设置点东西了 往拦截器送了两个东西1  实例化后的本次的axios请求 instance 第二个是/axiosget1 </span></span><br><span class="line">     <span class="variable language_">this</span>.<span class="title function_">interceptors</span>(instance, options.<span class="property">url</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     <span class="comment">//  instance就是本次的一个axios实例化的一个新请求 options是合体后的数据</span></span><br><span class="line">     <span class="keyword">return</span> <span class="title function_">instance</span>(options)</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h1 id="4-3在request中触发interceptors这个函数-在这个函数里面就是请求拦截器和相应拦截器了"><a href="#4-3在request中触发interceptors这个函数-在这个函数里面就是请求拦截器和相应拦截器了" class="headerlink" title="4.3在request中触发interceptors这个函数,在这个函数里面就是请求拦截器和相应拦截器了"></a>4.3在request中触发interceptors这个函数,在这个函数里面就是请求拦截器和相应拦截器了</h1><h2 id="请求拦截器：在请求拦截器中，将浏览器请求的数据拦截，进行处理，然后返回数据。"><a href="#请求拦截器：在请求拦截器中，将浏览器请求的数据拦截，进行处理，然后返回数据。" class="headerlink" title="请求拦截器：在请求拦截器中，将浏览器请求的数据拦截，进行处理，然后返回数据。"></a>请求拦截器：<br>在请求拦截器中，将浏览器请求的数据拦截，进行处理，然后返回数据。</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> instance.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;以下请求拦截&#x27;</span>)</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;config&#x27;</span>, config)</span><br><span class="line">       <span class="comment">// 添加全局的loading...</span></span><br><span class="line">       <span class="keyword">if</span> (!<span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="variable language_">this</span>.<span class="property">queue</span>).<span class="property">length</span>) &#123;</span><br><span class="line">         store.<span class="title function_">commit</span>(<span class="string">&#x27;changeloading&#x27;</span>, <span class="literal">true</span>)</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">queue</span>[url] = <span class="literal">true</span></span><br><span class="line"><span class="comment">//请求头中携带token，不携带则进行拦截</span></span><br><span class="line">       config.<span class="property">headers</span>.<span class="property">Authorization</span> = <span class="variable language_">window</span>.<span class="property">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;token&quot;</span>)</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;config&#x27;</span>, config)</span><br><span class="line">       <span class="keyword">return</span> config</span><br><span class="line">     &#125;, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求拦截 有错误会报错&#x27;</span>)</span><br><span class="line">       <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">     &#125;)</span><br></pre></td></tr></table></figure><h2 id="响应拦截器：在响应拦截器中，将服务器返回数据拦截，进行处理，然后返回数据在这里除了可以返回服务器端的数据，还可以返回自定义的数据（存在statues中，可存放在自定义的位置中），供内部人员参考"><a href="#响应拦截器：在响应拦截器中，将服务器返回数据拦截，进行处理，然后返回数据在这里除了可以返回服务器端的数据，还可以返回自定义的数据（存在statues中，可存放在自定义的位置中），供内部人员参考" class="headerlink" title="响应拦截器：在响应拦截器中，将服务器返回数据拦截，进行处理，然后返回数据在这里除了可以返回服务器端的数据，还可以返回自定义的数据（存在statues中，可存放在自定义的位置中），供内部人员参考"></a>响应拦截器：<br>在响应拦截器中，将服务器返回数据拦截，进行处理，然后返回数据<br>在这里除了可以返回服务器端的数据，还可以返回自定义的数据（存在statues中，可存放在自定义的位置中），供内部人员参考</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> instance.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;以下响应拦截&#x27;</span>)</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;res&#x27;</span>, res)</span><br><span class="line">       <span class="comment">//    这一步做出栈处理 取消了全局loading </span></span><br><span class="line">       <span class="variable language_">this</span>.<span class="title function_">distroy</span>(url)</span><br><span class="line">       <span class="keyword">const</span> &#123;</span><br><span class="line">         data</span><br><span class="line">       &#125; = res</span><br><span class="line">       <span class="keyword">return</span> res.<span class="property">data</span></span><br><span class="line">     &#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;进入响应拦截response err里面&#x27;</span>)</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;err&#x27;</span>, err.<span class="property">response</span>)</span><br><span class="line">       <span class="comment">//    处理完全局 关闭loading url 出对象 </span></span><br><span class="line">       <span class="variable language_">this</span>.<span class="title function_">distroy</span>(url)</span><br><span class="line">       <span class="keyword">if</span> (err &amp;&amp; err.<span class="property">response</span>) &#123;</span><br><span class="line">      </span><br><span class="line">         <span class="keyword">switch</span> (err.<span class="property">response</span>.<span class="property">status</span>) &#123;</span><br><span class="line">           <span class="keyword">case</span> <span class="number">400</span>:</span><br><span class="line">             err.<span class="property">message</span> = <span class="string">&#x27;语义有误，当前请求无法被服务器理解。除非进行修改，否则客户端不应该重复提交这个请求。或请求参数有误。 &#x27;</span></span><br><span class="line">             <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">           <span class="keyword">case</span> <span class="number">401</span>:</span><br><span class="line">             err.<span class="property">message</span> = <span class="string">&#x27;当前请求需要用户验证。该响应必须包含一个适用于被请求资源的 WWW-Authenticate 信息头用以询问用户信息。客户端可以重复提交一个包含恰当的 Authorization 头信息的请求。如果当前请求已经包含了 Authorization 证书，那么401响应代表着服务器验证已经拒绝了那些证书。如果401响应包含了与前一个响应相同的身份验证询问，且浏览器已经至少尝试了一次验证，那么浏览器应当向用户展示响应中包含的实体信息，因为这个实体信息中可能包含了相关诊断信息。参见RFC 2617。&#x27;</span></span><br><span class="line">             <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">           <span class="keyword">case</span> <span class="number">402</span>:</span><br><span class="line">             err.<span class="property">message</span> = <span class="string">&#x27;该状态码是为了将来可能的需求而预留的。&#x27;</span></span><br><span class="line">             <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">           <span class="keyword">case</span> <span class="number">403</span>:</span><br><span class="line">             err.<span class="property">message</span> = <span class="string">&#x27;服务器已经理解请求，但是拒绝执行它。与401响应不同的是，身份验证并不能提供任何帮助，而且这个请求也不应该被重复提交。如果这不是一个 HEAD 请求，而且服务器希望能够讲清楚为何请求不能被执行，那么就应该在实体内描述拒绝的原因。当然服务器也可以返回一个404响应，假如它不希望让客户端获得任何信息。&#x27;</span></span><br><span class="line">             <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">           <span class="attr">default</span>:</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// var err =    &#123;</span></span><br><span class="line">       <span class="comment">//     response：&#123;</span></span><br><span class="line">       <span class="comment">//         code:&#x27;4000&#x27;,</span></span><br><span class="line">       <span class="comment">//            data:&#x27;可能存在什么错误哦&#x27;</span></span><br><span class="line">       <span class="comment">//     &#125;，</span></span><br><span class="line">       <span class="comment">//     message：&#x27;拒绝访问&#x27;</span></span><br><span class="line">       <span class="comment">//    &#125;</span></span><br><span class="line">       <span class="comment">// 把错误处理做汇总  1 返回的自己返回公司内部错误对象 2是http状态码对应的 403 message:&#x27;拒绝访问&#x27;</span></span><br><span class="line">       <span class="comment">// res.status(403).send(&#123;</span></span><br><span class="line">       <span class="comment">//     // 4000代码代表这个用户 很危险 曾经多次尝试攻击我们服务器</span></span><br><span class="line">       <span class="comment">//     //多次没权限想翻墙攻击我们</span></span><br><span class="line">       <span class="comment">//     code:&#x27;4000&#x27;,</span></span><br><span class="line">       <span class="comment">//     data:&#x27;可能存在什么错误哦&#x27;</span></span><br><span class="line">       <span class="comment">//   &#125;)</span></span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(err)</span><br><span class="line">     &#125;)</span><br></pre></td></tr></table></figure><h1 id="5、到了这里，请求拦截和响应拦截已经过了，然后回到request中，将这个污染的axios返回。"><a href="#5、到了这里，请求拦截和响应拦截已经过了，然后回到request中，将这个污染的axios返回。" class="headerlink" title="5、到了这里，请求拦截和响应拦截已经过了，然后回到request中，将这个污染的axios返回。"></a>5、到了这里，请求拦截和响应拦截已经过了，然后回到request中，将这个污染的axios返回。</h1><h1 id="6、通过被污染过axios请求数据成功请求服务器并返回了数据"><a href="#6、通过被污染过axios请求数据成功请求服务器并返回了数据" class="headerlink" title="6、通过被污染过axios请求数据成功请求服务器并返回了数据"></a>6、通过被污染过axios请求数据成功请求服务器并返回了数据</h1>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>js垃圾回收机制</title>
      <link href="/posts/ef09.html"/>
      <url>/posts/ef09.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-垃圾回收概述"><a href="#1-垃圾回收概述" class="headerlink" title="(1)垃圾回收概述"></a>(1)垃圾回收概述</h1><p>垃圾回收机制(GC:Garbage Collection),执行环境负责管理代码执行过程中使用的内存。垃圾收集器会定期（周期性）找出那些不在继续使用的变量，然后释放其内存。但是这个过程不是实时的，因为其开销比较大，所以垃圾回收器会按照固定的时间间隔周期性的执行。</p><h1 id="2-常见内存泄露的原因"><a href="#2-常见内存泄露的原因" class="headerlink" title="(2)常见内存泄露的原因"></a>(2)常见内存泄露的原因</h1><p>全局变量引起的内存泄露闭包引起的内存泄露：慎用<strong>闭包</strong>、dom清空或删除时，事件未清除导致的内存泄漏循环引用带来的内存泄露。</p><h1 id="3-垃圾回收策略"><a href="#3-垃圾回收策略" class="headerlink" title="(3)垃圾回收策略"></a>(3)垃圾回收策略</h1><p>标记清除和引用计数,理解一下即可。</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>promise理解与实现</title>
      <link href="/posts/2a66.html"/>
      <url>/posts/2a66.html</url>
      
        <content type="html"><![CDATA[<h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><h2 id="1、创建一个Apromise函数"><a href="#1、创建一个Apromise函数" class="headerlink" title="1、创建一个Apromise函数"></a>1、创建一个Apromise函数</h2><h2 id="2、用Apromise来new一个实例，这个实例包含了Apromise的共有属性resolve、reject"><a href="#2、用Apromise来new一个实例，这个实例包含了Apromise的共有属性resolve、reject" class="headerlink" title="2、用Apromise来new一个实例，这个实例包含了Apromise的共有属性resolve、reject"></a>2、用Apromise来new一个实例，这个实例包含了Apromise的共有属性resolve、reject</h2><h2 id="3、然后给Apromise传一个参数（执行函数），然后执行函数会触发所对应的函数并执行"><a href="#3、然后给Apromise传一个参数（执行函数），然后执行函数会触发所对应的函数并执行" class="headerlink" title="3、然后给Apromise传一个参数（执行函数），然后执行函数会触发所对应的函数并执行"></a>3、然后给Apromise传一个参数（执行函数），然后执行函数会触发所对应的函数并执行</h2><h2 id="4、然后Apromise-prototype-then就是在共有属性中添加一个then函数，触发后根据第三步触发的函数进行相对应的操作。"><a href="#4、然后Apromise-prototype-then就是在共有属性中添加一个then函数，触发后根据第三步触发的函数进行相对应的操作。" class="headerlink" title="4、然后Apromise.prototype.then就是在共有属性中添加一个then函数，触发后根据第三步触发的函数进行相对应的操作。"></a>4、然后Apromise.prototype.then就是在共有属性中添加一个then函数，触发后根据第三步触发的函数进行相对应的操作。</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//promise英文中叫做承诺</span></span><br><span class="line"><span class="comment">//成功resolve  失败reject 正在过程中 pending 没人接的时候</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">status</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">value</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Apromise</span>(<span class="params">fn</span>)&#123;</span><br><span class="line">    <span class="comment">//fn传进去的就是一个这样的东西 </span></span><br><span class="line">    <span class="comment">// fn = (resolve,reject)=&gt;&#123;</span></span><br><span class="line">    <span class="comment">//     resolve(&#x27;1&#x27;)</span></span><br><span class="line">    <span class="comment">//    //reject(&#x27;2&#x27;)</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">//这里都是定义数据和函数  下面</span></span><br><span class="line">    obj.<span class="property">status</span> = <span class="string">&#x27;pending&#x27;</span></span><br><span class="line">    obj.<span class="property">value</span>= <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">resolve</span>(<span class="params">value</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(obj.<span class="property">status</span> === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;1111&#x27;</span>)</span><br><span class="line">            obj.<span class="property">status</span> = <span class="string">&#x27;resolve&#x27;</span></span><br><span class="line">            obj.<span class="property">value</span> = value</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">value</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">reject</span>(<span class="params">value</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(obj.<span class="property">status</span> === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">            obj.<span class="property">status</span> = <span class="string">&#x27;reject&#x27;</span></span><br><span class="line">            obj.<span class="property">value</span> = value</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//这里都是定义数据和函数  上面 </span></span><br><span class="line">    <span class="title function_">fn</span>(resolve,reject)</span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//then的时候prototype加了一个方法 then 方法</span></span><br><span class="line"><span class="title class_">Apromise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">then</span> = <span class="keyword">function</span>(<span class="params">resolve,reject</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(obj.<span class="property">status</span> === <span class="string">&#x27;resolve&#x27;</span>) &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(obj.<span class="property">value</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(obj.<span class="property">status</span> === <span class="string">&#x27;reject&#x27;</span>) &#123;</span><br><span class="line">        <span class="title function_">reject</span>(obj.<span class="property">value</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这个promise首先不要混淆  这是我们自己的promise</span></span><br><span class="line"><span class="comment">// resolve是形参   then 里面的两个函数 都是resolve,reject的 实参  </span></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Apromise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="title function_">resolve</span>(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">  <span class="comment">// reject(&#x27;2&#x27;)</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;,<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>发布订阅者模式</title>
      <link href="/posts/1354.html"/>
      <url>/posts/1354.html</url>
      
        <content type="html"><![CDATA[<h1 id="发布订阅者模式和观察者模式比较类似，只不过在中间加了个处理机制，这个机制就好比是派发器，也就是说一旦发布者发布了消息，派发器就接收消息，那么订阅者都会通过派发器接收到发布者的消息。应用场景就是更改某个状态时，多个依赖该状态的组件或者对象进行相对应的改变，黑暗模式以及白天模式的转换。在vue中比较相似的api就是v-model。"><a href="#发布订阅者模式和观察者模式比较类似，只不过在中间加了个处理机制，这个机制就好比是派发器，也就是说一旦发布者发布了消息，派发器就接收消息，那么订阅者都会通过派发器接收到发布者的消息。应用场景就是更改某个状态时，多个依赖该状态的组件或者对象进行相对应的改变，黑暗模式以及白天模式的转换。在vue中比较相似的api就是v-model。" class="headerlink" title="发布订阅者模式和观察者模式比较类似，只不过在中间加了个处理机制，这个机制就好比是派发器，也就是说一旦发布者发布了消息，派发器就接收消息，那么订阅者都会通过派发器接收到发布者的消息。应用场景就是更改某个状态时，多个依赖该状态的组件或者对象进行相对应的改变，黑暗模式以及白天模式的转换。在vue中比较相似的api就是v-model。"></a>发布订阅者模式和观察者模式比较类似，只不过在中间加了个处理机制，这个机制就好比是派发器，也就是说一旦发布者发布了消息，派发器就接收消息，那么订阅者都会通过派发器接收到发布者的消息。<br>应用场景就是更改某个状态时，多个依赖该状态的组件或者对象进行相对应的改变，黑暗模式以及白天模式的转换。在vue中比较相似的api就是v-model。</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">       <span class="keyword">let</span> e=&#123;</span><br><span class="line">  </span><br><span class="line">        <span class="attr">_callback</span>:[],</span><br><span class="line">        <span class="title function_">on</span>(<span class="params">callback</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">_callback</span>.<span class="title function_">push</span>(callback);</span><br><span class="line">        &#125;,</span><br><span class="line">   </span><br><span class="line">        <span class="title function_">emit</span>(<span class="params">value</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">_callback</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">the</span>=&gt;</span>&#123;</span><br><span class="line">                <span class="title function_">the</span>(value)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    e.<span class="title function_">on</span>(<span class="keyword">function</span>(<span class="params">value</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;张三订阅:&#x27;</span>+value)</span><br><span class="line">    &#125;)</span><br><span class="line">    e.<span class="title function_">on</span>(<span class="keyword">function</span>(<span class="params">value</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;零四订阅:&#x27;</span>+value)</span><br><span class="line">    &#125;)</span><br><span class="line">    e.<span class="title function_">on</span>(<span class="keyword">function</span>(<span class="params">value</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;王五订阅:&#x27;</span>+value)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    e.<span class="title function_">emit</span>(<span class="string">&#x27;中央日报&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>继承模式</title>
      <link href="/posts/9fa3.html"/>
      <url>/posts/9fa3.html</url>
      
        <content type="html"><![CDATA[<p>1、原型继承<br>优点:<br>1、可以继承父类属性和方法<br>2、子类实例对象不能给父类构造函数传参<br>缺点:子类更改父类的复杂数据类型的数据(对象、数组),所有继承了父类的子类的数据也会改变</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">name</span>=<span class="string">&#x27;父类&#x27;</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">age</span>=<span class="string">&#x27;40&#x27;</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">res</span>=[<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">getName</span>=<span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">get</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;父类的get方法&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">        <span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span>=<span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> son1=<span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">        son1.<span class="property">res</span>.<span class="title function_">push</span>(<span class="number">3</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(son1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;------------------------&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> son2=<span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(son2);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2、构造函数继承<br>优点：父类的复杂数据类型不会被子类共享，不会相互影响<br>缺点：子类获取不到父类的原型对象</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">name</span>=<span class="string">&#x27;父类&#x27;</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">age</span>=<span class="string">&#x27;40&#x27;</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">res</span>=[<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">getName</span>=<span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">get</span>=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;父类的get方法&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="title class_">Person</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> son1=<span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">        son1.<span class="property">res</span>.<span class="title function_">push</span>(<span class="number">3</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(son1);</span><br><span class="line">        son1.<span class="title function_">get</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;------------------------&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> son2=<span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(son2);</span><br></pre></td></tr></table></figure><p>3、组合继承<br>优点：<br>1、父类复杂数据不会被子类共享<br>2、子类可以获取父类的原型对象的属性<br>缺点：构造函数被调用两次，影响性能</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">name</span>=<span class="string">&#x27;父类&#x27;</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">age</span>=<span class="string">&#x27;40&#x27;</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">res</span>=[<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">getName</span>=<span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">get</span>=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;父类的get方法&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="title class_">Person</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span>=<span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> son1=<span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">        son1.<span class="property">res</span>.<span class="title function_">push</span>(<span class="number">3</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(son1);</span><br><span class="line">        son1.<span class="title function_">get</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;------------------------&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> son2=<span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(son2);</span><br></pre></td></tr></table></figure><p>4、寄生组合继承（新建一个中间函数去原型继承父类函数）</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">name</span>=<span class="string">&#x27;父类&#x27;</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">age</span>=<span class="string">&#x27;40&#x27;</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">res</span>=[<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">getName</span>=<span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">get</span>=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;父类的get方法&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="title class_">Person</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//中间函数</span></span><br><span class="line">        <span class="keyword">const</span> fn=<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;;</span><br><span class="line">        fn.<span class="property"><span class="keyword">prototype</span></span>=<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line">        <span class="comment">//中间函数</span></span><br><span class="line">        <span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span>=<span class="keyword">new</span> <span class="title function_">fn</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> son1=<span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">        son1.<span class="property">res</span>.<span class="title function_">push</span>(<span class="number">3</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(son1);</span><br><span class="line">        son1.<span class="title function_">get</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;------------------------&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> son2=<span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(son2);</span><br></pre></td></tr></table></figure><p>5、类继承<br>es6最佳方法</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">            <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;小明&#x27;</span>;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">res</span> = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>];</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">getName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            get = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;父类prototype上的方法&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> son1 = <span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">        son1.<span class="property">res</span>.<span class="title function_">push</span>(<span class="number">3</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(son1);</span><br><span class="line">        son1.<span class="title function_">get</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;------------------------&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> son2 = <span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(son2);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>git实际操作流程</title>
      <link href="/posts/89ce.html"/>
      <url>/posts/89ce.html</url>
      
        <content type="html"><![CDATA[<h1 id="1、组长创建仓库"><a href="#1、组长创建仓库" class="headerlink" title="1、组长创建仓库"></a>1、组长创建仓库</h1><h1 id="2、组员加入仓库"><a href="#2、组员加入仓库" class="headerlink" title="2、组员加入仓库"></a>2、组员加入仓库</h1><h1 id="3、组员拉取代码"><a href="#3、组员拉取代码" class="headerlink" title="3、组员拉取代码"></a>3、组员拉取代码</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone url           //下载项目</span><br><span class="line">git init         //初始化本地仓库</span><br><span class="line">git remote add 项目名 https://github.com/cs2273520/gittet.git</span><br><span class="line">git branch mybrach //跳转自己创的分支   没有创建则跳到第四步</span><br></pre></td></tr></table></figure><h1 id="4、组员创建自己的分支-x2F-x2F-以创建-mybranch-为例子"><a href="#4、组员创建自己的分支-x2F-x2F-以创建-mybranch-为例子" class="headerlink" title="4、组员创建自己的分支 &#x2F;&#x2F;以创建 mybranch 为例子"></a>4、组员创建自己的分支 &#x2F;&#x2F;以创建 mybranch 为例子</h1><p>创建分支步骤<br>一、创建分支，并切换到创建的分支上去 （# git branch mybranch 仅创建分支）</p><hr><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout -b mybranch   //创建mybranch并且跳转到mybrnach分支</span><br></pre></td></tr></table></figure><h2 id="二、-更新远程分支列表（不然无法提交代码）"><a href="#二、-更新远程分支列表（不然无法提交代码）" class="headerlink" title="二、 更新远程分支列表（不然无法提交代码）"></a>二、 更新远程分支列表（不然无法提交代码）</h2><p>两种提交方式:<br>(1)可以用 vscode 左下角工具 &#x2F;&#x2F;第二个图标</p><hr><p><img src="/images/git/git.png"><br>(2)命令提交</p><hr><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote update origin --prune</span><br></pre></td></tr></table></figure><h1 id="5、编写代码-x2F-x2F-在自己当前创建的分支上写代码"><a href="#5、编写代码-x2F-x2F-在自己当前创建的分支上写代码" class="headerlink" title="5、编写代码 &#x2F;&#x2F;在自己当前创建的分支上写代码"></a>5、编写代码 &#x2F;&#x2F;在自己当前创建的分支上写代码</h1><h1 id="6、更新自己的代码"><a href="#6、更新自己的代码" class="headerlink" title="6、更新自己的代码"></a>6、更新自己的代码</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git pull         //拉取最新的代码</span><br><span class="line">git add .     //添加自己当前文件夹的所有文件</span><br><span class="line">git commit -m 自定义的版本解释说明</span><br><span class="line">git push   //将自己的代码上传到远程仓库（提交到了branch分支而已，后面要进行分支合并）</span><br></pre></td></tr></table></figure><h1 id="7、合并分支（当前我的分支-mybranch，开发分支是-dev，最终上线的分支-main）"><a href="#7、合并分支（当前我的分支-mybranch，开发分支是-dev，最终上线的分支-main）" class="headerlink" title="7、合并分支（当前我的分支 mybranch，开发分支是 dev，最终上线的分支 main）"></a>7、合并分支（当前我的分支 mybranch，开发分支是 dev，最终上线的分支 main）</h1><h2 id="（1）首先切换到-dev-分支（我的分支是-mybranch，我想将-mybranch-合并到-dev-分支中）"><a href="#（1）首先切换到-dev-分支（我的分支是-mybranch，我想将-mybranch-合并到-dev-分支中）" class="headerlink" title="（1）首先切换到 dev 分支（我的分支是 mybranch，我想将 mybranch 合并到 dev 分支中）"></a>（1）首先切换到 dev 分支（我的分支是 mybranch，我想将 mybranch 合并到 dev 分支中）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout dev</span><br></pre></td></tr></table></figure><h2 id="（2）确保-dev-代码是最新的代码"><a href="#（2）确保-dev-代码是最新的代码" class="headerlink" title="（2）确保 dev 代码是最新的代码"></a>（2）确保 dev 代码是最新的代码</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git pull origin dev</span><br></pre></td></tr></table></figure><h2 id="（3）将我们的-mybranch-分支合并到-dev-分支中"><a href="#（3）将我们的-mybranch-分支合并到-dev-分支中" class="headerlink" title="（3）将我们的 mybranch 分支合并到 dev 分支中"></a>（3）将我们的 mybranch 分支合并到 dev 分支中</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git merge mybranch</span><br><span class="line"></span><br><span class="line">或者  git rebase mybranch</span><br></pre></td></tr></table></figure><h2 id="（4）查看状态及执行提交命令"><a href="#（4）查看状态及执行提交命令" class="headerlink" title="（4）查看状态及执行提交命令"></a>（4）查看状态及执行提交命令</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;上面的意思就是你有 1 个 commit，需要 push 到远程 master 上<br>（5）提交代码到 dev</p><hr><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push origin dev</span><br></pre></td></tr></table></figure><h1 id="回退版本-x2F-x2F-两个场景"><a href="#回退版本-x2F-x2F-两个场景" class="headerlink" title="回退版本 &#x2F;&#x2F;两个场景"></a>回退版本 &#x2F;&#x2F;两个场景</h1><h2 id="场景一：如果想将代码恢复到之前某个提交的版本，且那个版本之后提交的版本都不要了，就可以使用"><a href="#场景一：如果想将代码恢复到之前某个提交的版本，且那个版本之后提交的版本都不要了，就可以使用" class="headerlink" title="场景一：如果想将代码恢复到之前某个提交的版本，且那个版本之后提交的版本都不要了，就可以使用"></a>场景一：如果想将代码恢复到之前某个提交的版本，且那个版本之后提交的版本都不要了，就可以使用</h2><p>操作：</p><ol><li>查看版本号：git log，也可以上代码托管网页上查看 history，找到需要回滚的目标版本号</li><li>使用“git reset –hard 目标版本号”命令将版本回退</li><li>使用“git push -f”提交更改，此时如果用“git push”会报错，因为我们本地库 HEAD 指向的版本比远程库的要旧，用“git push -f”强制推上去。</li></ol><h2 id="场景二：如果我们想撤销之前的某一版本，但是又想保留该目标版本后面的版本，记录下这整个版本变动流程，就可以用这种方法。"><a href="#场景二：如果我们想撤销之前的某一版本，但是又想保留该目标版本后面的版本，记录下这整个版本变动流程，就可以用这种方法。" class="headerlink" title="场景二：如果我们想撤销之前的某一版本，但是又想保留该目标版本后面的版本，记录下这整个版本变动流程，就可以用这种方法。"></a>场景二：如果我们想撤销之前的某一版本，但是又想保留该目标版本后面的版本，记录下这整个版本变动流程，就可以用这种方法。</h2><p>操作：</p><ol><li>查看版本号：git log，也可以上代码托管网页上查看 history，找到需要撤销的目标版本号。</li><li>使用“git revert -n 版本号”反做，并使用“git commit -m 版本名”提交。<br>（1）反做，使用“git revert -n 版本号”命令。\n\n 注意： 这里可能会出现冲突，那么需要手动修改冲突的文件。而且要 git add 文件名。<br>（2）提交，使用“git commit -m 版本名”</li><li>使用“git push”推上远程库。</li></ol><h1 id="删除项目中的某个文件夹-x2F-文件"><a href="#删除项目中的某个文件夹-x2F-文件" class="headerlink" title="删除项目中的某个文件夹&#x2F;文件"></a>删除项目中的某个文件夹&#x2F;文件</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git pull //拉取最新代码</span><br><span class="line">dir //查看文件</span><br><span class="line">git rm -r --cached + 想要删除的某某文件夹</span><br><span class="line">git commit -m &#x27;删除了某某文件夹&#x27;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>git的merge与rebase的区别</title>
      <link href="/posts/329f.html"/>
      <url>/posts/329f.html</url>
      
        <content type="html"><![CDATA[<p><img src="/images/git/gitrebase.jpg"><br><img src="/images/git/gitmerge.jpg"></p><h2 id="rebase就是将主分支的最后提交节点，然后再逐个提交分支节点；"><a href="#rebase就是将主分支的最后提交节点，然后再逐个提交分支节点；" class="headerlink" title="rebase就是将主分支的最后提交节点，然后再逐个提交分支节点；"></a>rebase就是将主分支的最后提交节点，然后再逐个提交分支节点；</h2><h2 id="merge就是将主分支的最后提交节点和分支的最后提交节点进行合并并产生额外的合并记录。"><a href="#merge就是将主分支的最后提交节点和分支的最后提交节点进行合并并产生额外的合并记录。" class="headerlink" title="merge就是将主分支的最后提交节点和分支的最后提交节点进行合并并产生额外的合并记录。"></a>merge就是将主分支的最后提交节点和分支的最后提交节点进行合并并产生额外的合并记录。</h2>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>api的使用</title>
      <link href="/posts/9e27.html"/>
      <url>/posts/9e27.html</url>
      
        <content type="html"><![CDATA[<h1 id="1、Gobal对"><a href="#1、Gobal对" class="headerlink" title="1、Gobal对"></a>1、Gobal对</h1><p>eval(‘var a&#x3D;0’); &#x2F;&#x2F; 执行代码或者表达式</p><h1 id="2、Math对象"><a href="#2、Math对象" class="headerlink" title="2、Math对象"></a>2、Math对象</h1><p>向上取整Math.ceil<br>向下取整Math.floor<br>四舍五入Math.round   &#x3D;0.5的时候，负数向正数靠，正数向上取整<br>绝对值Math.abs<br>最大值Math.max   参数为多个参数，不能为数组<br>随机数: Math.floor(Math.random()*(max-min+1))+min(包含max和min，如果不包含max去掉+1就行)</p><h1 id="3、数组"><a href="#3、数组" class="headerlink" title="3、数组"></a>3、数组</h1><p>isArray() 检测是否是数组<br>instanceof  检测是否是数组<br>toString() 转换为字符串<br>valueOf() 转换为字符串<br>push() 在数组尾添加<br>slice()   参数为（start,end）不传参不进行操作，为负数就是从数组尾部开始，返回新的数组<br>splice()  用法和slice差不多，但是改变原数组<br>pop() 移除数组最后一个元素<br>shift() 移除数组的第一个元素<br>unshift 添加元素到数组的第一个位置<br>sort(排序函数名字) 排序<br>indexOf()查找<br>lastIndexOf()查找<br>every(函数) 每一个都符合函数的判定<br>some(函数) 其中一个符合函数的判定<br>map(函数) 遍历函数 返回遍历的数组<br>filter(函数)  过滤函数中符合的<br>forEach() 遍历函数 没有返回值<br>reduce(函数) 函数中进行积累操作</p><h1 id="4、对象"><a href="#4、对象" class="headerlink" title="4、对象"></a>4、对象</h1><p>hasOwnProperty()方法用于检测一个对象是否含有特定的自身属性，返回一个布尔值。<br>Object.is()，其行为与&#x3D;&#x3D;&#x3D;基本一致，不过有两处不同： +0不等于-0。 NaN等于自身。</p><h1 id="5、字符串"><a href="#5、字符串" class="headerlink" title="5、字符串"></a>5、字符串</h1><p>charAt(1) 返回下标为1的字符<br>concat(123) 返回合并123的字符串<br>substr(start,length) 截取<br>substring(star,end)截取<br>slice() 截取<br>indexOf() 查找字符下标<br>lastIndexOf() 查找最后一次字符下标<br>trim() 去掉前面的空格<br>toLowerCase() 小写<br>toLocaleLowerCase()小写<br>toLocaleUpperCase()大写<br>toUpperCase()大写<br>match() 返回匹配到的数组<br>replace()替换<br>spilt(“，”) 返回以，分割开的数组</p><p>parseInt(string,raix)<br>  1 ）注意:string字符串只会被解析从第一个字符开始直到不是数字的字符部分        console.log(parseInt(‘223’));&#x2F;&#x2F;223） 当字符串中间存在非数字,那么就只解析前面是数字的部分字符        console.log(parseInt(‘22e3’));&#x2F;&#x2F;22） 如果字符串中第一个字符就不是数字,那么返回NaN         console.log(parseInt(‘e21’));&#x2F;&#x2F;NaN<br>  4） 第二个参数raix表示进制数，如果值是10就表示转换成10进制</p><h1 id="其它："><a href="#其它：" class="headerlink" title="其它："></a>其它：</h1><p>isNaN(item) 的时候会先将item进行 Number(item) 的隐式转换，然后再isNaN(item)</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>localStorage和sessionStorage的区别</title>
      <link href="/posts/ec4d.html"/>
      <url>/posts/ec4d.html</url>
      
        <content type="html"><![CDATA[<p>localstorage:永久存储在本地<br>sessionStorage:会话级存储    常见应用就是 敏感账号一次性登录<br><strong>相同点：</strong><br>1、均存储在浏览器中<br>2、不会自动发送数据给服务器<br>3、只能存储字符串，对象可通过json,stringfy()进行编码存储</p><p><strong>不同点</strong><br>1、数据存储大小不同 local是20M session是5M<br>2、有效期不同，local是永久，session浏览器关闭失效<br>3、作用域不同，local可以多个页面共享，session只能当前页面使用</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>new省略的过程</title>
      <link href="/posts/ab6c.html"/>
      <url>/posts/ab6c.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">mynew</span>(<span class="params">Func, ...args</span>) &#123;</span><br><span class="line">    <span class="comment">// 1.创建一个新对象</span></span><br><span class="line">    <span class="keyword">const</span> obj = &#123;&#125;</span><br><span class="line">    <span class="comment">// 2.新对象原型指向构造函数原型对象</span></span><br><span class="line">    obj.<span class="property">__proto__</span> = <span class="title class_">Func</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line">    <span class="comment">// 3.将构建函数的this指向新对象</span></span><br><span class="line">    <span class="keyword">let</span> result = <span class="title class_">Func</span>.<span class="title function_">apply</span>(obj, args)</span><br><span class="line">    <span class="comment">// 4.根据返回值判断</span></span><br><span class="line">    <span class="keyword">return</span> result <span class="keyword">instanceof</span> <span class="title class_">Object</span> ? result : obj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>原型以及原型链的深入理解</title>
      <link href="/posts/b87f.html"/>
      <url>/posts/b87f.html</url>
      
        <content type="html"><![CDATA[<h2 id="1、首先，每个对象A都会有一个-proto-用来连接自己的隐式原型，然后这个对象的构造函数B也有一个prototype去连接自己的显式原型，等价于-A-proto-x3D-x3D-B-prototype-都指向原型。"><a href="#1、首先，每个对象A都会有一个-proto-用来连接自己的隐式原型，然后这个对象的构造函数B也有一个prototype去连接自己的显式原型，等价于-A-proto-x3D-x3D-B-prototype-都指向原型。" class="headerlink" title="1、首先，每个对象A都会有一个__proto__,用来连接自己的隐式原型，然后这个对象的构造函数B也有一个prototype去连接自己的显式原型，等价于:A.proto&#x3D;&#x3D;B.prototype  都指向原型。"></a>1、首先，每个对象A都会有一个__proto__,用来连接自己的隐式原型，然后这个对象的构造函数B也有一个prototype去连接自己的显式原型，等价于:<br>A.<strong>proto</strong>&#x3D;&#x3D;B.prototype  都指向原型。</h2><h2 id="2、在这个隐式原型中，如果B继承了C或者D其他的构造函数，那么B继承的所有东西（C的变量、函数）都会放在B-prototype中。"><a href="#2、在这个隐式原型中，如果B继承了C或者D其他的构造函数，那么B继承的所有东西（C的变量、函数）都会放在B-prototype中。" class="headerlink" title="2、在这个隐式原型中，如果B继承了C或者D其他的构造函数，那么B继承的所有东西（C的变量、函数）都会放在B.prototype中。"></a>2、在这个隐式原型中，如果B继承了C或者D其他的构造函数，那么B继承的所有东西（C的变量、函数）都会放在B.prototype中。</h2><h2 id="3、原型的原型是Object-prototype，也就是说B-prototype-proto-指向Object-prototype"><a href="#3、原型的原型是Object-prototype，也就是说B-prototype-proto-指向Object-prototype" class="headerlink" title="3、原型的原型是Object.prototype，也就是说B.prototype.__proto__指向Object.prototype"></a>3、原型的原型是Object.prototype，也就是说B.prototype.__proto__指向Object.prototype</h2><h2 id="4、再往上就是null了"><a href="#4、再往上就是null了" class="headerlink" title="4、再往上就是null了"></a>4、再往上就是null了</h2><p>原型链继承</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">A</span>(<span class="params"></span>)&#123;</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">name</span>=<span class="string">&#x27;我是A&#x27;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">B</span>(<span class="params"></span>)&#123;</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">name</span>=<span class="string">&#x27;我是B&#x27;</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">    B.<span class="property"><span class="keyword">prototype</span></span>=<span class="keyword">new</span> <span class="title function_">A</span>();</span><br><span class="line">    <span class="keyword">var</span> b=<span class="keyword">new</span> <span class="title function_">B</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b.<span class="property">name</span>);</span><br><span class="line">    <span class="comment">//！！！！！！！！！！注意！！！！！！！！！！！！！！！！</span></span><br><span class="line">    <span class="comment">//！！！！！这里已经原型链继承了(B继承了A),对接下来的原型链的第二部理解很重要！！！！！！！！！！！</span></span><br><span class="line">    <span class="comment">//第一层的__proto__指向原型(是一个对象),也就是B.prototype,因为B原型继承了A，所以B的原型是A;</span></span><br><span class="line">    <span class="comment">//第二层的__proto__指向A.prototype（也就是A的原型）,如果B没有继承A的话，这里就是直接是B的原型了（不会多出一个A的原型）;</span></span><br><span class="line">    <span class="comment">//第三层的__proto__指向Object.prototype，也就是Object的原型;</span></span><br><span class="line">    <span class="comment">//第四层的__proto__指向null(万物最终的归宿就是null);</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b.<span class="property">__proto__</span>.<span class="property">__proto__</span>.<span class="property">__proto__</span>.<span class="property">__proto__</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(b.<span class="property">__proto__</span>.<span class="property">__proto__</span>.<span class="property">__proto__</span>.<span class="property">__proto__</span>) );</span><br><span class="line">    <span class="comment">//忘了可以一个一个删除__proto__来了解每一层代表什么</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数字精度问题</title>
      <link href="/posts/4d83.html"/>
      <url>/posts/4d83.html</url>
      
        <content type="html"><![CDATA[<h2 id="0-1-＝0-1可以先用toPrecision凑整，然后用praseFlow转为数字"><a href="#0-1-＝0-1可以先用toPrecision凑整，然后用praseFlow转为数字" class="headerlink" title="0.1!＝0.1可以先用toPrecision凑整，然后用praseFlow转为数字"></a>0.1!＝0.1<br>可以先用toPrecision凑整，然后用praseFlow转为数字</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num=<span class="number">0.000000001</span></span><br><span class="line"><span class="title function_">parseFlow</span>(num.<span class="title function_">toPrecision</span>(<span class="number">5</span>))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>BFC</title>
      <link href="/posts/85d3.html"/>
      <url>/posts/85d3.html</url>
      
        <content type="html"><![CDATA[<p>一个渲染区域内有自己的一个渲染规则，简单来说，bfc可以看作元素的一种属性；<br>触发条件：<br>1、根元素  <html><br>2、浮动元素<br>3、绝对定位元素<br>4、行内元素、table表格<br>5、overflow不为visable的块元素<br>6、contain的值为layout、content、paint<br>7、多列容器</html></p><p><img src="/images/css/BFC.png"></p><p>作用:<br>1、清除浮动<br>2、解决外编剧重合<br>3、避免被浮动元素覆盖</p>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>元素居中</title>
      <link href="/posts/cb34.html"/>
      <url>/posts/cb34.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、<span class="selector-tag">table</span>自带居中</span><br><span class="line">    &lt;<span class="selector-tag">div</span> style=&quot;<span class="attribute">text-align</span>: center;&quot;&gt;</span><br><span class="line">        &lt;<span class="selector-tag">table</span> style=&quot;<span class="attribute">width</span>: <span class="number">100px</span>;<span class="attribute">height</span>: <span class="number">100px</span>; <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;<span class="attribute">margin</span>: auto;&quot;&gt;&lt;/<span class="selector-tag">table</span>&gt;</span><br><span class="line">    &lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line"><span class="number">2</span>、<span class="number">100%</span>高度的after before加上inline-block</span><br><span class="line">     &lt;<span class="selector-tag">div</span> class=&quot;test&quot;&gt;</span><br><span class="line">        &lt;<span class="selector-tag">div</span> class=&quot;testChild2&quot;&gt;&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">   &lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line"> <span class="selector-class">.test</span>&#123;</span><br><span class="line">        <span class="attribute">background</span>: black;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">text-align</span>: center;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.test</span><span class="selector-pseudo">::before</span>&#123;</span><br><span class="line">        <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="attribute">display</span>: inline-block;</span><br><span class="line">        <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.testChild2</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">30px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">        <span class="attribute">background</span>: red;</span><br><span class="line">        <span class="attribute">display</span>: inline-block;</span><br><span class="line">        <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、将<span class="selector-tag">div</span>转化成<span class="selector-tag">table</span></span><br><span class="line">  &lt;<span class="selector-tag">div</span> style=&quot;<span class="attribute">text-align</span>: center;&quot;&gt;</span><br><span class="line">        &lt;<span class="selector-tag">div</span> style=&quot;<span class="attribute">width</span>: <span class="number">100px</span>;<span class="attribute">height</span>: <span class="number">100px</span>; <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;<span class="attribute">margin</span>:auto;&quot;&gt;&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">    &lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>、<span class="attribute">margin-top</span>：-自身的一半</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">5</span>、translate：-<span class="number">50%</span>；</span><br><span class="line">    &lt;<span class="selector-tag">div</span> style=&quot;<span class="attribute">width</span>: <span class="number">100%</span>; <span class="attribute">height</span>: <span class="number">100vh</span>; <span class="attribute">background-color</span>: red; <span class="attribute">position</span>:relative;&quot;&gt;</span><br><span class="line">        &lt;<span class="selector-tag">div</span> style=&quot;<span class="attribute">width</span>: <span class="number">100px</span>;<span class="attribute">height</span>: <span class="number">100px</span>; <span class="attribute">background-color</span>: blue;<span class="attribute">position</span>: absolute;<span class="attribute">top</span>:<span class="number">50%</span>;<span class="attribute">left</span>:<span class="number">50%</span>;<span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>,-<span class="number">50%</span>);&quot; &gt;&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">    &lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line"><span class="number">6</span>、<span class="attribute">position</span>：absolute；<span class="attribute">margin</span>：auto；</span><br><span class="line"></span><br><span class="line">    &lt;<span class="selector-tag">div</span> style=&quot;<span class="attribute">width</span>: <span class="number">100%</span>; <span class="attribute">height</span>: <span class="number">100vh</span>; <span class="attribute">background-color</span>: red; <span class="attribute">position</span>:relative;&quot;&gt;</span><br><span class="line">        &lt;<span class="selector-tag">div</span> style=&quot;<span class="attribute">width</span>: <span class="number">100px</span>;<span class="attribute">height</span>: <span class="number">100px</span>; <span class="attribute">background-color</span>: blue;<span class="attribute">position</span>: absolute;<span class="attribute">top</span>: <span class="number">0</span>;<span class="attribute">left</span>: <span class="number">0</span>;<span class="attribute">right</span>: <span class="number">0</span>;<span class="attribute">bottom</span>: <span class="number">0</span>; <span class="attribute">margin</span>:auto;&quot; &gt;&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">    &lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line"><span class="number">7</span>、<span class="attribute">display</span></span><br><span class="line">   &lt;<span class="selector-tag">div</span> style=&quot;<span class="attribute">width</span>: <span class="number">100%</span>; <span class="attribute">height</span>: <span class="number">100vh</span>;<span class="attribute">display</span>: flex;<span class="attribute">align-items</span>: center;<span class="attribute">justify-content</span>: center;<span class="attribute">background-color</span>: red;&quot;&gt;</span><br><span class="line">        &lt;<span class="selector-tag">div</span> style=&quot;<span class="attribute">width</span>: <span class="number">100px</span>; <span class="attribute">height</span>: <span class="number">100px</span>; <span class="attribute">background-color</span>: blue;&quot;&gt;&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">    &lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>回流重绘</title>
      <link href="/posts/9dc3.html"/>
      <url>/posts/9dc3.html</url>
      
        <content type="html"><![CDATA[<h1 id="1、概念"><a href="#1、概念" class="headerlink" title="1、概念:"></a>1、概念:</h1><p>在页面进行加载的时候，浏览器把html解析生成相对应DOM树，css解析成样式结构体<br>DOM树结合样式结构体生成render树</p><h1 id="2、回流"><a href="#2、回流" class="headerlink" title="2、回流"></a>2、回流</h1><p>让render树中的元素的宽高、布局、显示、隐藏或者元素内部文字结构发生改变时，会影响自身以及父元素，则会导致元素内部、周围甚至整个页面的重新渲染，页面发生重构，回流产生</p><h1 id="3、重绘"><a href="#3、重绘" class="headerlink" title="3、重绘"></a>3、重绘</h1><p>元素的结构(宽高、布局、显示隐藏、内部文字大小)未发生改变，只是元素的外观样式发生改变，比如背景颜色，边框颜色，内部文字颜色等，重绘产生。</p><h1 id="触发条件"><a href="#触发条件" class="headerlink" title="触发条件:"></a>触发条件:</h1><h2 id="回流必将引起重绘"><a href="#回流必将引起重绘" class="headerlink" title="回流必将引起重绘"></a>回流必将引起重绘</h2><h2 id="当页面布局和几何属性发生改变时就需要回流，例如添加或删除dom元素，元素的位置、元素的尺寸发生改变"><a href="#当页面布局和几何属性发生改变时就需要回流，例如添加或删除dom元素，元素的位置、元素的尺寸发生改变" class="headerlink" title="当页面布局和几何属性发生改变时就需要回流，例如添加或删除dom元素，元素的位置、元素的尺寸发生改变"></a>当页面布局和几何属性发生改变时就需要回流，例如添加或删除dom元素，元素的位置、元素的尺寸发生改变</h2><h2 id="页面渲染的时候触发回流"><a href="#页面渲染的时候触发回流" class="headerlink" title="页面渲染的时候触发回流"></a>页面渲染的时候触发回流</h2>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>promise.all与promise.race的区别</title>
      <link href="/posts/5615.html"/>
      <url>/posts/5615.html</url>
      
        <content type="html"><![CDATA[<h2 id="1、all是将多个promise实例结合成一个新的promise，也就是全部成功执行才返回所有的成功执行数据，有一个失败则返回执行失败的数据；"><a href="#1、all是将多个promise实例结合成一个新的promise，也就是全部成功执行才返回所有的成功执行数据，有一个失败则返回执行失败的数据；" class="headerlink" title="1、all是将多个promise实例结合成一个新的promise，也就是全部成功执行才返回所有的成功执行数据，有一个失败则返回执行失败的数据；"></a>1、all是将多个promise实例结合成一个新的promise，也就是全部成功执行才返回所有的成功执行数据，有一个失败则返回执行失败的数据；</h2><h2 id="2、race也是将多个promise实例结合成一个新的promise，但是返回的是第一个执行完的promise，无论是成功与否。"><a href="#2、race也是将多个promise实例结合成一个新的promise，但是返回的是第一个执行完的promise，无论是成功与否。" class="headerlink" title="2、race也是将多个promise实例结合成一个新的promise，但是返回的是第一个执行完的promise，无论是成功与否。"></a>2、race也是将多个promise实例结合成一个新的promise，但是返回的是第一个执行完的promise，无论是成功与否。</h2>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>proxy和defineProperty</title>
      <link href="/posts/17ba.html"/>
      <url>/posts/17ba.html</url>
      
        <content type="html"><![CDATA[<h2 id="学习链接-https-blog-csdn-net-weixin-43443341-article-details-124041094"><a href="#学习链接-https-blog-csdn-net-weixin-43443341-article-details-124041094" class="headerlink" title="学习链接: https://blog.csdn.net/weixin_43443341/article/details/124041094"></a>学习链接: <a href="https://blog.csdn.net/weixin_43443341/article/details/124041094">https://blog.csdn.net/weixin_43443341/article/details/124041094</a></h2><h1 id="最大的不同点就是监听方式"><a href="#最大的不同点就是监听方式" class="headerlink" title="最大的不同点就是监听方式"></a>最大的不同点就是监听方式</h1><p>defineProperty是对监听对象进行数据劫持<br>proxy就是代理监听对象<br>字面意思就已经可以看出差别，前者直接监听、后者加了个中间件<br>defineProperty只能对单个属性进行监听，而proxy可以整个对象进行监听</p><h1 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h1><p>嵌套数据的情况下，改变数值，都不会触发相对应的set</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>this指向</title>
      <link href="/posts/8f9b.html"/>
      <url>/posts/8f9b.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-方法中的this"><a href="#1-方法中的this" class="headerlink" title="1.方法中的this"></a>1.方法中的this</h1><p>在对象方法中，this指的是此方法的“拥有者”。<br>this代表person对象</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">           <span class="attr">firstName</span>:<span class="string">&quot;Bill&quot;</span>,</span><br><span class="line">           <span class="attr">lastName</span>:<span class="string">&quot;Gates&quot;</span>,</span><br><span class="line">           <span class="attr">id</span>:<span class="number">678</span>,</span><br><span class="line">           <span class="attr">fullName</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&quot; &quot;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;;</span><br></pre></td></tr></table></figure><h1 id="2-单独的this"><a href="#2-单独的this" class="headerlink" title="2.单独的this"></a>2.单独的this</h1><h2 id="1-在单独使用时，拥有者是全局对象，this指的是全局对象"><a href="#1-在单独使用时，拥有者是全局对象，this指的是全局对象" class="headerlink" title="(1)在单独使用时，拥有者是全局对象，this指的是全局对象"></a>(1)在单独使用时，拥有者是全局对象，this指的是全局对象</h2><p>在浏览器窗口中，全局对象是[object Window]:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="variable language_">this</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;demo&quot;</span>).<span class="property">innerHTML</span> = x;</span><br></pre></td></tr></table></figure><h2 id="2-在严格模式中，如果单独使用，那么this指的是全局对象-object-Window"><a href="#2-在严格模式中，如果单独使用，那么this指的是全局对象-object-Window" class="headerlink" title="(2)在严格模式中，如果单独使用，那么this指的是全局对象[object Window]:"></a>(2)在严格模式中，如果单独使用，那么this指的是全局对象[object Window]:</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> x = <span class="variable language_">this</span>;</span><br></pre></td></tr></table></figure><h1 id="3-函数中的this（默认）"><a href="#3-函数中的this（默认）" class="headerlink" title="3.函数中的this（默认）"></a>3.函数中的this（默认）</h1><h1 id="在js函数中，函数的拥有者默认绑定this-因此，在函数中，this指的是全局对象-object-Window-4-函数中的this（严格模式）"><a href="#在js函数中，函数的拥有者默认绑定this-因此，在函数中，this指的是全局对象-object-Window-4-函数中的this（严格模式）" class="headerlink" title="在js函数中，函数的拥有者默认绑定this.因此，在函数中，this指的是全局对象[object Window]4.函数中的this（严格模式）"></a>在js函数中，函数的拥有者默认绑定this.<br>因此，在函数中，this指的是全局对象[object Window]<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><br>4.函数中的this（严格模式）</h1><p>js严格模式不允许默认绑定，因此，在函数中使用时，在严格模式下，this是未定义的undefined</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">“use strict”;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-事件处理程序中的this"><a href="#5-事件处理程序中的this" class="headerlink" title="5.事件处理程序中的this"></a>5.事件处理程序中的this</h1><p>this指的是html元素，如下面例子中，this指的是button</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;button onclick = <span class="string">&quot;this.style.display=&#x27;none&#x27;&quot;</span>&gt;</span><br><span class="line">     点击来删除我！</span><br><span class="line">&lt;/button&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>typeof</title>
      <link href="/posts/7b30.html"/>
      <url>/posts/7b30.html</url>
      
        <content type="html"><![CDATA[<p><img src="/images/js/typeof.png"></p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>undefined 和 is not defined</title>
      <link href="/posts/dfde.html"/>
      <url>/posts/dfde.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> &lt;script&gt;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="string">&quot;a&quot;</span> <span class="keyword">in</span> <span class="variable language_">window</span>) &#123;</span><br><span class="line">            <span class="comment">// 全局变量，变量提升，但是只是定义了，并没有赋值</span></span><br><span class="line">            <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="string">&quot;b&quot;</span> <span class="keyword">in</span> <span class="variable language_">window</span>) &#123;</span><br><span class="line">            <span class="comment">// 局部变量，外部不能访问</span></span><br><span class="line">            <span class="keyword">let</span> b = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">//undefined  原因是声明了但没有引用</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">//报错  b is not defined   原因是没有声明这个b</span></span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>with创建作用域会抛到全局作用域</title>
      <link href="/posts/b943.html"/>
      <url>/posts/b943.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">change</span>(<span class="params">obj</span>) &#123;</span><br><span class="line"><span class="title function_">with</span>(<span class="params">obj</span>) &#123;    </span><br><span class="line">color = <span class="string">&#x27;red&#x27;</span>  </span><br><span class="line">&#125;&#125;</span><br><span class="line"><span class="keyword">var</span> </span><br><span class="line">box = &#123;  </span><br><span class="line"><span class="attr">size</span>: </span><br><span class="line"><span class="string">&#x27;15*15&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">change</span>(box);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(color);</span><br></pre></td></tr></table></figure><h1 id="with会创建一个新的作用域，将里面声明的变量抛到全局作用域中"><a href="#with会创建一个新的作用域，将里面声明的变量抛到全局作用域中" class="headerlink" title="with会创建一个新的作用域，将里面声明的变量抛到全局作用域中"></a>with会创建一个新的作用域，将里面声明的变量抛到全局作用域中</h1>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>传输数据安全</title>
      <link href="/posts/298e.html"/>
      <url>/posts/298e.html</url>
      
        <content type="html"><![CDATA[<h2 id="1、表单数据加密，通过md5或者base64"><a href="#1、表单数据加密，通过md5或者base64" class="headerlink" title="1、表单数据加密，通过md5或者base64"></a><strong>1、表单数据加密，通过md5或者base64</strong></h2><h2 id="2、表单数据校验，防止sql注入"><a href="#2、表单数据校验，防止sql注入" class="headerlink" title="2、表单数据校验，防止sql注入"></a><strong>2、表单数据校验，防止sql注入</strong></h2><h2 id="3、访问需要授权的-API-，必须在请求头中使用-Authorization-字段提供-token-令牌，才能返回真实数据代码实现过程"><a href="#3、访问需要授权的-API-，必须在请求头中使用-Authorization-字段提供-token-令牌，才能返回真实数据代码实现过程" class="headerlink" title="3、访问需要授权的 API ，必须在请求头中使用 Authorization 字段提供 token 令牌，才能返回真实数据代码实现过程"></a><strong>3、访问需要授权的 API ，必须在请求头中使用 Authorization 字段提供 token 令牌，才能返回真实数据代码实现过程</strong></h2><p>在main.js中添加</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import axios from &#x27;axios&#x27;</span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F; 设置请求的根路径</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">axios.defaults.baseURL = &#x27;http://127.0.0.1:8888/api/private/v1/&#x27;</span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F; axios 请求拦截，为请求头，添加token验证的Authorization字段<br>&#x2F;&#x2F; 拦截原因：需要授权的 API ，必须在请求头中使用 Authorization 字段提供 token 令牌，才能返回数据</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">axios.interceptors.request.use(config =&gt; &#123;</span><br><span class="line">  config.headers.Authorization = window.sessionStorage.getItem(&#x27;token&#x27;)</span><br><span class="line">  // 必须有return</span><br><span class="line">  return config</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>函数中的argument对象</title>
      <link href="/posts/8248.html"/>
      <url>/posts/8248.html</url>
      
        <content type="html"><![CDATA[<p><img src="/images/js/%E5%87%BD%E6%95%B0%E4%B8%ADargument%E5%AF%B9%E8%B1%A1.png"></p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>自执行函数的坑</title>
      <link href="/posts/87fe.html"/>
      <url>/posts/87fe.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">fn1</span>=(<span class="params">a,b</span>)=&gt;&#123;</span><br><span class="line"><span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="title function_">fn2</span>=(<span class="params">a,b</span>)=&gt; a+b;</span><br></pre></td></tr></table></figure><h1 id="不写-括号的时候，不用写return；因为已经是隐藏了return了；"><a href="#不写-括号的时候，不用写return；因为已经是隐藏了return了；" class="headerlink" title="不写{}括号的时候，不用写return；因为已经是隐藏了return了；"></a>不写{}括号的时候，不用写return；因为已经是隐藏了return了；</h1>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>观察者模式</title>
      <link href="/posts/1e3a.html"/>
      <url>/posts/1e3a.html</url>
      
        <content type="html"><![CDATA[<h2 id="观察者-Observer（A）-被观察Object（B）观察者通过订阅被观察者的状态，一旦被观察者的状态发生改变，那么就通知观察者进行观察的状态改变。实现思路：B中设置状态，设置更改状态的方法，设置将A放到B身上；A中设置观察B状态的方法；B中触发更改状态的方法，就触发A中观察B状态的方法；"><a href="#观察者-Observer（A）-被观察Object（B）观察者通过订阅被观察者的状态，一旦被观察者的状态发生改变，那么就通知观察者进行观察的状态改变。实现思路：B中设置状态，设置更改状态的方法，设置将A放到B身上；A中设置观察B状态的方法；B中触发更改状态的方法，就触发A中观察B状态的方法；" class="headerlink" title="观察者 Observer（A） 被观察Object（B）观察者通过订阅被观察者的状态，一旦被观察者的状态发生改变，那么就通知观察者进行观察的状态改变。实现思路：B中设置状态，设置更改状态的方法，设置将A放到B身上；A中设置观察B状态的方法；B中触发更改状态的方法，就触发A中观察B状态的方法；"></a>观察者 Observer（A） 被观察Object（B）<br>观察者通过订阅被观察者的状态，一旦被观察者的状态发生改变，那么就通知观察者进行观察的状态改变。<br>实现思路：<br>B中设置状态，设置更改状态的方法，设置将A放到B身上；<br>A中设置观察B状态的方法；<br>B中触发更改状态的方法，就触发A中观察B状态的方法；</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">class</span> <span class="title class_">Subject</span>&#123;</span><br><span class="line">            <span class="title function_">constructor</span> (name)&#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">name</span>=name</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">state</span>=<span class="string">&#x27;开心&#x27;</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">Observers</span>=[]</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 需要将观察者放到自己身上</span></span><br><span class="line">            <span class="title function_">attach</span>(<span class="params">ther</span>)&#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">Observers</span>.<span class="title function_">push</span>(ther);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 更新观察者状态</span></span><br><span class="line">            <span class="title function_">setState</span>(<span class="params">state</span>)&#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">state</span>=state;</span><br><span class="line">                <span class="comment">// 循环取出每个观察者</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">Observers</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">ther</span>=&gt;</span>&#123;</span><br><span class="line">                    ther.<span class="title function_">update</span>(<span class="variable language_">this</span>)</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 观察者</span></span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">Observer</span>&#123;</span><br><span class="line">            <span class="title function_">constructor</span>(<span class="params">name</span>)&#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">name</span>=name</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 观察小宝宝的状态</span></span><br><span class="line">            <span class="title function_">update</span>(<span class="params">subject</span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>+<span class="string">&#x27;:&#x27;</span>+subject.<span class="property">name</span>+<span class="string">&#x27;当前状态：&#x27;</span>+subject.<span class="property">state</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> baby=<span class="keyword">new</span> <span class="title class_">Subject</span>(<span class="string">&#x27;小宝宝&#x27;</span>);</span><br><span class="line">        <span class="keyword">let</span> father=<span class="keyword">new</span> <span class="title class_">Observer</span>(<span class="string">&#x27;爸爸&#x27;</span>);</span><br><span class="line">        <span class="keyword">let</span> mather=<span class="keyword">new</span> <span class="title class_">Observer</span>(<span class="string">&#x27;妈妈&#x27;</span>);</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        baby.<span class="title function_">attach</span>(father);</span><br><span class="line">        baby.<span class="title function_">attach</span>(mather);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        baby.<span class="title function_">setState</span>(<span class="string">&#x27;不开心&#x27;</span>);</span><br><span class="line">        baby.<span class="title function_">setState</span>(<span class="string">&#x27;非常开心&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>闭包</title>
      <link href="/posts/1cf7.html"/>
      <url>/posts/1cf7.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">bibao</span>(<span class="params">value</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">object1,object2</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> obj1=object1[value];</span><br><span class="line">        <span class="keyword">var</span> obj2=object2[value];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="原理解析"><a href="#原理解析" class="headerlink" title="原理解析:"></a>原理解析:</h1><p><strong>函数执行的时候会生成相对应的作用域(bibao)，这个作用域链首先会链接到自身的活动对象(bibao)，然后使全局变量对象。这个时候包含函数内的匿名函数，会生成三个作用域，分别是自身的活动对象(匿名函数的活动对象)，包含函数的活动对象(bibao)，全局变量对象。</strong></p><p>闭包简单来说就是将一个函数的作用进行扩展，在js的常规作用域中，函数内部的作用域不能被函数外部的调用，通过闭包就可以解决这个问题。<br><strong>优点:</strong><br>函数的作用域扩展<br>函数作用域内部不会进行销毁，这是由于js垃圾回收机制决定的，被引用的函数或者变量不进行销毁<br><strong>缺点：</strong><br>由于函数作用域内部不会被销毁，这也就导致了如果大量使用这个闭包的话，就会导致内存泄露</p><p><strong>实际应用：防抖、节流、柯里化</strong></p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>webpack-01下载</title>
      <link href="/posts/baaf.html"/>
      <url>/posts/baaf.html</url>
      
        <content type="html"><![CDATA[<h1 id="1、下载webpack"><a href="#1、下载webpack" class="headerlink" title="1、下载webpack"></a>1、下载webpack</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i webpack webpack-cli -D</span><br></pre></td></tr></table></figure><h1 id="2、在项目的根目录下创建webpack-config-js"><a href="#2、在项目的根目录下创建webpack-config-js" class="headerlink" title="2、在项目的根目录下创建webpack.config.js"></a>2、在项目的根目录下创建webpack.config.js</h1><h1 id="3、在webpack-config-js进行配置"><a href="#3、在webpack-config-js进行配置" class="headerlink" title="3、在webpack.config.js进行配置"></a>3、在webpack.config.js进行配置</h1>]]></content>
      
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>webpack-02配置</title>
      <link href="/posts/2481.html"/>
      <url>/posts/2481.html</url>
      
        <content type="html"><![CDATA[<h1 id="1、入口文件entry"><a href="#1、入口文件entry" class="headerlink" title="1、入口文件entry"></a>1、入口文件entry</h1><h1 id="2、输出output"><a href="#2、输出output" class="headerlink" title="2、输出output"></a>2、输出output</h1><h1 id="3、加载器module"><a href="#3、加载器module" class="headerlink" title="3、加载器module"></a>3、加载器module</h1><h1 id="4、插件plugins"><a href="#4、插件plugins" class="headerlink" title="4、插件plugins"></a>4、插件plugins</h1><h1 id="5、mode模式"><a href="#5、mode模式" class="headerlink" title="5、mode模式"></a>5、mode模式</h1><h1 id="6、devServer开发模式专用的一个api"><a href="#6、devServer开发模式专用的一个api" class="headerlink" title="6、devServer开发模式专用的一个api"></a>6、devServer开发模式专用的一个api</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path=<span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> =&#123;</span><br><span class="line">    <span class="comment">//入口</span></span><br><span class="line">    <span class="attr">entry</span>:<span class="string">&quot;./src/main.js&quot;</span>,</span><br><span class="line">   </span><br><span class="line">    <span class="comment">//输出</span></span><br><span class="line">    <span class="attr">output</span>:&#123;</span><br><span class="line">        <span class="comment">//文件的输出路径</span></span><br><span class="line">        <span class="attr">path</span>:path.<span class="title function_">resolve</span>(__dirname,<span class="string">&#x27;dist&#x27;</span>),<span class="comment">//绝对路径</span></span><br><span class="line">        <span class="attr">filename</span>:<span class="string">&quot;main.js&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//加载器</span></span><br><span class="line">    <span class="attr">module</span>:&#123;</span><br><span class="line">        <span class="attr">rules</span>:[</span><br><span class="line">            <span class="comment">//loader的配置</span></span><br><span class="line">            &#123; <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, </span><br><span class="line">            <span class="attr">use</span>: [<span class="string">&#x27;style-loader&#x27;</span>,<span class="string">&#x27;css-loader&#x27;</span>]<span class="comment">//将css资源编译成commonjs的模块到js中</span></span><br><span class="line">        &#125;,</span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//插件</span></span><br><span class="line">    <span class="attr">plugins</span>:[</span><br><span class="line">        <span class="comment">//plugin的配置</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">//模式</span></span><br><span class="line">    <span class="attr">mode</span>:<span class="string">&#x27;development&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>webpack-03图片</title>
      <link href="/posts/70e1.html"/>
      <url>/posts/70e1.html</url>
      
        <content type="html"><![CDATA[<h1 id="在webpack-config-js中的加载器配置"><a href="#在webpack-config-js中的加载器配置" class="headerlink" title="在webpack.config.js中的加载器配置"></a>在webpack.config.js中的加载器配置</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//加载器</span></span><br><span class="line">    <span class="attr">module</span>:&#123;</span><br><span class="line">        <span class="attr">rules</span>:[</span><br><span class="line">            <span class="comment">//loader的配置</span></span><br><span class="line">            &#123; <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, </span><br><span class="line">            <span class="attr">use</span>: [<span class="string">&#x27;style-loader&#x27;</span>,<span class="string">&#x27;css-loader&#x27;</span>]<span class="comment">//将css资源编译成commonjs的模块到js中</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;   <span class="attr">test</span>:<span class="regexp">/\.(png|jpe?g|gif|webp|svg)$/</span>,</span><br><span class="line">            <span class="attr">type</span>:<span class="string">&#x27;asset&#x27;</span>,</span><br><span class="line">            <span class="attr">parser</span>: &#123;</span><br><span class="line">                <span class="attr">dataUrlCondition</span>: &#123;</span><br><span class="line">                    <span class="comment">//小于10kb的图片转base64</span></span><br><span class="line">                    <span class="comment">//优点:减少请求数量,缺点:体积增加</span></span><br><span class="line">                  <span class="attr">maxSize</span>: <span class="number">10</span> * <span class="number">1024</span> <span class="comment">// 4kb</span></span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>webpack-05处理html资源</title>
      <link href="/posts/ddd1.html"/>
      <url>/posts/ddd1.html</url>
      
        <content type="html"><![CDATA[<h1 id="1、下载"><a href="#1、下载" class="headerlink" title="1、下载"></a>1、下载</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save-dev html-webpack-plugin</span><br></pre></td></tr></table></figure><h1 id="2、引入"><a href="#2、引入" class="headerlink" title="2、引入"></a>2、引入</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;index.js&#x27;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;./dist&#x27;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;index_bundle.js&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>()],  <span class="comment">//这里是关键</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>webpack-04自动清空上次打包内容</title>
      <link href="/posts/eaeb.html"/>
      <url>/posts/eaeb.html</url>
      
        <content type="html"><![CDATA[<h1 id="在output中加入"><a href="#在output中加入" class="headerlink" title="在output中加入:"></a>在output中加入:</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">clean:true,</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>webpack-06webpack自动化</title>
      <link href="/posts/9543.html"/>
      <url>/posts/9543.html</url>
      
        <content type="html"><![CDATA[<h1 id="1、下载测试"><a href="#1、下载测试" class="headerlink" title="1、下载测试"></a>1、下载测试</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i webpack-dev-server -D</span><br></pre></td></tr></table></figure><h1 id="2、webpack-config-js进行配置"><a href="#2、webpack-config-js进行配置" class="headerlink" title="2、webpack.config.js进行配置"></a>2、webpack.config.js进行配置</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//开发服务器</span><br><span class="line">    devServer:&#123;</span><br><span class="line">        host:&#x27;localhost&#x27;,</span><br><span class="line">        port:&#x27;3000&#x27;,</span><br><span class="line">        open:true,</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><h1 id="3、启动"><a href="#3、启动" class="headerlink" title="3、启动"></a>3、启动</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npx webpack server</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>webpack-07生产模式以及开发模式</title>
      <link href="/posts/cae5.html"/>
      <url>/posts/cae5.html</url>
      
        <content type="html"><![CDATA[<h1 id="生产模式"><a href="#生产模式" class="headerlink" title="生产模式"></a>生产模式</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npx webpack --config ./config/webpack.prod.js</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path=<span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> =&#123;</span><br><span class="line">    <span class="comment">//入口</span></span><br><span class="line">    <span class="attr">entry</span>:<span class="string">&quot;./src/main.js&quot;</span>,</span><br><span class="line">   </span><br><span class="line">    <span class="comment">//输出</span></span><br><span class="line">    <span class="attr">output</span>:&#123;</span><br><span class="line">        <span class="comment">//所有文件的输出路径</span></span><br><span class="line">        <span class="comment">//__dirname nodejs变量，代表当前文件的文件夹目录</span></span><br><span class="line">        <span class="attr">path</span>:path.<span class="title function_">resolve</span>(__dirname,<span class="string">&#x27;../dist&#x27;</span>),<span class="comment">//绝对路径</span></span><br><span class="line">        <span class="comment">//文件名</span></span><br><span class="line">        <span class="attr">filename</span>:<span class="string">&quot;static/js/main.js&quot;</span>,</span><br><span class="line">        <span class="comment">//自动清空上次打包的内容（原理就是将dist整个目录进行清空在进行打包）</span></span><br><span class="line">        <span class="attr">clean</span>:<span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//加载器</span></span><br><span class="line">    <span class="attr">module</span>:&#123;</span><br><span class="line">        <span class="attr">rules</span>:[</span><br><span class="line">            <span class="comment">//loader的配置</span></span><br><span class="line">            &#123; <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, </span><br><span class="line">            <span class="attr">use</span>: [<span class="string">&#x27;style-loader&#x27;</span>,<span class="string">&#x27;css-loader&#x27;</span>]<span class="comment">//将css资源编译成commonjs的模块到js中</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;   <span class="attr">test</span>:<span class="regexp">/\.(png|jpe?g|gif|webp|svg)$/</span>,</span><br><span class="line">            <span class="attr">type</span>:<span class="string">&#x27;asset&#x27;</span>,</span><br><span class="line">            <span class="attr">parser</span>: &#123;</span><br><span class="line">                <span class="attr">dataUrlCondition</span>: &#123;</span><br><span class="line">                    <span class="comment">//小于10kb的图片转base64</span></span><br><span class="line">                    <span class="comment">//优点:减少请求数量,缺点:体积增加</span></span><br><span class="line">                  <span class="attr">maxSize</span>: <span class="number">10</span> * <span class="number">1024</span> <span class="comment">// 4kb</span></span><br><span class="line">                &#125;</span><br><span class="line">              &#125;,</span><br><span class="line">              <span class="attr">generator</span>:&#123;</span><br><span class="line">                <span class="attr">filename</span>:<span class="string">&#x27;static/images/[hash:10][ext][query]&#x27;</span></span><br><span class="line">              &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;   <span class="attr">test</span>:<span class="regexp">/\.(ttf|woff2|mp3|avi)$/</span>,</span><br><span class="line">            <span class="attr">type</span>:<span class="string">&#x27;asset/resource&#x27;</span>,</span><br><span class="line">              <span class="attr">generator</span>:&#123;</span><br><span class="line">                <span class="attr">filename</span>:<span class="string">&#x27;static/media/[hash:10][ext][query]&#x27;</span></span><br><span class="line">              &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//插件</span></span><br><span class="line">    <span class="attr">plugins</span>:[</span><br><span class="line">        <span class="comment">//plugin的配置</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="comment">//模板:以public/index.html文件创建新的html文件</span></span><br><span class="line">            <span class="comment">//新的文件特点:1、结构和原来一致 2、自动引入打包的资源</span></span><br><span class="line">            <span class="attr">template</span>:path.<span class="title function_">resolve</span>(__dirname,<span class="string">&quot;../public/index.html&quot;</span>),</span><br><span class="line">        &#125;   </span><br><span class="line">        ),</span><br><span class="line">    ],</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//模式</span></span><br><span class="line">    <span class="attr">mode</span>:<span class="string">&quot;production&quot;</span>,</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="开发模式"><a href="#开发模式" class="headerlink" title="开发模式"></a>开发模式</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npx webpack serve --config ./config/webpack.dev.js</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path=<span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> =&#123;</span><br><span class="line">    <span class="comment">//入口</span></span><br><span class="line">    <span class="attr">entry</span>:<span class="string">&quot;./src/main.js&quot;</span>,</span><br><span class="line">   </span><br><span class="line">    <span class="comment">//输出</span></span><br><span class="line">    <span class="attr">output</span>:&#123;</span><br><span class="line">        <span class="comment">//所有文件的输出路径</span></span><br><span class="line">        <span class="comment">//开发环境没有输出</span></span><br><span class="line">        <span class="attr">path</span>:<span class="literal">undefined</span>,<span class="comment">//绝对路径</span></span><br><span class="line">        <span class="comment">//文件名</span></span><br><span class="line">        <span class="attr">filename</span>:<span class="string">&quot;static/js/main.js&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//加载器</span></span><br><span class="line">    <span class="attr">module</span>:&#123;</span><br><span class="line">        <span class="attr">rules</span>:[</span><br><span class="line">            <span class="comment">//loader的配置</span></span><br><span class="line">            &#123; <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, </span><br><span class="line">            <span class="attr">use</span>: [<span class="string">&#x27;style-loader&#x27;</span>,<span class="string">&#x27;css-loader&#x27;</span>]<span class="comment">//将css资源编译成commonjs的模块到js中</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;   <span class="attr">test</span>:<span class="regexp">/\.(png|jpe?g|gif|webp|svg)$/</span>,</span><br><span class="line">            <span class="attr">type</span>:<span class="string">&#x27;asset&#x27;</span>,</span><br><span class="line">            <span class="attr">parser</span>: &#123;</span><br><span class="line">                <span class="attr">dataUrlCondition</span>: &#123;</span><br><span class="line">                    <span class="comment">//小于10kb的图片转base64</span></span><br><span class="line">                    <span class="comment">//优点:减少请求数量,缺点:体积增加</span></span><br><span class="line">                  <span class="attr">maxSize</span>: <span class="number">10</span> * <span class="number">1024</span> <span class="comment">// 4kb</span></span><br><span class="line">                &#125;</span><br><span class="line">              &#125;,</span><br><span class="line">              <span class="attr">generator</span>:&#123;</span><br><span class="line">                <span class="attr">filename</span>:<span class="string">&#x27;static/images/[hash:10][ext][query]&#x27;</span></span><br><span class="line">              &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;   <span class="attr">test</span>:<span class="regexp">/\.(ttf|woff2|mp3|avi)$/</span>,</span><br><span class="line">            <span class="attr">type</span>:<span class="string">&#x27;asset/resource&#x27;</span>,</span><br><span class="line">              <span class="attr">generator</span>:&#123;</span><br><span class="line">                <span class="attr">filename</span>:<span class="string">&#x27;static/media/[hash:10][ext][query]&#x27;</span></span><br><span class="line">              &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//插件</span></span><br><span class="line">    <span class="attr">plugins</span>:[</span><br><span class="line">        <span class="comment">//plugin的配置</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="comment">//模板:以public/index.html文件创建新的html文件</span></span><br><span class="line">            <span class="comment">//新的文件特点:1、结构和原来一致 2、自动引入打包的资源</span></span><br><span class="line">            <span class="attr">template</span>:path.<span class="title function_">resolve</span>(__dirname,<span class="string">&quot;../public/index.html&quot;</span>),</span><br><span class="line">        &#125;   </span><br><span class="line">        ),</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">//开发服务器,不会输出资源，在内存中编译打包的</span></span><br><span class="line">    <span class="attr">devServer</span>:&#123;</span><br><span class="line">        <span class="attr">host</span>:<span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">        <span class="attr">port</span>:<span class="string">&#x27;3000&#x27;</span>,</span><br><span class="line">        <span class="attr">open</span>:<span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//模式</span></span><br><span class="line">    <span class="attr">mode</span>:<span class="string">&#x27;development&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="其中的区别："><a href="#其中的区别：" class="headerlink" title="其中的区别："></a>其中的区别：</h1><h2 id="1、开发没有输出，也就是output里面的path设置成undefined"><a href="#1、开发没有输出，也就是output里面的path设置成undefined" class="headerlink" title="1、开发没有输出，也就是output里面的path设置成undefined"></a>1、开发没有输出，也就是output里面的path设置成undefined</h2><h2 id="2、开发者有开发服务器devServer"><a href="#2、开发者有开发服务器devServer" class="headerlink" title="2、开发者有开发服务器devServer{}"></a>2、开发者有开发服务器devServer{}</h2><h2 id="3、开发者的mode是development，生产者是production"><a href="#3、开发者的mode是development，生产者是production" class="headerlink" title="3、开发者的mode是development，生产者是production"></a>3、开发者的mode是development，生产者是production</h2>]]></content>
      
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>webpack-08启动命令优化</title>
      <link href="/posts/340b.html"/>
      <url>/posts/340b.html</url>
      
        <content type="html"><![CDATA[<h1 id="1、在package-json中"><a href="#1、在package-json中" class="headerlink" title="1、在package.json中"></a>1、在package.json中</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;start&quot;</span>:<span class="string">&quot;npm run dev&quot;</span>,</span><br><span class="line">    <span class="string">&quot;dev&quot;</span>:<span class="string">&quot;webpack serve --config ./config/webpack.dev.js&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build&quot;</span>:<span class="string">&quot;webpack --config ./config/webpack.prod.js&quot;</span>,</span><br><span class="line">    <span class="string">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p><strong>“dev”  对应的webpack.dev.config文件npm run dev</strong></p><p><strong>“build”对应的webpack.prod.config文件npm run build</strong></p><p><strong>“start”运行上面的自定义指令”dev”         npm start(也就是npm run dev 等价于 npm start )</strong></p>]]></content>
      
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MVC、MVP、MVVM</title>
      <link href="/posts/720d.html"/>
      <url>/posts/720d.html</url>
      
        <content type="html"><![CDATA[<h1 id="MVC：逻辑上就是当用户进行数据交互的时候，C负责唤醒M进行数据交互，M数据交互完成之后唤醒V进行页面刷新"><a href="#MVC：逻辑上就是当用户进行数据交互的时候，C负责唤醒M进行数据交互，M数据交互完成之后唤醒V进行页面刷新" class="headerlink" title="MVC：逻辑上就是当用户进行数据交互的时候，C负责唤醒M进行数据交互，M数据交互完成之后唤醒V进行页面刷新"></a>MVC：逻辑上就是当用户进行数据交互的时候，C负责唤醒M进行数据交互，M数据交互完成之后唤醒V进行页面刷新</h1><h1 id="MVP：和MVC类似，但是在P中实现了将V和M进行耦合，也就是不像MVC那样只能由C控制M，P能够实现P控制M和V"><a href="#MVP：和MVC类似，但是在P中实现了将V和M进行耦合，也就是不像MVC那样只能由C控制M，P能够实现P控制M和V" class="headerlink" title="MVP：和MVC类似，但是在P中实现了将V和M进行耦合，也就是不像MVC那样只能由C控制M，P能够实现P控制M和V"></a>MVP：和MVC类似，但是在P中实现了将V和M进行耦合，也就是不像MVC那样只能由C控制M，P能够实现P控制M和V</h1><h1 id="MVVM：逻辑上也是和MVP差不多，但是VM之间并没有直接的联系，而是通过VM来进行联系的，VM和M之间双向数据绑定，当M发生数据改变的时候，V也就跟随这刷新。主要实现了M和V的数据自动同步"><a href="#MVVM：逻辑上也是和MVP差不多，但是VM之间并没有直接的联系，而是通过VM来进行联系的，VM和M之间双向数据绑定，当M发生数据改变的时候，V也就跟随这刷新。主要实现了M和V的数据自动同步" class="headerlink" title="MVVM：逻辑上也是和MVP差不多，但是VM之间并没有直接的联系，而是通过VM来进行联系的，VM和M之间双向数据绑定，当M发生数据改变的时候，V也就跟随这刷新。主要实现了M和V的数据自动同步"></a>MVVM：逻辑上也是和MVP差不多，但是VM之间并没有直接的联系，而是通过VM来进行联系的，VM和M之间双向数据绑定，当M发生数据改变的时候，V也就跟随这刷新。主要实现了M和V的数据自动同步</h1>]]></content>
      
      
      <categories>
          
          <category> basis </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>https与http的区别</title>
      <link href="/posts/3a66.html"/>
      <url>/posts/3a66.html</url>
      
        <content type="html"><![CDATA[<h2 id="https的特点"><a href="#https的特点" class="headerlink" title="https的特点:"></a>https的特点:</h2><p><img src="/images/js/https1.png"></p><h2 id="http传输的过程"><a href="#http传输的过程" class="headerlink" title="http传输的过程:"></a>http传输的过程:</h2><p><img src="/images/js/https2.png"></p><h2 id="https传输的过程"><a href="#https传输的过程" class="headerlink" title="https传输的过程:"></a>https传输的过程:</h2><p><img src="/images/js/https3.png"></p><h2 id="主要的区别就是在应用层和传输层中间加了一个安全层，这个安全层的主要负责人是CA机构。采用了CA机构颁发的CA证书，主要就是在数据传输过程规定了公钥以及私钥（通过数字签名），通过CA根证书判断签名的信息以及公钥的所有者。"><a href="#主要的区别就是在应用层和传输层中间加了一个安全层，这个安全层的主要负责人是CA机构。采用了CA机构颁发的CA证书，主要就是在数据传输过程规定了公钥以及私钥（通过数字签名），通过CA根证书判断签名的信息以及公钥的所有者。" class="headerlink" title="主要的区别就是在应用层和传输层中间加了一个安全层，这个安全层的主要负责人是CA机构。采用了CA机构颁发的CA证书，主要就是在数据传输过程规定了公钥以及私钥（通过数字签名），通过CA根证书判断签名的信息以及公钥的所有者。"></a>主要的区别就是在应用层和传输层中间加了一个安全层，这个安全层的主要负责人是CA机构。采用了CA机构颁发的CA证书，主要就是在数据传输过程规定了公钥以及私钥（通过数字签名），通过CA根证书判断签名的信息以及公钥的所有者。</h2><p><img src="/images/js/https4.png"></p>]]></content>
      
      
      <categories>
          
          <category> basis </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>项目性能优化</title>
      <link href="/posts/1656.html"/>
      <url>/posts/1656.html</url>
      
        <content type="html"><![CDATA[<p><img src="/images/basis/%E9%A1%B9%E7%9B%AE%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> basis </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>call、apply、bind的实现</title>
      <link href="/posts/3229.html"/>
      <url>/posts/3229.html</url>
      
        <content type="html"><![CDATA[<h1 id="1、call"><a href="#1、call" class="headerlink" title="1、call"></a>1、call</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title class_">Person</span>=<span class="keyword">function</span>(<span class="params">...args</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(...args);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> stu=&#123;<span class="attr">name</span>:<span class="string">&#x27;测试&#x27;</span>&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">newCall</span>=<span class="keyword">function</span>(<span class="params">obj,...args</span>)&#123;</span><br><span class="line">            obj.<span class="property">fn</span>=<span class="variable language_">this</span>;</span><br><span class="line">            <span class="keyword">const</span> result=obj.<span class="title function_">fn</span>(...args);</span><br><span class="line">            <span class="keyword">delete</span> obj.<span class="property">fn</span>;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125; </span><br><span class="line">       <span class="title class_">Person</span>.<span class="title function_">newCall</span>(stu,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure><h1 id="2、apply"><a href="#2、apply" class="headerlink" title="2、apply"></a>2、apply</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">newApply</span>=<span class="keyword">function</span>(<span class="params">obj,args</span>)&#123;</span><br><span class="line">        obj.<span class="property">fn</span>=<span class="variable language_">this</span>;</span><br><span class="line">        <span class="keyword">const</span> res=obj.<span class="title function_">fn</span>(...args);</span><br><span class="line">        <span class="keyword">delete</span> obj.<span class="property">fn</span>;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">     </span><br><span class="line"></span><br><span class="line">       <span class="keyword">let</span> <span class="title class_">Person11</span>=<span class="keyword">function</span>(<span class="params">...args</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(...args);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">let</span> stu2=&#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;测试2&#x27;</span></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="title class_">Person11</span>.<span class="title function_">newApply</span>(stu2,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br></pre></td></tr></table></figure><h1 id="3、bind"><a href="#3、bind" class="headerlink" title="3、bind"></a>3、bind</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">newBind</span>=<span class="keyword">function</span>(<span class="params">obj,...args</span>)&#123;</span><br><span class="line"> <span class="keyword">const</span> f=<span class="variable language_">this</span>;</span><br><span class="line"> <span class="keyword">return</span> f.<span class="title function_">apply</span>(obj,[...args,...<span class="variable language_">arguments</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Person3</span>=<span class="keyword">function</span>(<span class="params">...args</span>)&#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(...args);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> stu3=&#123;</span><br><span class="line"> <span class="attr">name</span>:<span class="string">&quot;测试3&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Person3</span>.<span class="title function_">newBind</span>(stu3,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>下拉刷新</title>
      <link href="/posts/9c94.html"/>
      <url>/posts/9c94.html</url>
      
        <content type="html"><![CDATA[<p><img src="/images/js/%E4%B8%8B%E6%8B%89%E5%88%B7%E6%96%B0.jpg"></p><h1 id="clientHeight-scrollscrollHeight-gt-x3D-scrollHeight-distant-判定符合即可触发"><a href="#clientHeight-scrollscrollHeight-gt-x3D-scrollHeight-distant-判定符合即可触发" class="headerlink" title="clientHeight+scrollscrollHeight&gt;&#x3D;scrollHeight-distant     判定符合即可触发"></a>clientHeight+scrollscrollHeight&gt;&#x3D;scrollHeight-distant     判定符合即可触发</h1>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>尾递归</title>
      <link href="/posts/7e79.html"/>
      <url>/posts/7e79.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//递归老思路</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params">x</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(x===<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> x+ <span class="title function_">f1</span>(x-<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">f1</span>(<span class="number">5</span>)); </span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"><span class="comment">//中间加个处理变量即可，每次返回的参数不引用上次的参数</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">tailrecsum</span>(<span class="params">x, running_total = <span class="number">0</span></span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (x === <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> running_total;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="title function_">tailrecsum</span>(x - <span class="number">1</span>, running_total + x);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">tailrecsum</span>(<span class="number">5</span>)); </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>typescript 01什么是ts</title>
      <link href="/posts/2481.html"/>
      <url>/posts/2481.html</url>
      
        <content type="html"><![CDATA[<h1 id="ts就是js的一个扩展，对于一些大型项目，有利于开发和维护。举个例子，在js中声明一个变量，这个变量如果进行加减乘除的话，在不知道改变量的类型的情况下很容易会出错，ts就是将这个变量写死类型，防止后面出现更大的错误。还要函数的参数利用ts也可以将数据写死类型。"><a href="#ts就是js的一个扩展，对于一些大型项目，有利于开发和维护。举个例子，在js中声明一个变量，这个变量如果进行加减乘除的话，在不知道改变量的类型的情况下很容易会出错，ts就是将这个变量写死类型，防止后面出现更大的错误。还要函数的参数利用ts也可以将数据写死类型。" class="headerlink" title="ts就是js的一个扩展，对于一些大型项目，有利于开发和维护。举个例子，在js中声明一个变量，这个变量如果进行加减乘除的话，在不知道改变量的类型的情况下很容易会出错，ts就是将这个变量写死类型，防止后面出现更大的错误。还要函数的参数利用ts也可以将数据写死类型。"></a>ts就是js的一个扩展，对于一些大型项目，有利于开发和维护。举个例子，在js中声明一个变量，这个变量如果进行加减乘除的话，在不知道改变量的类型的情况下很容易会出错，ts就是将这个变量写死类型，防止后面出现更大的错误。还要函数的参数利用ts也可以将数据写死类型。</h1>]]></content>
      
      
      <categories>
          
          <category> typescript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>typescript 02搭建一个ts开发环境</title>
      <link href="/posts/6506.html"/>
      <url>/posts/6506.html</url>
      
        <content type="html"><![CDATA[<h2 id="下载命令"><a href="#下载命令" class="headerlink" title="下载命令:"></a>下载命令:</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i -g typescript</span><br></pre></td></tr></table></figure><p>检查：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tsc</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> typescript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>typescript 03ts类型声明</title>
      <link href="/posts/bc41.html"/>
      <url>/posts/bc41.html</url>
      
        <content type="html"><![CDATA[<h1 id="源代码："><a href="#源代码：" class="headerlink" title="源代码："></a>源代码：</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//申明一个变量a，同时指定它的类型为number</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: number;</span><br><span class="line"><span class="comment">// a=10;</span></span><br><span class="line"><span class="comment">// a=33;</span></span><br><span class="line"><span class="comment">// a=&#x27;hello&#x27;; 此行代码会报错，因为变量的类型是number，不能复制为字符串</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">b</span>:string;</span><br><span class="line"><span class="comment">// b=123;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// let c:boolean=true;</span></span><br><span class="line"><span class="comment">// 如果变量的声明和复制同时进行，ts可以自动对变量进行类型检测</span></span><br><span class="line"><span class="keyword">let</span> c=<span class="literal">true</span>;</span><br><span class="line"><span class="comment">// c=123;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// js中的函数是不考虑参数的类型和个数的</span></span><br><span class="line"><span class="comment">// function sum(a,b)&#123;</span></span><br><span class="line"><span class="comment">//     return a+b;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// console.log(sum(123,&#x27;456&#x27;));;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a:number,b:number</span>):number&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sum</span>(<span class="number">123</span>,<span class="number">456</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> typescript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>typescript 04类型声明_01</title>
      <link href="/posts/8a75.html"/>
      <url>/posts/8a75.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 也可以直接使用字面量进行类型声明</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">a</span>:<span class="number">10</span>;</span><br><span class="line">a=<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">b</span>:<span class="string">&#x27;male&#x27;</span>|<span class="string">&#x27;female&#x27;</span>;</span><br><span class="line">b=<span class="string">&#x27;male&#x27;</span>;</span><br><span class="line">b=<span class="string">&#x27;female&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">c</span>:boolean |string;</span><br><span class="line">c=<span class="literal">true</span>;</span><br><span class="line">c=<span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// any 表示的是任意类型，一个变量设置为any后相当于对该变量关闭了TS的类型检测</span></span><br><span class="line"><span class="comment">// 使用TS不建议使用any类型</span></span><br><span class="line"><span class="comment">// let d:any;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明变量如果不指定类型，则TS解析器会自动判断变量的类型为any(隐式的any)</span></span><br><span class="line"><span class="keyword">let</span> d;</span><br><span class="line"></span><br><span class="line">d=<span class="number">10</span>;</span><br><span class="line">d=<span class="string">&#x27;hellow&#x27;</span>;</span><br><span class="line">d=<span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// unknown表示位置类型的值</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">e</span>:unknown;</span><br><span class="line">e=<span class="number">10</span>;</span><br><span class="line">e=<span class="string">&#x27;hellow&#x27;</span>;</span><br><span class="line">e=<span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">s</span>:string;</span><br><span class="line"><span class="comment">// d的类型是any，它可以复制给任何变量，也就是any可以影响其它的变量</span></span><br><span class="line">s=d;</span><br><span class="line"></span><br><span class="line"><span class="comment">// unknown 实际上就是一个类型安全的any</span></span><br><span class="line"><span class="comment">// unknown类型的变量,不能直接复制给其它变量</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span> e===<span class="string">&#x27;string&#x27;</span>)&#123;</span><br><span class="line">    s=e;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 类型断言</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">变量as 类型</span></span><br><span class="line"><span class="comment">&lt;类型&gt; 变量</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">s=e <span class="keyword">as</span> string;</span><br><span class="line">s=&lt;string&gt;e;</span><br><span class="line"></span><br><span class="line"><span class="comment">// void用来表示空，以函数为例，就表示没有返回值的函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">num</span>):<span class="keyword">void</span>&#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// never表示永远不会返回结果</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params"></span>):never&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;报错了&quot;</span>);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> typescript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>typescript 05类型声明_02</title>
      <link href="/posts/1bf4.html"/>
      <url>/posts/1bf4.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// object表示一个对象</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: object;</span><br><span class="line">a = &#123;&#125;;</span><br><span class="line">a = <span class="keyword">function</span> (<span class="params"></span>) &#123; &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// &#123;&#125;用来指定对象中可以包含那些属性</span></span><br><span class="line"><span class="comment">// 语法:&#123;属性名：属性值，属性名：属性值&#125;</span></span><br><span class="line"><span class="comment">// 在属性名后边加上?,表示属性是可选的</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">b</span>: &#123; <span class="attr">name</span>: string, age?: number &#125;;</span><br><span class="line"></span><br><span class="line">b = &#123; <span class="attr">name</span>: <span class="string">&#x27;孙悟空&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象</span></span><br><span class="line"><span class="comment">//[propName:string]:any   表示任意类型的属性，在例子中就是说除了参数name是强制需要的，其它的参数可有可无 </span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">c</span>: &#123; <span class="attr">name</span>: string, [<span class="attr">propName</span>: string]: any &#125;;</span><br><span class="line">c = &#123; <span class="attr">name</span>: <span class="string">&#x27;猪八戒&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span>, <span class="attr">gender</span>: <span class="string">&#x27;男&#x27;</span> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">设置函数结构得到类型声明:</span></span><br><span class="line"><span class="comment">语法:(形参:类型，形参：类型...)=&gt;返回值类型</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">d</span>: <span class="function">(<span class="params">a: number, b: number</span>) =&gt;</span> number;</span><br><span class="line">d = <span class="keyword">function</span> (<span class="params">n1, n2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> n1 + n2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">类型[]</span></span><br><span class="line"><span class="comment">Array&lt;类型&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// string[] 表示字符串数组</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">e</span>: string[];</span><br><span class="line">e = [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> <span class="attr">f</span>: number[];</span><br><span class="line"><span class="keyword">let</span> <span class="attr">g</span>: <span class="title class_">Array</span>&lt;number&gt;;</span><br><span class="line">g = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *元组，元组就是固定长度的数组</span></span><br><span class="line"><span class="comment">  语法:  [类型，类型...]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">h</span>: [string, string];</span><br><span class="line">h = [<span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;123&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">enum 枚举</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">enum <span class="title class_">Gender</span> &#123;</span><br><span class="line">    <span class="title class_">Male</span>=<span class="number">0</span>,</span><br><span class="line">    <span class="title class_">Female</span>=<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">i</span>: &#123; <span class="attr">name</span>: string, <span class="attr">gender</span>:<span class="title class_">Gender</span>&#125;;</span><br><span class="line">i = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;孙悟空&#x27;</span>,</span><br><span class="line">    <span class="attr">gender</span>: <span class="title class_">Gender</span>.<span class="property">Male</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i.<span class="property">gender</span> === <span class="title class_">Gender</span>.<span class="property">Male</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// &amp;表示且</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">j</span>:&#123;<span class="attr">name</span>:string&#125; &amp; &#123;<span class="attr">age</span>:number&#125;;</span><br><span class="line">j=&#123;<span class="attr">name</span>:<span class="string">&#x27;孙悟空&#x27;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类型的别名</span></span><br><span class="line">type myType=<span class="number">1</span>|<span class="number">2</span>|<span class="number">3</span>|<span class="number">4</span>|<span class="number">5</span>;</span><br><span class="line"><span class="keyword">let</span> k=<span class="number">1</span>|<span class="number">2</span>|<span class="number">3</span>|<span class="number">4</span>|<span class="number">5</span>;</span><br><span class="line"><span class="keyword">let</span> l=<span class="number">1</span>|<span class="number">2</span>|<span class="number">3</span>|<span class="number">4</span>|<span class="number">5</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">m</span>:myType;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> typescript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>typescript 07使用webpack打包ts-1 基本使用</title>
      <link href="/posts/3213.html"/>
      <url>/posts/3213.html</url>
      
        <content type="html"><![CDATA[<h1 id="1、下载依赖"><a href="#1、下载依赖" class="headerlink" title="1、下载依赖"></a>1、下载依赖</h1><h1 id="cnpm-i-D-webpack-webpack-cli-typescript-ts-loader2、npm-y-init-初始化"><a href="#cnpm-i-D-webpack-webpack-cli-typescript-ts-loader2、npm-y-init-初始化" class="headerlink" title="cnpm i -D webpack   webpack-cli   typescript     ts-loader2、npm -y init      初始化"></a>cnpm i -D webpack   webpack-cli   typescript     ts-loader<br>2、npm -y init      初始化</h1><h1 id="3、编写webpack文件"><a href="#3、编写webpack文件" class="headerlink" title="3、编写webpack文件"></a>3、编写webpack文件</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//引入一个包</span><br><span class="line">const path = require(&#x27;path&#x27;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// webpack中的所有得到配置信息都应该写在module.exports中</span><br><span class="line">module.exports = &#123;</span><br><span class="line">    // 指定入口文件</span><br><span class="line">    entry: &quot;./src/index.ts&quot;,</span><br><span class="line">    // 指定打包文件的目录</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname, &#x27;dist&#x27;),</span><br><span class="line">        // 打包后文件的名字</span><br><span class="line">        filename: &quot;bundle.js&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">     mode: &#x27;production&#x27;,</span><br><span class="line">    // 指定webpack打包时要使用模块</span><br><span class="line">    module: &#123;</span><br><span class="line">        // 指定要加载的规则</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                // test 指定的是规则生效的文件</span><br><span class="line">                test: /\.ts$/,</span><br><span class="line">                // 要使用的loader</span><br><span class="line">                use: &#x27;ts-loader&#x27;,</span><br><span class="line">                // 要排除的文件</span><br><span class="line">                exclude: /node-modules/</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4、编写tsconfig文件"><a href="#4、编写tsconfig文件" class="headerlink" title="4、编写tsconfig文件"></a>4、编写tsconfig文件</h1><h1 id="直接-tsc-init-默认就行5、修改package-json文件"><a href="#直接-tsc-init-默认就行5、修改package-json文件" class="headerlink" title="直接 tsc -init  默认就行5、修改package.json文件"></a><strong>直接 tsc -init  默认就行</strong><br>5、修改package.json文件</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;,</span><br><span class="line">    &quot;bulid&quot;:&quot;webpack&quot; 加上这句</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> typescript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>typescript 09使用webpack打包ts-3 兼容问题</title>
      <link href="/posts/dbe4.html"/>
      <url>/posts/dbe4.html</url>
      
        <content type="html"><![CDATA[<h1 id="使用插件将代码兼容各个版本的浏览器（ie，谷歌等）1、cnpm-i-D-babel-x2F-core-babel-x2F-preset-env-babel-loader-core-js"><a href="#使用插件将代码兼容各个版本的浏览器（ie，谷歌等）1、cnpm-i-D-babel-x2F-core-babel-x2F-preset-env-babel-loader-core-js" class="headerlink" title="使用插件将代码兼容各个版本的浏览器（ie，谷歌等）1、cnpm i -D @babel&#x2F;core @babel&#x2F;preset-env babel-loader core-js"></a>使用插件将代码兼容各个版本的浏览器（ie，谷歌等）<br>1、cnpm i -D @babel&#x2F;core @babel&#x2F;preset-env babel-loader core-js</h1><h2 id="webpack-config-js"><a href="#webpack-config-js" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入一个包</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HTMLWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">    <span class="title class_">CleanWebpackPlugin</span></span><br><span class="line">&#125; = <span class="built_in">require</span>(<span class="string">&#x27;clean-webpack-plugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// webpack中的所有得到配置信息都应该写在module.exports中</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="comment">// 指定入口文件</span></span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&quot;./src/index.ts&quot;</span>,</span><br><span class="line">    <span class="comment">// 指定打包文件的目录</span></span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">        <span class="comment">// 打包后文件的名字</span></span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&quot;bundle.js&quot;</span>,</span><br><span class="line">        <span class="comment">// 告诉webpack不使用箭头</span></span><br><span class="line">        <span class="attr">environment</span>: &#123;</span><br><span class="line">            <span class="attr">arrowFunction</span>: <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&#x27;production&#x27;</span>,</span><br><span class="line">    <span class="comment">// 指定webpack打包时要使用模块</span></span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="comment">// 指定要加载的规则</span></span><br><span class="line">        <span class="attr">rules</span>: [&#123;</span><br><span class="line">            <span class="comment">// test 指定的是规则生效的文件</span></span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.ts$/</span>,</span><br><span class="line">            <span class="comment">// 要使用的loader</span></span><br><span class="line">            <span class="attr">use</span>: [</span><br><span class="line">                <span class="comment">// 配置babel</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">loader</span>: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">                    <span class="comment">// 设置babel</span></span><br><span class="line">                    <span class="attr">options</span>: &#123;</span><br><span class="line">                        <span class="comment">// 设置预定义的环境</span></span><br><span class="line">                        <span class="attr">presets</span>: [</span><br><span class="line">                            [</span><br><span class="line">                                <span class="comment">// 指定环境的插件</span></span><br><span class="line">                                <span class="string">&quot;@babel/preset-env&quot;</span>,</span><br><span class="line">                                <span class="comment">// 配置信息</span></span><br><span class="line">                                &#123;</span><br><span class="line">                                    <span class="comment">// 要兼容的目标浏览器</span></span><br><span class="line">                                    <span class="attr">targets</span>: &#123;</span><br><span class="line">                                        <span class="string">&quot;chrome&quot;</span>: <span class="string">&quot;58&quot;</span>,</span><br><span class="line">                                        <span class="string">&quot;ie&quot;</span>: <span class="string">&quot;11&quot;</span></span><br><span class="line">                                    &#125;,</span><br><span class="line">                                    <span class="comment">// 指定corejs的版本</span></span><br><span class="line">                                    <span class="string">&quot;corejs&quot;</span>: <span class="string">&quot;3&quot;</span>,</span><br><span class="line">                                    <span class="comment">// 使用corejs的方式&quot;usage&quot;表示按需加载</span></span><br><span class="line">                                    <span class="string">&quot;useBuiltIns&quot;</span>: <span class="string">&quot;usage&quot;</span></span><br><span class="line">                                &#125;</span><br><span class="line">                            ]</span><br><span class="line">                        ]</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&#x27;ts-loader&#x27;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="comment">// 要排除的文件</span></span><br><span class="line">            <span class="attr">exclude</span>: <span class="regexp">/node-modules/</span>,</span><br><span class="line"></span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置webpack插件</span></span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">HTMLWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="comment">// title:&quot;这是一个自定义的title&quot;,</span></span><br><span class="line">            <span class="attr">template</span>: <span class="string">&#x27;./src/index.html&#x27;</span></span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">CleanWebpackPlugin</span>(),</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">// 用来设置引用模块</span></span><br><span class="line">    <span class="attr">resolve</span>: &#123;</span><br><span class="line">        <span class="attr">extensions</span>: [<span class="string">&#x27;.ts&#x27;</span>, <span class="string">&#x27;.js&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="package-json（最终版）"><a href="#package-json（最终版）" class="headerlink" title="package.json（最终版）"></a>package.json（最终版）</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> &#123;</span><br><span class="line">  <span class="string">&quot;devDependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;@babel/core&quot;</span>: <span class="string">&quot;^7.16.7&quot;</span>,</span><br><span class="line">    <span class="string">&quot;@babel/preset-env&quot;</span>: <span class="string">&quot;^7.16.7&quot;</span>,</span><br><span class="line">    <span class="string">&quot;babel-loader&quot;</span>: <span class="string">&quot;^8.2.3&quot;</span>,</span><br><span class="line">    <span class="string">&quot;clean-webpack-plugin&quot;</span>: <span class="string">&quot;^4.0.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;core-js&quot;</span>: <span class="string">&quot;^3.20.2&quot;</span>,</span><br><span class="line">    <span class="string">&quot;css-loader&quot;</span>: <span class="string">&quot;^6.5.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;html-webpack-plugin&quot;</span>: <span class="string">&quot;^5.5.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;less&quot;</span>: <span class="string">&quot;^4.1.2&quot;</span>,</span><br><span class="line">    <span class="string">&quot;less-loader&quot;</span>: <span class="string">&quot;^10.2.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;postcss&quot;</span>: <span class="string">&quot;^8.4.5&quot;</span>,</span><br><span class="line">    <span class="string">&quot;postcss-loader&quot;</span>: <span class="string">&quot;^6.2.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;postcss-preset-env&quot;</span>: <span class="string">&quot;^7.2.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;style-loader&quot;</span>: <span class="string">&quot;^3.3.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;ts-loader&quot;</span>: <span class="string">&quot;^9.2.6&quot;</span>,</span><br><span class="line">    <span class="string">&quot;typescript&quot;</span>: <span class="string">&quot;^4.5.4&quot;</span>,</span><br><span class="line">    <span class="string">&quot;webpack&quot;</span>: <span class="string">&quot;^5.65.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;webpack-cli&quot;</span>: <span class="string">&quot;^4.9.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;webpack-dev-server&quot;</span>: <span class="string">&quot;^4.7.2&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;part3&quot;</span>,</span><br><span class="line">  <span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;main&quot;</span>: <span class="string">&quot;webpack.config.js&quot;</span>,</span><br><span class="line">  <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build&quot;</span>: <span class="string">&quot;webpack&quot;</span>,</span><br><span class="line">    <span class="string">&quot;start&quot;</span>: <span class="string">&quot;webpack serve  --open&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;keywords&quot;</span>: [],</span><br><span class="line">  <span class="string">&quot;author&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;license&quot;</span>: <span class="string">&quot;ISC&quot;</span>,</span><br><span class="line">  <span class="string">&quot;description&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> typescript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>typescript 08使用webpack打包ts-2  自动生成Html文件以及删除旧的生成编译文件</title>
      <link href="/posts/1269.html"/>
      <url>/posts/1269.html</url>
      
        <content type="html"><![CDATA[<h1 id="1、配置webpack"><a href="#1、配置webpack" class="headerlink" title="1、配置webpack"></a>1、配置webpack</h1><p>下载两个插件</p><h2 id="第一：cnpm-i-D-html-webpack-plugin-x2F-x2F-自动生成html文件，无需再新建文件并引入js"><a href="#第一：cnpm-i-D-html-webpack-plugin-x2F-x2F-自动生成html文件，无需再新建文件并引入js" class="headerlink" title="第一：cnpm i -D html-webpack-plugin  &#x2F;&#x2F;自动生成html文件，无需再新建文件并引入js"></a>第一：cnpm i -D html-webpack-plugin  &#x2F;&#x2F;自动生成html文件，无需再新建文件并引入js</h2><h2 id="第二：cnpm-i-D-clean-webpack-plugin-x2F-x2F-编译新的文件时候，删除掉原本编译生成的文件"><a href="#第二：cnpm-i-D-clean-webpack-plugin-x2F-x2F-编译新的文件时候，删除掉原本编译生成的文件" class="headerlink" title="第二：cnpm i -D clean-webpack-plugin   &#x2F;&#x2F;编译新的文件时候，删除掉原本编译生成的文件"></a>第二：cnpm i -D clean-webpack-plugin   &#x2F;&#x2F;编译新的文件时候，删除掉原本编译生成的文件</h2><h1 id="2、配置webpack-config-js文件"><a href="#2、配置webpack-config-js文件" class="headerlink" title="2、配置webpack.config.js文件"></a>2、配置webpack.config.js文件</h1><p>&#x2F;&#x2F;引入一个包</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HTMLWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123;<span class="title class_">CleanWebpackPlugin</span>&#125;=<span class="built_in">require</span>(<span class="string">&#x27;clean-webpack-plugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// webpack中的所有得到配置信息都应该写在module.exports中</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="comment">// 指定入口文件</span></span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&quot;./src/index.ts&quot;</span>,</span><br><span class="line">    <span class="comment">// 指定打包文件的目录</span></span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">        <span class="comment">// 打包后文件的名字</span></span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&quot;bundle.js&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&#x27;production&#x27;</span>,</span><br><span class="line">    <span class="comment">// 指定webpack打包时要使用模块</span></span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="comment">// 指定要加载的规则</span></span><br><span class="line">        <span class="attr">rules</span>: [&#123;</span><br><span class="line">            <span class="comment">// test 指定的是规则生效的文件</span></span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.ts$/</span>,</span><br><span class="line">            <span class="comment">// 要使用的loader</span></span><br><span class="line">            <span class="attr">use</span>: <span class="string">&#x27;ts-loader&#x27;</span>,</span><br><span class="line">            <span class="comment">// 要排除的文件</span></span><br><span class="line">            <span class="attr">exclude</span>: <span class="regexp">/node-modules/</span>,</span><br><span class="line"></span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置webpack插件</span></span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">HTMLWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="comment">// title:&quot;这是一个自定义的title&quot;,</span></span><br><span class="line">            <span class="attr">template</span>: <span class="string">&#x27;./src/index.html&#x27;</span></span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">CleanWebpackPlugin</span>(),</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">// 用来设置引用模块</span></span><br><span class="line">    <span class="attr">resolve</span>:&#123;</span><br><span class="line">        <span class="attr">extensions</span>:[<span class="string">&#x27;.ts&#x27;</span>,<span class="string">&#x27;.js&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的位置</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">    <span class="comment">// 配置webpack插件</span></span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">HTMLWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="comment">// title:&quot;这是一个自定义的title&quot;,</span></span><br><span class="line">            <span class="attr">template</span>: <span class="string">&#x27;./src/index.html&#x27;</span></span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">CleanWebpackPlugin</span>(),</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">// 用来设置引用模块</span></span><br><span class="line">    <span class="attr">resolve</span>:&#123;</span><br><span class="line">        <span class="attr">extensions</span>:[<span class="string">&#x27;.ts&#x27;</span>,<span class="string">&#x27;.js&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">package.<span class="property">json</span></span><br><span class="line"> <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build&quot;</span>: <span class="string">&quot;webpack&quot;</span>,  <span class="comment">//输入npm run build 进行打包</span></span><br><span class="line">    <span class="string">&quot;start&quot;</span>: <span class="string">&quot;webpack serve  --open&quot;</span> <span class="comment">//运行项目并自动打开浏览器</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> typescript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>typescript 10 TS配合webpack</title>
      <link href="/posts/41cf.html"/>
      <url>/posts/41cf.html</url>
      
        <content type="html"><![CDATA[<h1 id="09-TS配合webpack搭建总流程直接下载好所有依赖-命令行输入npm-i"><a href="#09-TS配合webpack搭建总流程直接下载好所有依赖-命令行输入npm-i" class="headerlink" title="09 TS配合webpack搭建总流程直接下载好所有依赖 命令行输入npm i"></a>09 TS配合webpack搭建总流程<br>直接下载好所有依赖 命令行输入npm i</h1><h2 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;devDependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;@babel/core&quot;</span>: <span class="string">&quot;^7.16.7&quot;</span>,</span><br><span class="line">    <span class="string">&quot;@babel/preset-env&quot;</span>: <span class="string">&quot;^7.16.7&quot;</span>,</span><br><span class="line">    <span class="string">&quot;babel-loader&quot;</span>: <span class="string">&quot;^8.2.3&quot;</span>,</span><br><span class="line">    <span class="string">&quot;clean-webpack-plugin&quot;</span>: <span class="string">&quot;^4.0.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;core-js&quot;</span>: <span class="string">&quot;^3.20.2&quot;</span>,</span><br><span class="line">    <span class="string">&quot;css-loader&quot;</span>: <span class="string">&quot;^6.5.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;html-webpack-plugin&quot;</span>: <span class="string">&quot;^5.5.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;less&quot;</span>: <span class="string">&quot;^4.1.2&quot;</span>,</span><br><span class="line">    <span class="string">&quot;less-loader&quot;</span>: <span class="string">&quot;^10.2.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;postcss&quot;</span>: <span class="string">&quot;^8.4.5&quot;</span>,</span><br><span class="line">    <span class="string">&quot;postcss-loader&quot;</span>: <span class="string">&quot;^6.2.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;postcss-preset-env&quot;</span>: <span class="string">&quot;^7.2.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;style-loader&quot;</span>: <span class="string">&quot;^3.3.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;ts-loader&quot;</span>: <span class="string">&quot;^9.2.6&quot;</span>,</span><br><span class="line">    <span class="string">&quot;typescript&quot;</span>: <span class="string">&quot;^4.5.4&quot;</span>,</span><br><span class="line">    <span class="string">&quot;webpack&quot;</span>: <span class="string">&quot;^5.65.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;webpack-cli&quot;</span>: <span class="string">&quot;^4.9.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;webpack-dev-server&quot;</span>: <span class="string">&quot;^4.7.2&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;part3&quot;</span>,</span><br><span class="line">  <span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;main&quot;</span>: <span class="string">&quot;webpack.config.js&quot;</span>,</span><br><span class="line">  <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build&quot;</span>: <span class="string">&quot;webpack&quot;</span>,</span><br><span class="line">    <span class="string">&quot;start&quot;</span>: <span class="string">&quot;webpack serve  --open&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;keywords&quot;</span>: [],</span><br><span class="line">  <span class="string">&quot;author&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;license&quot;</span>: <span class="string">&quot;ISC&quot;</span>,</span><br><span class="line">  <span class="string">&quot;description&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="命令行输入tsc-init默认就行，不用进行配置"><a href="#命令行输入tsc-init默认就行，不用进行配置" class="headerlink" title="命令行输入tsc -init默认就行，不用进行配置"></a>命令行输入tsc -init<br>默认就行，不用进行配置</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="comment">/* Visit https://aka.ms/tsconfig.json to read more about this file */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Projects */</span></span><br><span class="line">    <span class="comment">// &quot;incremental&quot;: true,                              /* Enable incremental compilation */</span></span><br><span class="line">    <span class="comment">// &quot;composite&quot;: true,                                /* Enable constraints that allow a TypeScript project to be used with project references. */</span></span><br><span class="line">    <span class="comment">// &quot;tsBuildInfoFile&quot;: &quot;./&quot;,                          /* Specify the folder for .tsbuildinfo incremental compilation files. */</span></span><br><span class="line">    <span class="comment">// &quot;disableSourceOfProjectReferenceRedirect&quot;: true,  /* Disable preferring source files instead of declaration files when referencing composite projects */</span></span><br><span class="line">    <span class="comment">// &quot;disableSolutionSearching&quot;: true,                 /* Opt a project out of multi-project reference checking when editing. */</span></span><br><span class="line">    <span class="comment">// &quot;disableReferencedProjectLoad&quot;: true,             /* Reduce the number of projects loaded automatically by TypeScript. */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Language and Environment */</span></span><br><span class="line">    <span class="string">&quot;target&quot;</span>: <span class="string">&quot;es2016&quot;</span>,</span><br><span class="line">    <span class="comment">/* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */</span></span><br><span class="line">    <span class="comment">// &quot;lib&quot;: [],                                        /* Specify a set of bundled library declaration files that describe the target runtime environment. */</span></span><br><span class="line">    <span class="comment">// &quot;jsx&quot;: &quot;preserve&quot;,                                /* Specify what JSX code is generated. */</span></span><br><span class="line">    <span class="comment">// &quot;experimentalDecorators&quot;: true,                   /* Enable experimental support for TC39 stage 2 draft decorators. */</span></span><br><span class="line">    <span class="comment">// &quot;emitDecoratorMetadata&quot;: true,                    /* Emit design-type metadata for decorated declarations in source files. */</span></span><br><span class="line">    <span class="comment">// &quot;jsxFactory&quot;: &quot;&quot;,                                 /* Specify the JSX factory function used when targeting React JSX emit, e.g. &#x27;React.createElement&#x27; or &#x27;h&#x27; */</span></span><br><span class="line">    <span class="comment">// &quot;jsxFragmentFactory&quot;: &quot;&quot;,                         /* Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. &#x27;React.Fragment&#x27; or &#x27;Fragment&#x27;. */</span></span><br><span class="line">    <span class="comment">// &quot;jsxImportSource&quot;: &quot;&quot;,                            /* Specify module specifier used to import the JSX factory functions when using `jsx: react-jsx*`.` */</span></span><br><span class="line">    <span class="comment">// &quot;reactNamespace&quot;: &quot;&quot;,                             /* Specify the object invoked for `createElement`. This only applies when targeting `react` JSX emit. */</span></span><br><span class="line">    <span class="comment">// &quot;noLib&quot;: true,                                    /* Disable including any library files, including the default lib.d.ts. */</span></span><br><span class="line">    <span class="comment">// &quot;useDefineForClassFields&quot;: true,                  /* Emit ECMAScript-standard-compliant class fields. */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Modules */</span></span><br><span class="line">    <span class="string">&quot;module&quot;</span>: <span class="string">&quot;commonjs&quot;</span>,</span><br><span class="line">    <span class="comment">/* Specify what module code is generated. */</span></span><br><span class="line">    <span class="comment">// &quot;rootDir&quot;: &quot;./&quot;,                                  /* Specify the root folder within your source files. */</span></span><br><span class="line">    <span class="comment">// &quot;moduleResolution&quot;: &quot;node&quot;,                       /* Specify how TypeScript looks up a file from a given module specifier. */</span></span><br><span class="line">    <span class="comment">// &quot;baseUrl&quot;: &quot;./&quot;,                                  /* Specify the base directory to resolve non-relative module names. */</span></span><br><span class="line">    <span class="comment">// &quot;paths&quot;: &#123;&#125;,                                      /* Specify a set of entries that re-map imports to additional lookup locations. */</span></span><br><span class="line">    <span class="comment">// &quot;rootDirs&quot;: [],                                   /* Allow multiple folders to be treated as one when resolving modules. */</span></span><br><span class="line">    <span class="comment">// &quot;typeRoots&quot;: [],                                  /* Specify multiple folders that act like `./node_modules/@types`. */</span></span><br><span class="line">    <span class="comment">// &quot;types&quot;: [],                                      /* Specify type package names to be included without being referenced in a source file. */</span></span><br><span class="line">    <span class="comment">// &quot;allowUmdGlobalAccess&quot;: true,                     /* Allow accessing UMD globals from modules. */</span></span><br><span class="line">    <span class="comment">// &quot;resolveJsonModule&quot;: true,                        /* Enable importing .json files */</span></span><br><span class="line">    <span class="comment">// &quot;noResolve&quot;: true,                                /* Disallow `import`s, `require`s or `&lt;reference&gt;`s from expanding the number of files TypeScript should add to a project. */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* JavaScript Support */</span></span><br><span class="line">    <span class="comment">// &quot;allowJs&quot;: true,                                  /* Allow JavaScript files to be a part of your program. Use the `checkJS` option to get errors from these files. */</span></span><br><span class="line">    <span class="comment">// &quot;checkJs&quot;: true,                                  /* Enable error reporting in type-checked JavaScript files. */</span></span><br><span class="line">    <span class="comment">// &quot;maxNodeModuleJsDepth&quot;: 1,                        /* Specify the maximum folder depth used for checking JavaScript files from `node_modules`. Only applicable with `allowJs`. */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Emit */</span></span><br><span class="line">    <span class="comment">// &quot;declaration&quot;: true,                              /* Generate .d.ts files from TypeScript and JavaScript files in your project. */</span></span><br><span class="line">    <span class="comment">// &quot;declarationMap&quot;: true,                           /* Create sourcemaps for d.ts files. */</span></span><br><span class="line">    <span class="comment">// &quot;emitDeclarationOnly&quot;: true,                      /* Only output d.ts files and not JavaScript files. */</span></span><br><span class="line">    <span class="comment">// &quot;sourceMap&quot;: true,                                /* Create source map files for emitted JavaScript files. */</span></span><br><span class="line">    <span class="comment">// &quot;outFile&quot;: &quot;./&quot;,                                  /* Specify a file that bundles all outputs into one JavaScript file. If `declaration` is true, also designates a file that bundles all .d.ts output. */</span></span><br><span class="line">    <span class="comment">// &quot;outDir&quot;: &quot;./&quot;,                                   /* Specify an output folder for all emitted files. */</span></span><br><span class="line">    <span class="comment">// &quot;removeComments&quot;: true,                           /* Disable emitting comments. */</span></span><br><span class="line">    <span class="comment">// &quot;noEmit&quot;: true,                                   /* Disable emitting files from a compilation. */</span></span><br><span class="line">    <span class="comment">// &quot;importHelpers&quot;: true,                            /* Allow importing helper functions from tslib once per project, instead of including them per-file. */</span></span><br><span class="line">    <span class="comment">// &quot;importsNotUsedAsValues&quot;: &quot;remove&quot;,               /* Specify emit/checking behavior for imports that are only used for types */</span></span><br><span class="line">    <span class="comment">// &quot;downlevelIteration&quot;: true,                       /* Emit more compliant, but verbose and less performant JavaScript for iteration. */</span></span><br><span class="line">    <span class="comment">// &quot;sourceRoot&quot;: &quot;&quot;,                                 /* Specify the root path for debuggers to find the reference source code. */</span></span><br><span class="line">    <span class="comment">// &quot;mapRoot&quot;: &quot;&quot;,                                    /* Specify the location where debugger should locate map files instead of generated locations. */</span></span><br><span class="line">    <span class="comment">// &quot;inlineSourceMap&quot;: true,                          /* Include sourcemap files inside the emitted JavaScript. */</span></span><br><span class="line">    <span class="comment">// &quot;inlineSources&quot;: true,                            /* Include source code in the sourcemaps inside the emitted JavaScript. */</span></span><br><span class="line">    <span class="comment">// &quot;emitBOM&quot;: true,                                  /* Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */</span></span><br><span class="line">    <span class="comment">// &quot;newLine&quot;: &quot;crlf&quot;,                                /* Set the newline character for emitting files. */</span></span><br><span class="line">    <span class="comment">// &quot;stripInternal&quot;: true,                            /* Disable emitting declarations that have `@internal` in their JSDoc comments. */</span></span><br><span class="line">    <span class="comment">// &quot;noEmitHelpers&quot;: true,                            /* Disable generating custom helper functions like `__extends` in compiled output. */</span></span><br><span class="line">    <span class="comment">// &quot;noEmitOnError&quot;: true,                            /* Disable emitting files if any type checking errors are reported. */</span></span><br><span class="line">    <span class="comment">// &quot;preserveConstEnums&quot;: true,                       /* Disable erasing `const enum` declarations in generated code. */</span></span><br><span class="line">    <span class="comment">// &quot;declarationDir&quot;: &quot;./&quot;,                           /* Specify the output directory for generated declaration files. */</span></span><br><span class="line">    <span class="comment">// &quot;preserveValueImports&quot;: true,                     /* Preserve unused imported values in the JavaScript output that would otherwise be removed. */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Interop Constraints */</span></span><br><span class="line">    <span class="comment">// &quot;isolatedModules&quot;: true,                          /* Ensure that each file can be safely transpiled without relying on other imports. */</span></span><br><span class="line">    <span class="comment">// &quot;allowSyntheticDefaultImports&quot;: true,             /* Allow &#x27;import x from y&#x27; when a module doesn&#x27;t have a default export. */</span></span><br><span class="line">    <span class="string">&quot;esModuleInterop&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">/* Emit additional JavaScript to ease support for importing CommonJS modules. This enables `allowSyntheticDefaultImports` for type compatibility. */</span></span><br><span class="line">    <span class="comment">// &quot;preserveSymlinks&quot;: true,                         /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */</span></span><br><span class="line">    <span class="string">&quot;forceConsistentCasingInFileNames&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">/* Ensure that casing is correct in imports. */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Type Checking */</span></span><br><span class="line">    <span class="string">&quot;strict&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">/* Enable all strict type-checking options. */</span></span><br><span class="line">    <span class="comment">// &quot;noImplicitAny&quot;: true,                            /* Enable error reporting for expressions and declarations with an implied `any` type.. */</span></span><br><span class="line">    <span class="comment">// &quot;strictNullChecks&quot;: true,                         /* When type checking, take into account `null` and `undefined`. */</span></span><br><span class="line">    <span class="comment">// &quot;strictFunctionTypes&quot;: true,                      /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */</span></span><br><span class="line">    <span class="comment">// &quot;strictBindCallApply&quot;: true,                      /* Check that the arguments for `bind`, `call`, and `apply` methods match the original function. */</span></span><br><span class="line">    <span class="comment">// &quot;strictPropertyInitialization&quot;: true,             /* Check for class properties that are declared but not set in the constructor. */</span></span><br><span class="line">    <span class="comment">// &quot;noImplicitThis&quot;: true,                           /* Enable error reporting when `this` is given the type `any`. */</span></span><br><span class="line">    <span class="comment">// &quot;useUnknownInCatchVariables&quot;: true,               /* Type catch clause variables as &#x27;unknown&#x27; instead of &#x27;any&#x27;. */</span></span><br><span class="line">    <span class="comment">// &quot;alwaysStrict&quot;: true,                             /* Ensure &#x27;use strict&#x27; is always emitted. */</span></span><br><span class="line">    <span class="comment">// &quot;noUnusedLocals&quot;: true,                           /* Enable error reporting when a local variables aren&#x27;t read. */</span></span><br><span class="line">    <span class="comment">// &quot;noUnusedParameters&quot;: true,                       /* Raise an error when a function parameter isn&#x27;t read */</span></span><br><span class="line">    <span class="comment">// &quot;exactOptionalPropertyTypes&quot;: true,               /* Interpret optional property types as written, rather than adding &#x27;undefined&#x27;. */</span></span><br><span class="line">    <span class="comment">// &quot;noImplicitReturns&quot;: true,                        /* Enable error reporting for codepaths that do not explicitly return in a function. */</span></span><br><span class="line">    <span class="comment">// &quot;noFallthroughCasesInSwitch&quot;: true,               /* Enable error reporting for fallthrough cases in switch statements. */</span></span><br><span class="line">    <span class="comment">// &quot;noUncheckedIndexedAccess&quot;: true,                 /* Include &#x27;undefined&#x27; in index signature results */</span></span><br><span class="line">    <span class="comment">// &quot;noImplicitOverride&quot;: true,                       /* Ensure overriding members in derived classes are marked with an override modifier. */</span></span><br><span class="line">    <span class="comment">// &quot;noPropertyAccessFromIndexSignature&quot;: true,       /* Enforces using indexed accessors for keys declared using an indexed type */</span></span><br><span class="line">    <span class="comment">// &quot;allowUnusedLabels&quot;: true,                        /* Disable error reporting for unused labels. */</span></span><br><span class="line">    <span class="comment">// &quot;allowUnreachableCode&quot;: true,                     /* Disable error reporting for unreachable code. */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Completeness */</span></span><br><span class="line">    <span class="comment">// &quot;skipDefaultLibCheck&quot;: true,                      /* Skip type checking .d.ts files that are included with TypeScript. */</span></span><br><span class="line">    <span class="string">&quot;skipLibCheck&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">/* Skip type checking all .d.ts files. */</span></span><br><span class="line">    <span class="string">&quot;noEmitOnError&quot;</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="已经配置好，自动生成html、自动删除旧的编译文件，兼容旧版本浏览器、less、style、csswebpack-config-js"><a href="#已经配置好，自动生成html、自动删除旧的编译文件，兼容旧版本浏览器、less、style、csswebpack-config-js" class="headerlink" title="已经配置好，自动生成html、自动删除旧的编译文件，兼容旧版本浏览器、less、style、csswebpack.config.js"></a>已经配置好，自动生成html、自动删除旧的编译文件，兼容旧版本浏览器、less、style、css<br>webpack.config.js</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入一个包</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HTMLWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">    <span class="title class_">CleanWebpackPlugin</span></span><br><span class="line">&#125; = <span class="built_in">require</span>(<span class="string">&#x27;clean-webpack-plugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// webpack中的所有得到配置信息都应该写在module.exports中</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="comment">// 指定入口文件</span></span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&quot;./src/index.ts&quot;</span>,</span><br><span class="line">    <span class="comment">// 指定打包文件的目录</span></span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">        <span class="comment">// 打包后文件的名字</span></span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&quot;bundle.js&quot;</span>,</span><br><span class="line">        <span class="comment">// 告诉webpack不使用箭头</span></span><br><span class="line">        <span class="attr">environment</span>: &#123;</span><br><span class="line">            <span class="attr">arrowFunction</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">const</span>:<span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&#x27;production&#x27;</span>,</span><br><span class="line">    <span class="comment">// 指定webpack打包时要使用模块</span></span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="comment">// 指定要加载的规则</span></span><br><span class="line">        <span class="attr">rules</span>: [&#123;</span><br><span class="line">            <span class="comment">// test 指定的是规则生效的文件</span></span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.ts$/</span>,</span><br><span class="line">            <span class="comment">// 要使用的loader</span></span><br><span class="line">            <span class="attr">use</span>: [</span><br><span class="line">                <span class="comment">// 配置babel</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">loader</span>: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">                    <span class="comment">// 设置babel</span></span><br><span class="line">                    <span class="attr">options</span>: &#123;</span><br><span class="line">                        <span class="comment">// 设置预定义的环境</span></span><br><span class="line">                        <span class="attr">presets</span>: [</span><br><span class="line">                            [</span><br><span class="line">                                <span class="comment">// 指定环境的插件</span></span><br><span class="line">                                <span class="string">&quot;@babel/preset-env&quot;</span>,</span><br><span class="line">                                <span class="comment">// 配置信息</span></span><br><span class="line">                                &#123;</span><br><span class="line">                                    <span class="comment">// 要兼容的目标浏览器</span></span><br><span class="line">                                    <span class="attr">targets</span>: &#123;</span><br><span class="line">                                        <span class="string">&quot;chrome&quot;</span>: <span class="string">&quot;58&quot;</span>,</span><br><span class="line">                                        <span class="string">&quot;ie&quot;</span>: <span class="string">&quot;11&quot;</span></span><br><span class="line">                                    &#125;,</span><br><span class="line">                                    <span class="comment">// 指定corejs的版本</span></span><br><span class="line">                                    <span class="string">&quot;corejs&quot;</span>: <span class="string">&quot;3&quot;</span>,</span><br><span class="line">                                    <span class="comment">// 使用corejs的方式&quot;usage&quot;表示按需加载</span></span><br><span class="line">                                    <span class="string">&quot;useBuiltIns&quot;</span>: <span class="string">&quot;usage&quot;</span></span><br><span class="line">                                &#125;</span><br><span class="line">                            ]</span><br><span class="line">                        ]</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&#x27;ts-loader&#x27;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="comment">// 要排除的文件</span></span><br><span class="line">            <span class="attr">exclude</span>: <span class="regexp">/node-modules/</span>,</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">test</span>:<span class="regexp">/\.less$/</span>,</span><br><span class="line">        <span class="attr">use</span>:[</span><br><span class="line">            <span class="string">&quot;style-loader&quot;</span>,</span><br><span class="line">            <span class="string">&quot;css-loader&quot;</span>,</span><br><span class="line">            <span class="comment">// 引入postcss</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">loader</span>:<span class="string">&quot;postcss-loader&quot;</span>,</span><br><span class="line">                <span class="attr">options</span>:&#123;</span><br><span class="line">                    <span class="attr">postcssOptions</span>:&#123;</span><br><span class="line">                        <span class="attr">plugins</span>:[</span><br><span class="line">                            [</span><br><span class="line">                            <span class="string">&quot;postcss-preset-env&quot;</span>,</span><br><span class="line">                            &#123;</span><br><span class="line">                                <span class="attr">browsers</span>:<span class="string">&#x27;last 2 versions&#x27;</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        ]  </span><br><span class="line">                        ]</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;less-loader&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    ]</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置webpack插件</span></span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">HTMLWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="comment">// title:&quot;这是一个自定义的title&quot;,</span></span><br><span class="line">            <span class="attr">template</span>: <span class="string">&#x27;./src/index.html&#x27;</span></span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">CleanWebpackPlugin</span>(),</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">// 用来设置引用模块</span></span><br><span class="line">    <span class="attr">resolve</span>: &#123;</span><br><span class="line">        <span class="attr">extensions</span>: [<span class="string">&#x27;.ts&#x27;</span>, <span class="string">&#x27;.js&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> typescript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>typescript 06ts编译选项配置 tsconfig.json</title>
      <link href="/posts/3213.html"/>
      <url>/posts/3213.html</url>
      
        <content type="html"><![CDATA[<p>自动编译当前ts文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tsc 文件名.ts  -w</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tsc -init   //创建tsconfig.json文件</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  /*</span><br><span class="line">  tsconfig.json 是ts编译器的配置文件，ts编译器可以根据它的信息来对代码进行编译</span><br><span class="line">  */</span><br><span class="line">  // include 用来指定哪些ts文件需要被编译</span><br><span class="line"></span><br><span class="line">  // 路径  **表示任意目录</span><br><span class="line">  //       *表示任意文件</span><br><span class="line"></span><br><span class="line">  &quot;include&quot;: [</span><br><span class="line">    &quot;./src/**/*&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;exclude&quot;: [</span><br><span class="line">    &quot;./src/hello/**/*&quot;</span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">  // 编译器的选项</span><br><span class="line">  &quot;compilerOptions&quot;: &#123;</span><br><span class="line">    // 用来指定ts被编译的版本</span><br><span class="line">    &quot;target&quot;: &quot;ES2015&quot;,</span><br><span class="line"></span><br><span class="line">    // 指定要使用的模块化规范</span><br><span class="line">    &quot;module&quot;: &quot;system&quot;,</span><br><span class="line"></span><br><span class="line">    // 用来指定项目中要使用的库，默认情况下不用动</span><br><span class="line">    // &quot;lib&quot;: []</span><br><span class="line">    // 用来指定编译后文件所在的目录</span><br><span class="line">    &quot;outDir&quot;: &quot;./dist&quot;,</span><br><span class="line"></span><br><span class="line">    // 将代码合并为一个文件</span><br><span class="line">    // 设置outFile后，所有的全局作用域</span><br><span class="line">    // &quot;outFile&quot;: &quot;./dist/app.js&quot;,</span><br><span class="line"></span><br><span class="line">    // 是否对js文件进行编译，默认式false</span><br><span class="line">    &quot;allowJs&quot;: true,</span><br><span class="line"></span><br><span class="line">    // 是否检查js代码是否符合语法规范，默认为false</span><br><span class="line">    &quot;checkJs&quot;: true,</span><br><span class="line"></span><br><span class="line">    // 是否移除注释</span><br><span class="line">    &quot;removeComments&quot;: true,</span><br><span class="line"></span><br><span class="line">    // 不生成编译后的文件</span><br><span class="line">    &quot;noEmit&quot;: false,</span><br><span class="line"></span><br><span class="line">    // 当出现错误的时候，不进行编译</span><br><span class="line">    &quot;noEmitOnError&quot;: true,</span><br><span class="line"></span><br><span class="line">    // 用来设置编译后的文件是否使用严格模式，默认为false</span><br><span class="line">    &quot;alwaysStrict&quot;: true,</span><br><span class="line"></span><br><span class="line">    // 是否不允许隐式的any</span><br><span class="line">    &quot;noImplicitAny&quot;: true,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // 不允许不明确类型的this</span><br><span class="line">    &quot;noImplicitThis&quot;: true,</span><br><span class="line"></span><br><span class="line">    // 严格的检查空值</span><br><span class="line">    &quot;strictNullChecks&quot;: true</span><br><span class="line">    </span><br><span class="line">    // 所有严格检查的总开关</span><br><span class="line">    &quot;strict&quot;: false,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F; 严格的检查空值</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;strictNullChecks&quot;: true</span><br></pre></td></tr></table></figure><p>如果为false，则会在box1会提示报错，因为这个元素无法判断是否存在，解决方法就是加个判断<br><img src="/images/typescript/06ts.jpg"></p><p>所有严格检查的总开关，这个写了，其他的检查就不用具体写了，默认为false</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;strict&quot;: true,</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> typescript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>typescript 11类与构造函数</title>
      <link href="/posts/9d28.html"/>
      <url>/posts/9d28.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>&#123;</span><br><span class="line">    <span class="attr">name</span>:string;</span><br><span class="line">    <span class="attr">age</span>:number;</span><br><span class="line">    <span class="title function_">bark</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;汪汪汪!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//构造函数会在对象创建时候调用</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name:string,age:number</span>)&#123;</span><br><span class="line">        <span class="comment">// console.log(&quot;触发了构造函数！&quot;,this);</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span>=name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span>=age</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dog=<span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&#x27;wang1&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">const</span> dog2=<span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&#x27;wang2&#x27;</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">const</span> dog3=<span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&#x27;wang3&#x27;</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">const</span> dog4=<span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&#x27;wang4&#x27;</span>,<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dog);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dog2);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dog3);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dog4);</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> typescript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>typescript 12继承</title>
      <link href="/posts/74c6.html"/>
      <url>/posts/74c6.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 独立作用域，可避免命名冲突</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Animal为父类</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">        <span class="attr">name</span>: string;</span><br><span class="line">        <span class="attr">age</span>: number;</span><br><span class="line">        <span class="title function_">constructor</span>(<span class="params">name: string, age: number</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">sayHello</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;动物在叫!&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Dog为子类，继承Animal父类的所有属性和方法</span></span><br><span class="line">    <span class="comment">// 继承的时候，子类覆盖父类的方法的形式为重写</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">        <span class="title function_">run</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>在跑~~~~`</span>);</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> dog = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&#x27;旺财&#x27;</span>, <span class="number">5</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(dog);</span><br><span class="line">    dog.<span class="title function_">sayHello</span>();</span><br><span class="line">    dog.<span class="title function_">run</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> cat = <span class="keyword">new</span> <span class="title class_">Cat</span>(<span class="string">&#x27;mimi&#x27;</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(cat);</span><br><span class="line">    cat.<span class="title function_">sayHello</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> typescript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>typescript 13super关键字</title>
      <link href="/posts/41fd.html"/>
      <url>/posts/41fd.html</url>
      
        <content type="html"><![CDATA[<h1 id="super关键字就是解决在子类重写父类方法的情况下想访问父类原本的方法"><a href="#super关键字就是解决在子类重写父类方法的情况下想访问父类原本的方法" class="headerlink" title="super关键字就是解决在子类重写父类方法的情况下想访问父类原本的方法"></a>super关键字就是解决在子类重写父类方法的情况下想访问父类原本的方法</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 独立作用域，可避免命名冲突</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Animal为父类</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">        <span class="attr">name</span>: string;</span><br><span class="line">        <span class="attr">age</span>: number;</span><br><span class="line">        <span class="title function_">constructor</span>(<span class="params">name: string, age: number</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">sayHello</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;父类函数动物在叫!&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Dog为子类，继承Animal父类的所有属性和方法</span></span><br><span class="line">    <span class="comment">// 继承的时候，子类覆盖父类的方法的形式为重写</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">        <span class="title function_">constructor</span>(<span class="params">name:string,age:number</span>)&#123;</span><br><span class="line">            <span class="variable language_">super</span>(name,age);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">run</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>在跑~~~~`</span>);</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">sayHello</span>(): <span class="keyword">void</span> &#123;</span><br><span class="line">            <span class="variable language_">super</span>.<span class="title function_">sayHello</span>()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> dog = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&#x27;旺财&#x27;</span>, <span class="number">5</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(dog);</span><br><span class="line">    dog.<span class="title function_">sayHello</span>();</span><br><span class="line">    dog.<span class="title function_">run</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> cat = <span class="keyword">new</span> <span class="title class_">Cat</span>(<span class="string">&#x27;mimi&#x27;</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(cat);</span><br><span class="line">    cat.<span class="title function_">sayHello</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> typescript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>typescript 15接口</title>
      <link href="/posts/b0ce.html"/>
      <url>/posts/b0ce.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 独立作用域，可避免命名冲突</span></span><br><span class="line"></span><br><span class="line">    type myType=&#123;</span><br><span class="line">        <span class="attr">name</span>:string;</span><br><span class="line">        <span class="attr">age</span>:number</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">obj</span>:myType=&#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;asd&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>:<span class="number">12</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接口用来定义一个类结构</span></span><br><span class="line"><span class="comment">     * 接口可以在定义类的时候去限制类的结构</span></span><br><span class="line"><span class="comment">     * 接口中的所有属性不能有实际的值</span></span><br><span class="line"><span class="comment">     * 接口只定义对象的结构，而不考虑实际值</span></span><br><span class="line"><span class="comment">     * 在接口中所有的方法都是抽象方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    interface myInterface&#123;</span><br><span class="line">        <span class="attr">name</span>:string;</span><br><span class="line">        <span class="attr">age</span>:number</span><br><span class="line">    &#125;</span><br><span class="line">    interface myInterface&#123;</span><br><span class="line">        <span class="attr">gender</span>:string,</span><br><span class="line">        <span class="title function_">sayHellow</span>():<span class="keyword">void</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">obj1</span>:myInterface=&#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;asd&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>:<span class="number">123</span>,</span><br><span class="line">        <span class="attr">gender</span>:<span class="string">&#x27;aaa&#x27;</span>,</span><br><span class="line">        <span class="title function_">sayHellow</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);   </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">myclass</span> implements myInterface&#123;</span><br><span class="line">        <span class="attr">name</span>:string;</span><br><span class="line">        <span class="attr">age</span>:number;</span><br><span class="line">        <span class="attr">gender</span>:string;</span><br><span class="line">        <span class="title function_">constructor</span>(<span class="params">name:string,age:number</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">name</span>=name;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">age</span>=age</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">sayHellow</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);  </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> t1=<span class="keyword">new</span> <span class="title function_">myclass</span>(<span class="string">&#x27;a&#x27;</span>,<span class="number">1</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(t1);</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> typescript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>typescript 16属性封装</title>
      <link href="/posts/f9b9.html"/>
      <url>/posts/f9b9.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * public修饰公共属性</span></span><br><span class="line"><span class="comment">         * private修饰私有属性，外部不可访问</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        private <span class="attr">name</span>: string;</span><br><span class="line">        private <span class="attr">age</span>: number</span><br><span class="line">        <span class="title function_">constructor</span>(<span class="params">name: string, age: number</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">setName</span>(<span class="params">name: string</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">get</span> <span class="title function_">name1</span>() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> per = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;孙悟空&#x27;</span>, <span class="number">18</span>)</span><br><span class="line">    <span class="comment">// per.name = &#x27;猪八戒&#x27;;</span></span><br><span class="line">    <span class="comment">// per.age = 20</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(per.<span class="title function_">getName</span>());</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(per.<span class="title function_">setName</span>(<span class="string">&#x27;猪八戒&#x27;</span>));</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(per.<span class="property">name1</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// console.log(per);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> typescript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>typescript 14抽象类</title>
      <link href="/posts/7c71.html"/>
      <url>/posts/7c71.html</url>
      
        <content type="html"><![CDATA[<h1 id="x2F-x2F-抽象类和其他类区别不大，，只是不能用来创建对象-x2F-x2F-抽象类就是专门用来被继承的类，接口就是一个抽象类的运用-x2F-x2F-抽象类中可以添加抽象方法"><a href="#x2F-x2F-抽象类和其他类区别不大，，只是不能用来创建对象-x2F-x2F-抽象类就是专门用来被继承的类，接口就是一个抽象类的运用-x2F-x2F-抽象类中可以添加抽象方法" class="headerlink" title="&#x2F;&#x2F; 抽象类和其他类区别不大，，只是不能用来创建对象&#x2F;&#x2F; 抽象类就是专门用来被继承的类，接口就是一个抽象类的运用&#x2F;&#x2F; 抽象类中可以添加抽象方法"></a>&#x2F;&#x2F; 抽象类和其他类区别不大，，只是不能用来创建对象<br>&#x2F;&#x2F; 抽象类就是专门用来被继承的类，接口就是一个抽象类的运用<br>&#x2F;&#x2F; 抽象类中可以添加抽象方法</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 独立作用域，可避免命名冲突</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象类和其他类区别不大，，只是不能用来创建对象</span></span><br><span class="line"><span class="comment">// 抽象类就是专门用来被继承的类，接口就是一个抽象类的运用</span></span><br><span class="line"><span class="comment">// 抽象类中可以添加抽象方法</span></span><br><span class="line">   abstract <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">        <span class="attr">name</span>: string;</span><br><span class="line">        <span class="attr">age</span>: number;</span><br><span class="line">        <span class="title function_">constructor</span>(<span class="params">name: string, age: number</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">        &#125;</span><br><span class="line">       abstract <span class="title function_">sayHello</span>():<span class="keyword">void</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">      <span class="title function_">sayHello</span>(): <span class="keyword">void</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是子类必须重写的方法&#x27;</span>); </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> dog=<span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&#x27;旺财&#x27;</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(dog);</span><br><span class="line">    dog.<span class="title function_">sayHello</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> typescript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>typescript 17泛型</title>
      <link href="/posts/1381.html"/>
      <url>/posts/1381.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在定义函数或者类时，如果遇到类型不明确可以使用 泛型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> fn&lt;T&gt;(<span class="attr">a</span>:T):T&#123;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以直接调用具有泛型的函数</span></span><br><span class="line"><span class="keyword">let</span> res1=<span class="title function_">fn</span>(<span class="number">10</span>);<span class="comment">//不指定泛型，ts可以自动对类型进行判断</span></span><br><span class="line"><span class="keyword">let</span> res2=fn&lt;string&gt;(<span class="string">&#x27;hello&#x27;</span>);<span class="comment">//指定类型</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 泛型可以同时指定多个</span></span><br><span class="line"><span class="keyword">function</span> fn2&lt;T,K&gt;(<span class="attr">a</span>:T,<span class="attr">b</span>:K):T&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn2&lt;number,string&gt;(<span class="number">123</span>,<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">interface <span class="title class_">Inter</span>&#123;</span><br><span class="line">    <span class="attr">length</span>:number</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// T extends Inter表示泛型T必须使Inter实现类</span></span><br><span class="line"><span class="keyword">function</span> fn3&lt;T <span class="keyword">extends</span> <span class="title class_">Inter</span>&gt;(<span class="attr">a</span>:T):number&#123;</span><br><span class="line">    <span class="keyword">return</span> a.<span class="property">length</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn3</span>(<span class="string">&#x27;123&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">myClass</span>&lt;T&gt;&#123;</span><br><span class="line">    <span class="attr">name</span>:T;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name:T</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span>=name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mc=<span class="keyword">new</span> myClass&lt;string&gt;(<span class="string">&#x27;hello&#x27;</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> typescript </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
