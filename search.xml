<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/posts/0.html"/>
      <url>/posts/0.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>发布订阅者模式</title>
      <link href="/posts/1354.html"/>
      <url>/posts/1354.html</url>
      
        <content type="html"><![CDATA[<h1 id="发布订阅者模式和观察者模式比较类似，只不过在中间加了个处理机制，这个机制就好比是派发器，也就是说一旦发布者发布了消息，派发器就接收消息，那么订阅者都会通过派发器接收到发布者的消息。应用场景就是更改某个状态时，多个依赖该状态的组件或者对象进行相对应的改变，黑暗模式以及白天模式的转换。在vue中比较相似的api就是v-model。"><a href="#发布订阅者模式和观察者模式比较类似，只不过在中间加了个处理机制，这个机制就好比是派发器，也就是说一旦发布者发布了消息，派发器就接收消息，那么订阅者都会通过派发器接收到发布者的消息。应用场景就是更改某个状态时，多个依赖该状态的组件或者对象进行相对应的改变，黑暗模式以及白天模式的转换。在vue中比较相似的api就是v-model。" class="headerlink" title="发布订阅者模式和观察者模式比较类似，只不过在中间加了个处理机制，这个机制就好比是派发器，也就是说一旦发布者发布了消息，派发器就接收消息，那么订阅者都会通过派发器接收到发布者的消息。应用场景就是更改某个状态时，多个依赖该状态的组件或者对象进行相对应的改变，黑暗模式以及白天模式的转换。在vue中比较相似的api就是v-model。"></a>发布订阅者模式和观察者模式比较类似，只不过在中间加了个处理机制，这个机制就好比是派发器，也就是说一旦发布者发布了消息，派发器就接收消息，那么订阅者都会通过派发器接收到发布者的消息。<br>应用场景就是更改某个状态时，多个依赖该状态的组件或者对象进行相对应的改变，黑暗模式以及白天模式的转换。在vue中比较相似的api就是v-model。</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">       <span class="keyword">let</span> e=&#123;</span><br><span class="line">  </span><br><span class="line">        <span class="attr">_callback</span>:[],</span><br><span class="line">        <span class="title function_">on</span>(<span class="params">callback</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">_callback</span>.<span class="title function_">push</span>(callback);</span><br><span class="line">        &#125;,</span><br><span class="line">   </span><br><span class="line">        <span class="title function_">emit</span>(<span class="params">value</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">_callback</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">the</span>=&gt;</span>&#123;</span><br><span class="line">                <span class="title function_">the</span>(value)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    e.<span class="title function_">on</span>(<span class="keyword">function</span>(<span class="params">value</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;张三订阅:&#x27;</span>+value)</span><br><span class="line">    &#125;)</span><br><span class="line">    e.<span class="title function_">on</span>(<span class="keyword">function</span>(<span class="params">value</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;零四订阅:&#x27;</span>+value)</span><br><span class="line">    &#125;)</span><br><span class="line">    e.<span class="title function_">on</span>(<span class="keyword">function</span>(<span class="params">value</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;王五订阅:&#x27;</span>+value)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    e.<span class="title function_">emit</span>(<span class="string">&#x27;中央日报&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>继承模式</title>
      <link href="/posts/9fa3.html"/>
      <url>/posts/9fa3.html</url>
      
        <content type="html"><![CDATA[<p>1、原型继承<br>优点:<br>1、可以继承父类属性和方法<br>2、子类实例对象不能给父类构造函数传参<br>缺点:子类更改父类的复杂数据类型的数据(对象、数组),所有继承了父类的子类的数据也会改变</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">name</span>=<span class="string">&#x27;父类&#x27;</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">age</span>=<span class="string">&#x27;40&#x27;</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">res</span>=[<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">getName</span>=<span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">get</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;父类的get方法&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">        <span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span>=<span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> son1=<span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">        son1.<span class="property">res</span>.<span class="title function_">push</span>(<span class="number">3</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(son1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;------------------------&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> son2=<span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(son2);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2、构造函数继承<br>优点：父类的复杂数据类型不会被子类共享，不会相互影响<br>缺点：子类获取不到父类的原型对象</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">name</span>=<span class="string">&#x27;父类&#x27;</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">age</span>=<span class="string">&#x27;40&#x27;</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">res</span>=[<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">getName</span>=<span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">get</span>=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;父类的get方法&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="title class_">Person</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> son1=<span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">        son1.<span class="property">res</span>.<span class="title function_">push</span>(<span class="number">3</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(son1);</span><br><span class="line">        son1.<span class="title function_">get</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;------------------------&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> son2=<span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(son2);</span><br></pre></td></tr></table></figure><p>3、组合继承<br>优点：<br>1、父类复杂数据不会被子类共享<br>2、子类可以获取父类的原型对象的属性<br>缺点：构造函数被调用两次，影响性能</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">name</span>=<span class="string">&#x27;父类&#x27;</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">age</span>=<span class="string">&#x27;40&#x27;</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">res</span>=[<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">getName</span>=<span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">get</span>=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;父类的get方法&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="title class_">Person</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span>=<span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> son1=<span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">        son1.<span class="property">res</span>.<span class="title function_">push</span>(<span class="number">3</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(son1);</span><br><span class="line">        son1.<span class="title function_">get</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;------------------------&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> son2=<span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(son2);</span><br></pre></td></tr></table></figure><p>4、寄生组合继承（新建一个中间子类）</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">name</span>=<span class="string">&#x27;父类&#x27;</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">age</span>=<span class="string">&#x27;40&#x27;</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">res</span>=[<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">getName</span>=<span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">get</span>=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;父类的get方法&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="title class_">Person</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//中间子类</span></span><br><span class="line">        <span class="keyword">const</span> fn=<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;;</span><br><span class="line">        fn.<span class="property"><span class="keyword">prototype</span></span>=<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line">        <span class="comment">//中间子类</span></span><br><span class="line">        <span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span>=<span class="keyword">new</span> <span class="title function_">fn</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> son1=<span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">        son1.<span class="property">res</span>.<span class="title function_">push</span>(<span class="number">3</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(son1);</span><br><span class="line">        son1.<span class="title function_">get</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;------------------------&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> son2=<span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(son2);</span><br></pre></td></tr></table></figure><p>5、类继承<br>es6最佳方法</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">            <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;小明&#x27;</span>;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">res</span> = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>];</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">getName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            get = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;父类prototype上的方法&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> son1 = <span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">        son1.<span class="property">res</span>.<span class="title function_">push</span>(<span class="number">3</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(son1);</span><br><span class="line">        son1.<span class="title function_">get</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;------------------------&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> son2 = <span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(son2);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>元素居中</title>
      <link href="/posts/cb34.html"/>
      <url>/posts/cb34.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、<span class="selector-tag">table</span>自带居中</span><br><span class="line">    &lt;<span class="selector-tag">div</span> style=&quot;<span class="attribute">text-align</span>: center;&quot;&gt;</span><br><span class="line">        &lt;<span class="selector-tag">table</span> style=&quot;<span class="attribute">width</span>: <span class="number">100px</span>;<span class="attribute">height</span>: <span class="number">100px</span>; <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;<span class="attribute">margin</span>: auto;&quot;&gt;&lt;/<span class="selector-tag">table</span>&gt;</span><br><span class="line">    &lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line"><span class="number">2</span>、<span class="number">100%</span>高度的after before加上inline-block</span><br><span class="line">     &lt;<span class="selector-tag">div</span> class=&quot;test&quot;&gt;</span><br><span class="line">        &lt;<span class="selector-tag">div</span> class=&quot;testChild2&quot;&gt;&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">   &lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line"> <span class="selector-class">.test</span>&#123;</span><br><span class="line">        <span class="attribute">background</span>: black;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">text-align</span>: center;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.test</span><span class="selector-pseudo">::before</span>&#123;</span><br><span class="line">        <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="attribute">display</span>: inline-block;</span><br><span class="line">        <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.testChild2</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">30px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">        <span class="attribute">background</span>: red;</span><br><span class="line">        <span class="attribute">display</span>: inline-block;</span><br><span class="line">        <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、将<span class="selector-tag">div</span>转化成<span class="selector-tag">table</span></span><br><span class="line">  &lt;<span class="selector-tag">div</span> style=&quot;<span class="attribute">text-align</span>: center;&quot;&gt;</span><br><span class="line">        &lt;<span class="selector-tag">div</span> style=&quot;<span class="attribute">width</span>: <span class="number">100px</span>;<span class="attribute">height</span>: <span class="number">100px</span>; <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;<span class="attribute">margin</span>:auto;&quot;&gt;&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">    &lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>、<span class="attribute">margin-top</span>：-自身的一半</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">5</span>、translate：-<span class="number">50%</span>；</span><br><span class="line">    &lt;<span class="selector-tag">div</span> style=&quot;<span class="attribute">width</span>: <span class="number">100%</span>; <span class="attribute">height</span>: <span class="number">100vh</span>; <span class="attribute">background-color</span>: red; <span class="attribute">position</span>:relative;&quot;&gt;</span><br><span class="line">        &lt;<span class="selector-tag">div</span> style=&quot;<span class="attribute">width</span>: <span class="number">100px</span>;<span class="attribute">height</span>: <span class="number">100px</span>; <span class="attribute">background-color</span>: blue;<span class="attribute">position</span>: absolute;<span class="attribute">top</span>:<span class="number">50%</span>;<span class="attribute">left</span>:<span class="number">50%</span>;<span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>,-<span class="number">50%</span>);&quot; &gt;&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">    &lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line"><span class="number">6</span>、<span class="attribute">position</span>：absolute；<span class="attribute">margin</span>：auto；</span><br><span class="line"></span><br><span class="line">    &lt;<span class="selector-tag">div</span> style=&quot;<span class="attribute">width</span>: <span class="number">100%</span>; <span class="attribute">height</span>: <span class="number">100vh</span>; <span class="attribute">background-color</span>: red; <span class="attribute">position</span>:relative;&quot;&gt;</span><br><span class="line">        &lt;<span class="selector-tag">div</span> style=&quot;<span class="attribute">width</span>: <span class="number">100px</span>;<span class="attribute">height</span>: <span class="number">100px</span>; <span class="attribute">background-color</span>: blue;<span class="attribute">position</span>: absolute;<span class="attribute">top</span>: <span class="number">0</span>;<span class="attribute">left</span>: <span class="number">0</span>;<span class="attribute">right</span>: <span class="number">0</span>;<span class="attribute">bottom</span>: <span class="number">0</span>; <span class="attribute">margin</span>:auto;&quot; &gt;&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">    &lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line"><span class="number">7</span>、<span class="attribute">display</span></span><br><span class="line">   &lt;<span class="selector-tag">div</span> style=&quot;<span class="attribute">width</span>: <span class="number">100%</span>; <span class="attribute">height</span>: <span class="number">100vh</span>;<span class="attribute">display</span>: flex;<span class="attribute">align-items</span>: center;<span class="attribute">justify-content</span>: center;<span class="attribute">background-color</span>: red;&quot;&gt;</span><br><span class="line">        &lt;<span class="selector-tag">div</span> style=&quot;<span class="attribute">width</span>: <span class="number">100px</span>; <span class="attribute">height</span>: <span class="number">100px</span>; <span class="attribute">background-color</span>: blue;&quot;&gt;&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">    &lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>git实际操作流程</title>
      <link href="/posts/89ce.html"/>
      <url>/posts/89ce.html</url>
      
        <content type="html"><![CDATA[<hr><hr><h1 id="1、组长创建仓库"><a href="#1、组长创建仓库" class="headerlink" title="1、组长创建仓库"></a>1、组长创建仓库</h1><h1 id="2、组员加入仓库"><a href="#2、组员加入仓库" class="headerlink" title="2、组员加入仓库"></a>2、组员加入仓库</h1><h1 id="3、组员拉取代码"><a href="#3、组员拉取代码" class="headerlink" title="3、组员拉取代码 "></a>3、组员拉取代码 </h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone url           //下载项目</span><br><span class="line">git init         //初始化本地仓库</span><br><span class="line">git remote add origin https://github.com/cs2273520/gittet.git  </span><br><span class="line">git branch mybrach //跳转自己创的分支   没有创建则跳到第四步</span><br></pre></td></tr></table></figure><h1 id="4、组员创建自己的分支-x2F-x2F-以创建mybranch为例子"><a href="#4、组员创建自己的分支-x2F-x2F-以创建mybranch为例子" class="headerlink" title="4、组员创建自己的分支 &#x2F;&#x2F;以创建mybranch为例子"></a>4、组员创建自己的分支 &#x2F;&#x2F;以创建mybranch为例子</h1><h2 id="创建分支步骤一、创建分支，并切换到创建的分支上去-（-git-branch-mybranch-仅创建分支）"><a href="#创建分支步骤一、创建分支，并切换到创建的分支上去-（-git-branch-mybranch-仅创建分支）" class="headerlink" title="创建分支步骤一、创建分支，并切换到创建的分支上去 （# git branch mybranch 仅创建分支）"></a>创建分支步骤<br>一、创建分支，并切换到创建的分支上去 （# git branch mybranch 仅创建分支）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout -b mybranch   //创建mybranch并且跳转到mybrnach分支</span><br></pre></td></tr></table></figure><h2 id="二、-更新远程分支列表（不然无法提交代码）"><a href="#二、-更新远程分支列表（不然无法提交代码）" class="headerlink" title="二、 更新远程分支列表（不然无法提交代码）"></a>二、 更新远程分支列表（不然无法提交代码）</h2><h2 id="两种提交方式-1-可以用vscode左下角工具-x2F-x2F-第二个图标"><a href="#两种提交方式-1-可以用vscode左下角工具-x2F-x2F-第二个图标" class="headerlink" title="两种提交方式:(1)可以用vscode左下角工具 &#x2F;&#x2F;第二个图标"></a>两种提交方式:<br>(1)可以用vscode左下角工具 &#x2F;&#x2F;第二个图标</h2><h2 id="2-命令提交"><a href="#2-命令提交" class="headerlink" title="(2)命令提交"></a><img src="/images/git/git.png"><br>(2)命令提交</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote update origin --prune</span><br></pre></td></tr></table></figure><h1 id="5、编写代码-x2F-x2F-在自己当前创建的分支上写代码"><a href="#5、编写代码-x2F-x2F-在自己当前创建的分支上写代码" class="headerlink" title="5、编写代码 &#x2F;&#x2F;在自己当前创建的分支上写代码"></a>5、编写代码 &#x2F;&#x2F;在自己当前创建的分支上写代码</h1><h1 id="6、更新自己的代码"><a href="#6、更新自己的代码" class="headerlink" title="6、更新自己的代码"></a>6、更新自己的代码</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git pull         //拉取最新的代码</span><br><span class="line">git add .     //添加自己当前文件夹的所有文件</span><br><span class="line">git commit -m 自定义的版本解释说明</span><br><span class="line">git push   //将自己的代码上传到远程仓库（提交到了branch分支而已，后面要进行分支合并）</span><br></pre></td></tr></table></figure><h1 id="7、合并分支（当前我的分支mybranch，开发分支是dev，最终上线的分支main）"><a href="#7、合并分支（当前我的分支mybranch，开发分支是dev，最终上线的分支main）" class="headerlink" title="7、合并分支（当前我的分支mybranch，开发分支是dev，最终上线的分支main）"></a>7、合并分支（当前我的分支mybranch，开发分支是dev，最终上线的分支main）</h1><h2 id="（1）首先切换到dev分支（我的分支是mybranch，我想将mybranch合并到dev分支中）"><a href="#（1）首先切换到dev分支（我的分支是mybranch，我想将mybranch合并到dev分支中）" class="headerlink" title="（1）首先切换到dev分支（我的分支是mybranch，我想将mybranch合并到dev分支中）"></a>（1）首先切换到dev分支（我的分支是mybranch，我想将mybranch合并到dev分支中）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout dev</span><br></pre></td></tr></table></figure><h2 id="（2）确保dev代码是最新的代码"><a href="#（2）确保dev代码是最新的代码" class="headerlink" title="（2）确保dev代码是最新的代码"></a>（2）确保dev代码是最新的代码</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git pull origin dev</span><br></pre></td></tr></table></figure><h2 id="（3）将我们的mybranch分支合并到dev分支中"><a href="#（3）将我们的mybranch分支合并到dev分支中" class="headerlink" title="（3）将我们的mybranch分支合并到dev分支中"></a>（3）将我们的mybranch分支合并到dev分支中</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git merge mybranch</span><br><span class="line"></span><br><span class="line">或者  git rebase mybranch</span><br></pre></td></tr></table></figure><h2 id="（4）查看状态及执行提交命令"><a href="#（4）查看状态及执行提交命令" class="headerlink" title="（4）查看状态及执行提交命令"></a>（4）查看状态及执行提交命令</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><h2 id="x2F-x2F-上面的意思就是你有1个commit，需要push到远程master上（5）提交代码到dev"><a href="#x2F-x2F-上面的意思就是你有1个commit，需要push到远程master上（5）提交代码到dev" class="headerlink" title="&#x2F;&#x2F;上面的意思就是你有1个commit，需要push到远程master上（5）提交代码到dev"></a>&#x2F;&#x2F;上面的意思就是你有1个commit，需要push到远程master上<br>（5）提交代码到dev</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push origin dev</span><br></pre></td></tr></table></figure><h1 id="回退版本-x2F-x2F-两个场景"><a href="#回退版本-x2F-x2F-两个场景" class="headerlink" title="回退版本    &#x2F;&#x2F;两个场景"></a>回退版本    &#x2F;&#x2F;两个场景</h1><h2 id="场景一：如果想将代码恢复到之前某个提交的版本，且那个版本之后提交的版本都不要了，就可以使用"><a href="#场景一：如果想将代码恢复到之前某个提交的版本，且那个版本之后提交的版本都不要了，就可以使用" class="headerlink" title="场景一：如果想将代码恢复到之前某个提交的版本，且那个版本之后提交的版本都不要了，就可以使用"></a>场景一：如果想将代码恢复到之前某个提交的版本，且那个版本之后提交的版本都不要了，就可以使用</h2><p>操作：</p><ol><li>查看版本号：git log，也可以上代码托管网页上查看history，找到需要回滚的目标版本号</li><li>使用“git reset –hard 目标版本号”命令将版本回退</li><li>使用“git push -f”提交更改，此时如果用“git push”会报错，因为我们本地库HEAD指向的版本比远程库的要旧，用“git push -f”强制推上去。</li></ol><h2 id="场景二：如果我们想撤销之前的某一版本，但是又想保留该目标版本后面的版本，记录下这整个版本变动流程，就可以用这种方法。"><a href="#场景二：如果我们想撤销之前的某一版本，但是又想保留该目标版本后面的版本，记录下这整个版本变动流程，就可以用这种方法。" class="headerlink" title="场景二：如果我们想撤销之前的某一版本，但是又想保留该目标版本后面的版本，记录下这整个版本变动流程，就可以用这种方法。"></a>场景二：如果我们想撤销之前的某一版本，但是又想保留该目标版本后面的版本，记录下这整个版本变动流程，就可以用这种方法。</h2><p>操作：</p><ol><li>查看版本号：git log，也可以上代码托管网页上查看history，找到需要撤销的目标版本号。</li><li>使用“git revert -n 版本号”反做，并使用“git commit -m 版本名”提交。<br>（1）反做，使用“git revert -n 版本号”命令。\n\n注意： 这里可能会出现冲突，那么需要手动修改冲突的文件。而且要git add 文件名。<br>（2）提交，使用“git commit -m 版本名”</li><li>使用“git push”推上远程库。</li></ol>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>BFC</title>
      <link href="/posts/85d3.html"/>
      <url>/posts/85d3.html</url>
      
        <content type="html"><![CDATA[<p>一个渲染区域内有自己的一个渲染规则，简单来说，bfc可以看作元素的一种属性；<br>触发条件：<br>1、根元素  <html><br>2、浮动元素<br>3、绝对定位元素<br>4、行内元素、table表格<br>5、overflow不为visable的块元素<br>6、contain的值为layout、content、paint<br>7、多列容器</html></p><p><img src="/images/css/BFC.png"></p><p>作用:<br>1、清除浮动<br>2、解决外编剧重合<br>3、避免被浮动元素覆盖</p>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>git的merge与rebase的区别</title>
      <link href="/posts/329f.html"/>
      <url>/posts/329f.html</url>
      
        <content type="html"><![CDATA[<p><img src="/images/git/gitrebase.jpg"><br><img src="/images/git/gitmerge.jpg"></p><h2 id="rebase就是将主分支的最后提交节点，然后再逐个提交分支节点；"><a href="#rebase就是将主分支的最后提交节点，然后再逐个提交分支节点；" class="headerlink" title="rebase就是将主分支的最后提交节点，然后再逐个提交分支节点；"></a>rebase就是将主分支的最后提交节点，然后再逐个提交分支节点；</h2><h2 id="merge就是将主分支的最后提交节点和分支的最后提交节点进行合并并产生额外的合并记录。"><a href="#merge就是将主分支的最后提交节点和分支的最后提交节点进行合并并产生额外的合并记录。" class="headerlink" title="merge就是将主分支的最后提交节点和分支的最后提交节点进行合并并产生额外的合并记录。"></a>merge就是将主分支的最后提交节点和分支的最后提交节点进行合并并产生额外的合并记录。</h2>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>api的使用</title>
      <link href="/posts/9e27.html"/>
      <url>/posts/9e27.html</url>
      
        <content type="html"><![CDATA[<h1 id="1、eval-‘var-a-x3D-0’-执行代码或者表达式"><a href="#1、eval-‘var-a-x3D-0’-执行代码或者表达式" class="headerlink" title="1、eval(‘var a&#x3D;0’);  执行代码或者表达式"></a><strong>1、eval(‘var a&#x3D;0’);  执行代码或者表达式</strong></h1><h1 id="2、数字运算"><a href="#2、数字运算" class="headerlink" title="2、数字运算"></a><strong>2、数字运算</strong></h1><p>向上取整Math.ceil<br>向下取整Math.floor<br>四舍五入Math.round   &#x3D;0.5的时候，负数向正数靠，正数向上取整<br>绝对值Math.abs<br>最大值Math.max   参数为多个参数，不能为数组<br>随机数: Math.floor(Math.random()*(max-min+1))+min(包含max和min，如果不包含max去掉+1就行)</p><h1 id="3、数组"><a href="#3、数组" class="headerlink" title="3、数组"></a><strong>3、数组</strong></h1><p>slice   参数为（start,end）不传参不进行操作，为负数就是从数组尾部开始，返回新的数组<br>splice  用法和slice差不多，但是改变原数组 返回删除的元素<br>pop 移除数组最后一个元素<br>shift 移除数组的第一个元素<br>unshift 添加元素到数组的第一个位置</p><h1 id="4、对象"><a href="#4、对象" class="headerlink" title="4、对象"></a><strong>4、对象</strong></h1><p>hasOwnProperty()方法用于检测一个对象是否含有特定的自身属性，返回一个布尔值。<br>Object.is()，其行为与&#x3D;&#x3D;&#x3D;基本一致，不过有两处不同： +0不等于-0。 NaN等于自身。</p><h1 id="5、字符串"><a href="#5、字符串" class="headerlink" title="5、字符串"></a><strong>5、字符串</strong></h1><p>isNaN(item) 的时候会先将item进行 Number(item) 的隐式转换，然后再isNaN(item)</p><p>parseInt(string,raix)<br>  1 ）注意:string字符串只会被解析从第一个字符开始直到不是数字的字符部分        console.log(parseInt(‘223’));&#x2F;&#x2F;223） 当字符串中间存在非数字,那么就只解析前面是数字的部分字符        console.log(parseInt(‘22e3’));&#x2F;&#x2F;22） 如果字符串中第一个字符就不是数字,那么返回NaN         console.log(parseInt(‘e21’));&#x2F;&#x2F;NaN<br>  4） 第二个参数raix表示进制数，如果值是10就表示转换成10进制</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>localStorage和sessionStorage的区别</title>
      <link href="/posts/ec4d.html"/>
      <url>/posts/ec4d.html</url>
      
        <content type="html"><![CDATA[<p>localstorage:永久存储在本地<br>sessionStorage:会话级存储    常见应用就是 敏感账号一次性登录<br><strong>相同点：</strong><br>1、均存储在浏览器中<br>2、不会自动发送数据给服务器<br>3、只能存储字符串，对象可通过json,stringfy()进行编码存储</p><p><strong>不同点</strong><br>1、数据存储大小不同 local是20M session是5M<br>2、有效期不同，local是永久，session浏览器关闭失效<br>3、作用域不同，local可以多个页面共享，session只能当前页面使用</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>new省略的过程</title>
      <link href="/posts/ab6c.html"/>
      <url>/posts/ab6c.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">mynew</span>(<span class="params">Func, ...args</span>) &#123;</span><br><span class="line">    <span class="comment">// 1.创建一个新对象</span></span><br><span class="line">    <span class="keyword">const</span> obj = &#123;&#125;</span><br><span class="line">    <span class="comment">// 2.新对象原型指向构造函数原型对象</span></span><br><span class="line">    obj.<span class="property">__proto__</span> = <span class="title class_">Func</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line">    <span class="comment">// 3.将构建函数的this指向新对象</span></span><br><span class="line">    <span class="keyword">let</span> result = <span class="title class_">Func</span>.<span class="title function_">apply</span>(obj, args)</span><br><span class="line">    <span class="comment">// 4.根据返回值判断</span></span><br><span class="line">    <span class="keyword">return</span> result <span class="keyword">instanceof</span> <span class="title class_">Object</span> ? result : obj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数字精度问题</title>
      <link href="/posts/4d83.html"/>
      <url>/posts/4d83.html</url>
      
        <content type="html"><![CDATA[<h2 id="0-1-＝0-1可以先用toPrecision凑整，然后用praseFlow转为数字"><a href="#0-1-＝0-1可以先用toPrecision凑整，然后用praseFlow转为数字" class="headerlink" title="0.1!＝0.1可以先用toPrecision凑整，然后用praseFlow转为数字"></a>0.1!＝0.1<br>可以先用toPrecision凑整，然后用praseFlow转为数字</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num=<span class="number">0.000000001</span></span><br><span class="line"><span class="title function_">parseFlow</span>(num.<span class="title function_">toPrecision</span>(<span class="number">5</span>))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>原型以及原型链的深入理解</title>
      <link href="/posts/b87f.html"/>
      <url>/posts/b87f.html</url>
      
        <content type="html"><![CDATA[<h2 id="1、首先，每个对象A都会有一个-proto-用来连接自己的隐式原型，然后这个对象的构造函数B也有一个prototype去连接自己的显式原型，等价于-A-proto-x3D-x3D-B-prototype-都指向原型。"><a href="#1、首先，每个对象A都会有一个-proto-用来连接自己的隐式原型，然后这个对象的构造函数B也有一个prototype去连接自己的显式原型，等价于-A-proto-x3D-x3D-B-prototype-都指向原型。" class="headerlink" title="1、首先，每个对象A都会有一个__proto__,用来连接自己的隐式原型，然后这个对象的构造函数B也有一个prototype去连接自己的显式原型，等价于:A.proto&#x3D;&#x3D;B.prototype  都指向原型。"></a>1、首先，每个对象A都会有一个__proto__,用来连接自己的隐式原型，然后这个对象的构造函数B也有一个prototype去连接自己的显式原型，等价于:<br>A.<strong>proto</strong>&#x3D;&#x3D;B.prototype  都指向原型。</h2><h2 id="2、在这个隐式原型中，如果B继承了C或者D其他的构造函数，那么B继承的所有东西（C的变量、函数）都会放在B-prototype中。"><a href="#2、在这个隐式原型中，如果B继承了C或者D其他的构造函数，那么B继承的所有东西（C的变量、函数）都会放在B-prototype中。" class="headerlink" title="2、在这个隐式原型中，如果B继承了C或者D其他的构造函数，那么B继承的所有东西（C的变量、函数）都会放在B.prototype中。"></a>2、在这个隐式原型中，如果B继承了C或者D其他的构造函数，那么B继承的所有东西（C的变量、函数）都会放在B.prototype中。</h2><h2 id="3、原型的原型是Object-prototype，也就是说B-prototype-proto-指向Object-prototype"><a href="#3、原型的原型是Object-prototype，也就是说B-prototype-proto-指向Object-prototype" class="headerlink" title="3、原型的原型是Object.prototype，也就是说B.prototype.__proto__指向Object.prototype"></a>3、原型的原型是Object.prototype，也就是说B.prototype.__proto__指向Object.prototype</h2><h2 id="4、再往上就是null了"><a href="#4、再往上就是null了" class="headerlink" title="4、再往上就是null了"></a>4、再往上就是null了</h2><p>原型链继承</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">A</span>(<span class="params"></span>)&#123;</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">name</span>=<span class="string">&#x27;我是A&#x27;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">B</span>(<span class="params"></span>)&#123;</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">name</span>=<span class="string">&#x27;我是B&#x27;</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">    B.<span class="property"><span class="keyword">prototype</span></span>=<span class="keyword">new</span> <span class="title function_">A</span>();</span><br><span class="line">    <span class="keyword">var</span> b=<span class="keyword">new</span> <span class="title function_">B</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b.<span class="property">name</span>);</span><br><span class="line">    <span class="comment">//！！！！！！！！！！注意！！！！！！！！！！！！！！！！</span></span><br><span class="line">    <span class="comment">//！！！！！这里已经原型链继承了(B继承了A),对接下来的原型链的第二部理解很重要！！！！！！！！！！！</span></span><br><span class="line">    <span class="comment">//第一层的__proto__指向原型(是一个对象),也就是B.prototype,因为B原型继承了A，所以B的原型是A;</span></span><br><span class="line">    <span class="comment">//第二层的__proto__指向A.prototype（也就是A的原型）,如果B没有继承A的话，这里就是直接是B的原型了（不会多出一个A的原型）;</span></span><br><span class="line">    <span class="comment">//第三层的__proto__指向Object.prototype，也就是Object的原型;</span></span><br><span class="line">    <span class="comment">//第四层的__proto__指向null(万物最终的归宿就是null);</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b.<span class="property">__proto__</span>.<span class="property">__proto__</span>.<span class="property">__proto__</span>.<span class="property">__proto__</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(b.<span class="property">__proto__</span>.<span class="property">__proto__</span>.<span class="property">__proto__</span>.<span class="property">__proto__</span>) );</span><br><span class="line">    <span class="comment">//忘了可以一个一个删除__proto__来了解每一层代表什么</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>webpack-02配置</title>
      <link href="/posts/2481.html"/>
      <url>/posts/2481.html</url>
      
        <content type="html"><![CDATA[<h1 id="1、入口文件entry"><a href="#1、入口文件entry" class="headerlink" title="1、入口文件entry"></a>1、入口文件entry</h1><h1 id="2、输出output"><a href="#2、输出output" class="headerlink" title="2、输出output"></a>2、输出output</h1><h1 id="3、加载器module"><a href="#3、加载器module" class="headerlink" title="3、加载器module"></a>3、加载器module</h1><h1 id="4、插件plugins"><a href="#4、插件plugins" class="headerlink" title="4、插件plugins"></a>4、插件plugins</h1><h1 id="5、mode模式"><a href="#5、mode模式" class="headerlink" title="5、mode模式"></a>5、mode模式</h1><h1 id="6、devServer开发模式专用的一个api"><a href="#6、devServer开发模式专用的一个api" class="headerlink" title="6、devServer开发模式专用的一个api"></a>6、devServer开发模式专用的一个api</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path=<span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> =&#123;</span><br><span class="line">    <span class="comment">//入口</span></span><br><span class="line">    <span class="attr">entry</span>:<span class="string">&quot;./src/main.js&quot;</span>,</span><br><span class="line">   </span><br><span class="line">    <span class="comment">//输出</span></span><br><span class="line">    <span class="attr">output</span>:&#123;</span><br><span class="line">        <span class="comment">//文件的输出路径</span></span><br><span class="line">        <span class="attr">path</span>:path.<span class="title function_">resolve</span>(__dirname,<span class="string">&#x27;dist&#x27;</span>),<span class="comment">//绝对路径</span></span><br><span class="line">        <span class="attr">filename</span>:<span class="string">&quot;main.js&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//加载器</span></span><br><span class="line">    <span class="attr">module</span>:&#123;</span><br><span class="line">        <span class="attr">rules</span>:[</span><br><span class="line">            <span class="comment">//loader的配置</span></span><br><span class="line">            &#123; <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, </span><br><span class="line">            <span class="attr">use</span>: [<span class="string">&#x27;style-loader&#x27;</span>,<span class="string">&#x27;css-loader&#x27;</span>]<span class="comment">//将css资源编译成commonjs的模块到js中</span></span><br><span class="line">        &#125;,</span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//插件</span></span><br><span class="line">    <span class="attr">plugins</span>:[</span><br><span class="line">        <span class="comment">//plugin的配置</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">//模式</span></span><br><span class="line">    <span class="attr">mode</span>:<span class="string">&#x27;development&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>webpack-03图片</title>
      <link href="/posts/70e1.html"/>
      <url>/posts/70e1.html</url>
      
        <content type="html"><![CDATA[<h1 id="在webpack-config-js中的加载器配置"><a href="#在webpack-config-js中的加载器配置" class="headerlink" title="在webpack.config.js中的加载器配置"></a>在webpack.config.js中的加载器配置</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//加载器</span></span><br><span class="line">    <span class="attr">module</span>:&#123;</span><br><span class="line">        <span class="attr">rules</span>:[</span><br><span class="line">            <span class="comment">//loader的配置</span></span><br><span class="line">            &#123; <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, </span><br><span class="line">            <span class="attr">use</span>: [<span class="string">&#x27;style-loader&#x27;</span>,<span class="string">&#x27;css-loader&#x27;</span>]<span class="comment">//将css资源编译成commonjs的模块到js中</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;   <span class="attr">test</span>:<span class="regexp">/\.(png|jpe?g|gif|webp|svg)$/</span>,</span><br><span class="line">            <span class="attr">type</span>:<span class="string">&#x27;asset&#x27;</span>,</span><br><span class="line">            <span class="attr">parser</span>: &#123;</span><br><span class="line">                <span class="attr">dataUrlCondition</span>: &#123;</span><br><span class="line">                    <span class="comment">//小于10kb的图片转base64</span></span><br><span class="line">                    <span class="comment">//优点:减少请求数量,缺点:体积增加</span></span><br><span class="line">                  <span class="attr">maxSize</span>: <span class="number">10</span> * <span class="number">1024</span> <span class="comment">// 4kb</span></span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>webpack-01下载</title>
      <link href="/posts/baaf.html"/>
      <url>/posts/baaf.html</url>
      
        <content type="html"><![CDATA[<h1 id="1、下载webpack"><a href="#1、下载webpack" class="headerlink" title="1、下载webpack"></a>1、下载webpack</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i webpack webpack-cli -D</span><br></pre></td></tr></table></figure><h1 id="2、在项目的根目录下创建webpack-config-js"><a href="#2、在项目的根目录下创建webpack-config-js" class="headerlink" title="2、在项目的根目录下创建webpack.config.js"></a>2、在项目的根目录下创建webpack.config.js</h1><h1 id="3、在webpack-config-js进行配置"><a href="#3、在webpack-config-js进行配置" class="headerlink" title="3、在webpack.config.js进行配置"></a>3、在webpack.config.js进行配置</h1>]]></content>
      
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>webpack-08启动命令优化</title>
      <link href="/posts/340b.html"/>
      <url>/posts/340b.html</url>
      
        <content type="html"><![CDATA[<h1 id="1、在package-json中"><a href="#1、在package-json中" class="headerlink" title="1、在package.json中"></a>1、在package.json中</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;start&quot;</span>:<span class="string">&quot;npm run dev&quot;</span>,</span><br><span class="line">    <span class="string">&quot;dev&quot;</span>:<span class="string">&quot;webpack serve --config ./config/webpack.dev.js&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build&quot;</span>:<span class="string">&quot;webpack --config ./config/webpack.prod.js&quot;</span>,</span><br><span class="line">    <span class="string">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p><strong>“dev”  对应的webpack.dev.config文件npm run dev</strong></p><p><strong>“build”对应的webpack.prod.config文件npm run build</strong></p><p><strong>“start”运行上面的自定义指令”dev”         npm start(也就是npm run dev 等价于 npm start )</strong></p>]]></content>
      
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>webpack-05处理html资源</title>
      <link href="/posts/ddd1.html"/>
      <url>/posts/ddd1.html</url>
      
        <content type="html"><![CDATA[<h1 id="1、下载"><a href="#1、下载" class="headerlink" title="1、下载"></a>1、下载</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save-dev html-webpack-plugin</span><br></pre></td></tr></table></figure><h1 id="2、引入"><a href="#2、引入" class="headerlink" title="2、引入"></a>2、引入</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;index.js&#x27;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;./dist&#x27;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;index_bundle.js&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>()],  <span class="comment">//这里是关键</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>webpack-06webpack自动化</title>
      <link href="/posts/9543.html"/>
      <url>/posts/9543.html</url>
      
        <content type="html"><![CDATA[<h1 id="1、下载测试"><a href="#1、下载测试" class="headerlink" title="1、下载测试"></a>1、下载测试</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i webpack-dev-server -D</span><br></pre></td></tr></table></figure><h1 id="2、webpack-config-js进行配置"><a href="#2、webpack-config-js进行配置" class="headerlink" title="2、webpack.config.js进行配置"></a>2、webpack.config.js进行配置</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//开发服务器</span><br><span class="line">    devServer:&#123;</span><br><span class="line">        host:&#x27;localhost&#x27;,</span><br><span class="line">        port:&#x27;3000&#x27;,</span><br><span class="line">        open:true,</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><h1 id="3、启动"><a href="#3、启动" class="headerlink" title="3、启动"></a>3、启动</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npx webpack server</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>webpack-07生产模式以及开发模式</title>
      <link href="/posts/cae5.html"/>
      <url>/posts/cae5.html</url>
      
        <content type="html"><![CDATA[<h1 id="生产模式"><a href="#生产模式" class="headerlink" title="生产模式"></a>生产模式</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npx webpack --config ./config/webpack.prod.js</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path=<span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> =&#123;</span><br><span class="line">    <span class="comment">//入口</span></span><br><span class="line">    <span class="attr">entry</span>:<span class="string">&quot;./src/main.js&quot;</span>,</span><br><span class="line">   </span><br><span class="line">    <span class="comment">//输出</span></span><br><span class="line">    <span class="attr">output</span>:&#123;</span><br><span class="line">        <span class="comment">//所有文件的输出路径</span></span><br><span class="line">        <span class="comment">//__dirname nodejs变量，代表当前文件的文件夹目录</span></span><br><span class="line">        <span class="attr">path</span>:path.<span class="title function_">resolve</span>(__dirname,<span class="string">&#x27;../dist&#x27;</span>),<span class="comment">//绝对路径</span></span><br><span class="line">        <span class="comment">//文件名</span></span><br><span class="line">        <span class="attr">filename</span>:<span class="string">&quot;static/js/main.js&quot;</span>,</span><br><span class="line">        <span class="comment">//自动清空上次打包的内容（原理就是将dist整个目录进行清空在进行打包）</span></span><br><span class="line">        <span class="attr">clean</span>:<span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//加载器</span></span><br><span class="line">    <span class="attr">module</span>:&#123;</span><br><span class="line">        <span class="attr">rules</span>:[</span><br><span class="line">            <span class="comment">//loader的配置</span></span><br><span class="line">            &#123; <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, </span><br><span class="line">            <span class="attr">use</span>: [<span class="string">&#x27;style-loader&#x27;</span>,<span class="string">&#x27;css-loader&#x27;</span>]<span class="comment">//将css资源编译成commonjs的模块到js中</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;   <span class="attr">test</span>:<span class="regexp">/\.(png|jpe?g|gif|webp|svg)$/</span>,</span><br><span class="line">            <span class="attr">type</span>:<span class="string">&#x27;asset&#x27;</span>,</span><br><span class="line">            <span class="attr">parser</span>: &#123;</span><br><span class="line">                <span class="attr">dataUrlCondition</span>: &#123;</span><br><span class="line">                    <span class="comment">//小于10kb的图片转base64</span></span><br><span class="line">                    <span class="comment">//优点:减少请求数量,缺点:体积增加</span></span><br><span class="line">                  <span class="attr">maxSize</span>: <span class="number">10</span> * <span class="number">1024</span> <span class="comment">// 4kb</span></span><br><span class="line">                &#125;</span><br><span class="line">              &#125;,</span><br><span class="line">              <span class="attr">generator</span>:&#123;</span><br><span class="line">                <span class="attr">filename</span>:<span class="string">&#x27;static/images/[hash:10][ext][query]&#x27;</span></span><br><span class="line">              &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;   <span class="attr">test</span>:<span class="regexp">/\.(ttf|woff2|mp3|avi)$/</span>,</span><br><span class="line">            <span class="attr">type</span>:<span class="string">&#x27;asset/resource&#x27;</span>,</span><br><span class="line">              <span class="attr">generator</span>:&#123;</span><br><span class="line">                <span class="attr">filename</span>:<span class="string">&#x27;static/media/[hash:10][ext][query]&#x27;</span></span><br><span class="line">              &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//插件</span></span><br><span class="line">    <span class="attr">plugins</span>:[</span><br><span class="line">        <span class="comment">//plugin的配置</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="comment">//模板:以public/index.html文件创建新的html文件</span></span><br><span class="line">            <span class="comment">//新的文件特点:1、结构和原来一致 2、自动引入打包的资源</span></span><br><span class="line">            <span class="attr">template</span>:path.<span class="title function_">resolve</span>(__dirname,<span class="string">&quot;../public/index.html&quot;</span>),</span><br><span class="line">        &#125;   </span><br><span class="line">        ),</span><br><span class="line">    ],</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//模式</span></span><br><span class="line">    <span class="attr">mode</span>:<span class="string">&quot;production&quot;</span>,</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="开发模式"><a href="#开发模式" class="headerlink" title="开发模式"></a>开发模式</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npx webpack serve --config ./config/webpack.dev.js</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path=<span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> =&#123;</span><br><span class="line">    <span class="comment">//入口</span></span><br><span class="line">    <span class="attr">entry</span>:<span class="string">&quot;./src/main.js&quot;</span>,</span><br><span class="line">   </span><br><span class="line">    <span class="comment">//输出</span></span><br><span class="line">    <span class="attr">output</span>:&#123;</span><br><span class="line">        <span class="comment">//所有文件的输出路径</span></span><br><span class="line">        <span class="comment">//开发环境没有输出</span></span><br><span class="line">        <span class="attr">path</span>:<span class="literal">undefined</span>,<span class="comment">//绝对路径</span></span><br><span class="line">        <span class="comment">//文件名</span></span><br><span class="line">        <span class="attr">filename</span>:<span class="string">&quot;static/js/main.js&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//加载器</span></span><br><span class="line">    <span class="attr">module</span>:&#123;</span><br><span class="line">        <span class="attr">rules</span>:[</span><br><span class="line">            <span class="comment">//loader的配置</span></span><br><span class="line">            &#123; <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, </span><br><span class="line">            <span class="attr">use</span>: [<span class="string">&#x27;style-loader&#x27;</span>,<span class="string">&#x27;css-loader&#x27;</span>]<span class="comment">//将css资源编译成commonjs的模块到js中</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;   <span class="attr">test</span>:<span class="regexp">/\.(png|jpe?g|gif|webp|svg)$/</span>,</span><br><span class="line">            <span class="attr">type</span>:<span class="string">&#x27;asset&#x27;</span>,</span><br><span class="line">            <span class="attr">parser</span>: &#123;</span><br><span class="line">                <span class="attr">dataUrlCondition</span>: &#123;</span><br><span class="line">                    <span class="comment">//小于10kb的图片转base64</span></span><br><span class="line">                    <span class="comment">//优点:减少请求数量,缺点:体积增加</span></span><br><span class="line">                  <span class="attr">maxSize</span>: <span class="number">10</span> * <span class="number">1024</span> <span class="comment">// 4kb</span></span><br><span class="line">                &#125;</span><br><span class="line">              &#125;,</span><br><span class="line">              <span class="attr">generator</span>:&#123;</span><br><span class="line">                <span class="attr">filename</span>:<span class="string">&#x27;static/images/[hash:10][ext][query]&#x27;</span></span><br><span class="line">              &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;   <span class="attr">test</span>:<span class="regexp">/\.(ttf|woff2|mp3|avi)$/</span>,</span><br><span class="line">            <span class="attr">type</span>:<span class="string">&#x27;asset/resource&#x27;</span>,</span><br><span class="line">              <span class="attr">generator</span>:&#123;</span><br><span class="line">                <span class="attr">filename</span>:<span class="string">&#x27;static/media/[hash:10][ext][query]&#x27;</span></span><br><span class="line">              &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//插件</span></span><br><span class="line">    <span class="attr">plugins</span>:[</span><br><span class="line">        <span class="comment">//plugin的配置</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="comment">//模板:以public/index.html文件创建新的html文件</span></span><br><span class="line">            <span class="comment">//新的文件特点:1、结构和原来一致 2、自动引入打包的资源</span></span><br><span class="line">            <span class="attr">template</span>:path.<span class="title function_">resolve</span>(__dirname,<span class="string">&quot;../public/index.html&quot;</span>),</span><br><span class="line">        &#125;   </span><br><span class="line">        ),</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">//开发服务器,不会输出资源，在内存中编译打包的</span></span><br><span class="line">    <span class="attr">devServer</span>:&#123;</span><br><span class="line">        <span class="attr">host</span>:<span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">        <span class="attr">port</span>:<span class="string">&#x27;3000&#x27;</span>,</span><br><span class="line">        <span class="attr">open</span>:<span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//模式</span></span><br><span class="line">    <span class="attr">mode</span>:<span class="string">&#x27;development&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="其中的区别："><a href="#其中的区别：" class="headerlink" title="其中的区别："></a>其中的区别：</h1><h2 id="1、开发没有输出，也就是output里面的path设置成undefined"><a href="#1、开发没有输出，也就是output里面的path设置成undefined" class="headerlink" title="1、开发没有输出，也就是output里面的path设置成undefined"></a>1、开发没有输出，也就是output里面的path设置成undefined</h2><h2 id="2、开发者有开发服务器devServer"><a href="#2、开发者有开发服务器devServer" class="headerlink" title="2、开发者有开发服务器devServer{}"></a>2、开发者有开发服务器devServer{}</h2><h2 id="3、开发者的mode是development，生产者是production"><a href="#3、开发者的mode是development，生产者是production" class="headerlink" title="3、开发者的mode是development，生产者是production"></a>3、开发者的mode是development，生产者是production</h2>]]></content>
      
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>proxy和defineProperty</title>
      <link href="/posts/17ba.html"/>
      <url>/posts/17ba.html</url>
      
        <content type="html"><![CDATA[<h2 id="学习链接-https-blog-csdn-net-weixin-43443341-article-details-124041094"><a href="#学习链接-https-blog-csdn-net-weixin-43443341-article-details-124041094" class="headerlink" title="学习链接: https://blog.csdn.net/weixin_43443341/article/details/124041094"></a>学习链接: <a href="https://blog.csdn.net/weixin_43443341/article/details/124041094">https://blog.csdn.net/weixin_43443341/article/details/124041094</a></h2><h1 id="最大的不同点就是监听方式"><a href="#最大的不同点就是监听方式" class="headerlink" title="最大的不同点就是监听方式"></a>最大的不同点就是监听方式</h1><p>defineProperty是对监听对象进行数据劫持<br>proxy就是代理监听对象<br>字面意思就已经可以看出差别，前者直接监听、后者加了个中间件<br>defineProperty只能对单个属性进行监听，而proxy可以整个对象进行监听</p><h1 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h1><p>嵌套数据的情况下，改变数值，都不会触发相对应的set</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>this指向</title>
      <link href="/posts/8f9b.html"/>
      <url>/posts/8f9b.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-方法中的this"><a href="#1-方法中的this" class="headerlink" title="1.方法中的this"></a>1.方法中的this</h1><p>在对象方法中，this指的是此方法的“拥有者”。<br>this代表person对象</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">           <span class="attr">firstName</span>:<span class="string">&quot;Bill&quot;</span>,</span><br><span class="line">           <span class="attr">lastName</span>:<span class="string">&quot;Gates&quot;</span>,</span><br><span class="line">           <span class="attr">id</span>:<span class="number">678</span>,</span><br><span class="line">           <span class="attr">fullName</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&quot; &quot;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;;</span><br></pre></td></tr></table></figure><h1 id="2-单独的this"><a href="#2-单独的this" class="headerlink" title="2.单独的this"></a>2.单独的this</h1><h2 id="1-在单独使用时，拥有者是全局对象，this指的是全局对象"><a href="#1-在单独使用时，拥有者是全局对象，this指的是全局对象" class="headerlink" title="(1)在单独使用时，拥有者是全局对象，this指的是全局对象"></a>(1)在单独使用时，拥有者是全局对象，this指的是全局对象</h2><p>在浏览器窗口中，全局对象是[object Window]:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="variable language_">this</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;demo&quot;</span>).<span class="property">innerHTML</span> = x;</span><br></pre></td></tr></table></figure><h2 id="2-在严格模式中，如果单独使用，那么this指的是全局对象-object-Window"><a href="#2-在严格模式中，如果单独使用，那么this指的是全局对象-object-Window" class="headerlink" title="(2)在严格模式中，如果单独使用，那么this指的是全局对象[object Window]:"></a>(2)在严格模式中，如果单独使用，那么this指的是全局对象[object Window]:</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> x = <span class="variable language_">this</span>;</span><br></pre></td></tr></table></figure><h1 id="3-函数中的this（默认）"><a href="#3-函数中的this（默认）" class="headerlink" title="3.函数中的this（默认）"></a>3.函数中的this（默认）</h1><h1 id="在js函数中，函数的拥有者默认绑定this-因此，在函数中，this指的是全局对象-object-Window-4-函数中的this（严格模式）"><a href="#在js函数中，函数的拥有者默认绑定this-因此，在函数中，this指的是全局对象-object-Window-4-函数中的this（严格模式）" class="headerlink" title="在js函数中，函数的拥有者默认绑定this.因此，在函数中，this指的是全局对象[object Window]4.函数中的this（严格模式）"></a>在js函数中，函数的拥有者默认绑定this.<br>因此，在函数中，this指的是全局对象[object Window]<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><br>4.函数中的this（严格模式）</h1><p>js严格模式不允许默认绑定，因此，在函数中使用时，在严格模式下，this是未定义的undefined</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">“use strict”;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-事件处理程序中的this"><a href="#5-事件处理程序中的this" class="headerlink" title="5.事件处理程序中的this"></a>5.事件处理程序中的this</h1><p>this指的是html元素，如下面例子中，this指的是button</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;button onclick = <span class="string">&quot;this.style.display=&#x27;none&#x27;&quot;</span>&gt;</span><br><span class="line">     点击来删除我！</span><br><span class="line">&lt;/button&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>undefined 和 is not defined</title>
      <link href="/posts/dfde.html"/>
      <url>/posts/dfde.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> &lt;script&gt;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="string">&quot;a&quot;</span> <span class="keyword">in</span> <span class="variable language_">window</span>) &#123;</span><br><span class="line">            <span class="comment">// 全局变量，变量提升，但是只是定义了，并没有赋值</span></span><br><span class="line">            <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="string">&quot;b&quot;</span> <span class="keyword">in</span> <span class="variable language_">window</span>) &#123;</span><br><span class="line">            <span class="comment">// 局部变量，外部不能访问</span></span><br><span class="line">            <span class="keyword">let</span> b = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">//undefined  原因是声明了但没有引用</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">//报错  b is not defined   原因是没有声明这个b</span></span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>with创建作用域会抛到全局作用域</title>
      <link href="/posts/b943.html"/>
      <url>/posts/b943.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">change</span>(<span class="params">obj</span>) &#123;</span><br><span class="line"><span class="title function_">with</span>(<span class="params">obj</span>) &#123;    </span><br><span class="line">color = <span class="string">&#x27;red&#x27;</span>  </span><br><span class="line">&#125;&#125;</span><br><span class="line"><span class="keyword">var</span> </span><br><span class="line">box = &#123;  </span><br><span class="line"><span class="attr">size</span>: </span><br><span class="line"><span class="string">&#x27;15*15&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">change</span>(box);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(color);</span><br></pre></td></tr></table></figure><h1 id="with会创建一个新的作用域，将里面声明的变量抛到全局作用域中"><a href="#with会创建一个新的作用域，将里面声明的变量抛到全局作用域中" class="headerlink" title="with会创建一个新的作用域，将里面声明的变量抛到全局作用域中"></a>with会创建一个新的作用域，将里面声明的变量抛到全局作用域中</h1>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>webpack-04自动清空上次打包内容</title>
      <link href="/posts/eaeb.html"/>
      <url>/posts/eaeb.html</url>
      
        <content type="html"><![CDATA[<h1 id="在output中加入"><a href="#在output中加入" class="headerlink" title="在output中加入:"></a>在output中加入:</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">clean:true,</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>typeof</title>
      <link href="/posts/7b30.html"/>
      <url>/posts/7b30.html</url>
      
        <content type="html"><![CDATA[<p><img src="/images/js/typeof.png"></p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>promise.all与promise.race的区别</title>
      <link href="/posts/5615.html"/>
      <url>/posts/5615.html</url>
      
        <content type="html"><![CDATA[<h2 id="1、all是将多个promise实例结合成一个新的promise，也就是全部成功执行才返回所有的成功执行数据，有一个失败则返回执行失败的数据；"><a href="#1、all是将多个promise实例结合成一个新的promise，也就是全部成功执行才返回所有的成功执行数据，有一个失败则返回执行失败的数据；" class="headerlink" title="1、all是将多个promise实例结合成一个新的promise，也就是全部成功执行才返回所有的成功执行数据，有一个失败则返回执行失败的数据；"></a>1、all是将多个promise实例结合成一个新的promise，也就是全部成功执行才返回所有的成功执行数据，有一个失败则返回执行失败的数据；</h2><h2 id="2、race也是将多个promise实例结合成一个新的promise，但是返回的是第一个执行完的promise，无论是成功与否。"><a href="#2、race也是将多个promise实例结合成一个新的promise，但是返回的是第一个执行完的promise，无论是成功与否。" class="headerlink" title="2、race也是将多个promise实例结合成一个新的promise，但是返回的是第一个执行完的promise，无论是成功与否。"></a>2、race也是将多个promise实例结合成一个新的promise，但是返回的是第一个执行完的promise，无论是成功与否。</h2>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>函数中的argument对象</title>
      <link href="/posts/8248.html"/>
      <url>/posts/8248.html</url>
      
        <content type="html"><![CDATA[<p><img src="/images/js/%E5%87%BD%E6%95%B0%E4%B8%ADargument%E5%AF%B9%E8%B1%A1.png"></p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>传输数据安全</title>
      <link href="/posts/298e.html"/>
      <url>/posts/298e.html</url>
      
        <content type="html"><![CDATA[<h2 id="1、表单数据加密，通过md5或者base64"><a href="#1、表单数据加密，通过md5或者base64" class="headerlink" title="1、表单数据加密，通过md5或者base64"></a><strong>1、表单数据加密，通过md5或者base64</strong></h2><h2 id="2、表单数据校验，防止sql注入"><a href="#2、表单数据校验，防止sql注入" class="headerlink" title="2、表单数据校验，防止sql注入"></a><strong>2、表单数据校验，防止sql注入</strong></h2><h2 id="3、访问需要授权的-API-，必须在请求头中使用-Authorization-字段提供-token-令牌，才能返回真实数据代码实现过程"><a href="#3、访问需要授权的-API-，必须在请求头中使用-Authorization-字段提供-token-令牌，才能返回真实数据代码实现过程" class="headerlink" title="3、访问需要授权的 API ，必须在请求头中使用 Authorization 字段提供 token 令牌，才能返回真实数据代码实现过程"></a><strong>3、访问需要授权的 API ，必须在请求头中使用 Authorization 字段提供 token 令牌，才能返回真实数据代码实现过程</strong></h2><p>在main.js中添加</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import axios from &#x27;axios&#x27;</span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F; 设置请求的根路径</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">axios.defaults.baseURL = &#x27;http://127.0.0.1:8888/api/private/v1/&#x27;</span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F; axios 请求拦截，为请求头，添加token验证的Authorization字段<br>&#x2F;&#x2F; 拦截原因：需要授权的 API ，必须在请求头中使用 Authorization 字段提供 token 令牌，才能返回数据</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">axios.interceptors.request.use(config =&gt; &#123;</span><br><span class="line">  config.headers.Authorization = window.sessionStorage.getItem(&#x27;token&#x27;)</span><br><span class="line">  // 必须有return</span><br><span class="line">  return config</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>自执行函数的坑</title>
      <link href="/posts/87fe.html"/>
      <url>/posts/87fe.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">fn1</span>=(<span class="params">a,b</span>)=&gt;&#123;</span><br><span class="line"><span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="title function_">fn2</span>=(<span class="params">a,b</span>)=&gt; a+b;</span><br></pre></td></tr></table></figure><h1 id="不写-括号的时候，不用写return；因为已经是隐藏了return了；"><a href="#不写-括号的时候，不用写return；因为已经是隐藏了return了；" class="headerlink" title="不写{}括号的时候，不用写return；因为已经是隐藏了return了；"></a>不写{}括号的时候，不用写return；因为已经是隐藏了return了；</h1>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>闭包</title>
      <link href="/posts/1cf7.html"/>
      <url>/posts/1cf7.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">var</span> a=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo1</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">&#125;</span><br><span class="line">fn=foo1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo2</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">fn</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo2</span>();</span><br></pre></td></tr></table></figure><p>闭包简单来说就是将一个函数的作用进行扩展，在js的常规作用域中，函数内部的作用域不能被函数外部的调用，通过闭包就可以解决这个问题。<br><strong>优点:</strong><br>函数的作用域扩展<br>函数作用域内部不会进行销毁，这是由于js垃圾回收机制决定的，被引用的函数或者变量不进行销毁<br><strong>缺点：</strong><br>由于函数作用域内部不会被销毁，这也就导致了如果大量使用这个闭包的话，就会导致内存泄露</p><p><strong>实际应用：防抖、节流、柯里化</strong></p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>观察者模式</title>
      <link href="/posts/1e3a.html"/>
      <url>/posts/1e3a.html</url>
      
        <content type="html"><![CDATA[<h2 id="观察者-Observer（A）-被观察Object（B）观察者通过订阅被观察者的状态，一旦被观察者的状态发生改变，那么就通知观察者进行观察的状态改变。实现思路：B中设置状态，设置更改状态的方法，设置将A放到B身上；A中设置观察B状态的方法；B中触发更改状态的方法，就触发A中观察B状态的方法；"><a href="#观察者-Observer（A）-被观察Object（B）观察者通过订阅被观察者的状态，一旦被观察者的状态发生改变，那么就通知观察者进行观察的状态改变。实现思路：B中设置状态，设置更改状态的方法，设置将A放到B身上；A中设置观察B状态的方法；B中触发更改状态的方法，就触发A中观察B状态的方法；" class="headerlink" title="观察者 Observer（A） 被观察Object（B）观察者通过订阅被观察者的状态，一旦被观察者的状态发生改变，那么就通知观察者进行观察的状态改变。实现思路：B中设置状态，设置更改状态的方法，设置将A放到B身上；A中设置观察B状态的方法；B中触发更改状态的方法，就触发A中观察B状态的方法；"></a>观察者 Observer（A） 被观察Object（B）<br>观察者通过订阅被观察者的状态，一旦被观察者的状态发生改变，那么就通知观察者进行观察的状态改变。<br>实现思路：<br>B中设置状态，设置更改状态的方法，设置将A放到B身上；<br>A中设置观察B状态的方法；<br>B中触发更改状态的方法，就触发A中观察B状态的方法；</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">class</span> <span class="title class_">Subject</span>&#123;</span><br><span class="line">            <span class="title function_">constructor</span> (name)&#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">name</span>=name</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">state</span>=<span class="string">&#x27;开心&#x27;</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">Observers</span>=[]</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 需要将观察者放到自己身上</span></span><br><span class="line">            <span class="title function_">attach</span>(<span class="params">ther</span>)&#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">Observers</span>.<span class="title function_">push</span>(ther);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 更新观察者状态</span></span><br><span class="line">            <span class="title function_">setState</span>(<span class="params">state</span>)&#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">state</span>=state;</span><br><span class="line">                <span class="comment">// 循环取出每个观察者</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">Observers</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">ther</span>=&gt;</span>&#123;</span><br><span class="line">                    ther.<span class="title function_">update</span>(<span class="variable language_">this</span>)</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 观察者</span></span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">Observer</span>&#123;</span><br><span class="line">            <span class="title function_">constructor</span>(<span class="params">name</span>)&#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">name</span>=name</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 观察小宝宝的状态</span></span><br><span class="line">            <span class="title function_">update</span>(<span class="params">subject</span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>+<span class="string">&#x27;:&#x27;</span>+subject.<span class="property">name</span>+<span class="string">&#x27;当前状态：&#x27;</span>+subject.<span class="property">state</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> baby=<span class="keyword">new</span> <span class="title class_">Subject</span>(<span class="string">&#x27;小宝宝&#x27;</span>);</span><br><span class="line">        <span class="keyword">let</span> father=<span class="keyword">new</span> <span class="title class_">Observer</span>(<span class="string">&#x27;爸爸&#x27;</span>);</span><br><span class="line">        <span class="keyword">let</span> mather=<span class="keyword">new</span> <span class="title class_">Observer</span>(<span class="string">&#x27;妈妈&#x27;</span>);</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        baby.<span class="title function_">attach</span>(father);</span><br><span class="line">        baby.<span class="title function_">attach</span>(mather);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        baby.<span class="title function_">setState</span>(<span class="string">&#x27;不开心&#x27;</span>);</span><br><span class="line">        baby.<span class="title function_">setState</span>(<span class="string">&#x27;非常开心&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>https与http的区别</title>
      <link href="/posts/3a66.html"/>
      <url>/posts/3a66.html</url>
      
        <content type="html"><![CDATA[<h2 id="https的特点"><a href="#https的特点" class="headerlink" title="https的特点:"></a>https的特点:</h2><p><img src="/images/js/https1.png"></p><h2 id="http传输的过程"><a href="#http传输的过程" class="headerlink" title="http传输的过程:"></a>http传输的过程:</h2><p><img src="/images/js/https2.png"></p><h2 id="https传输的过程"><a href="#https传输的过程" class="headerlink" title="https传输的过程:"></a>https传输的过程:</h2><p><img src="/images/js/https3.png"></p><h2 id="主要的区别就是在应用层和传输层中间加了一个安全层，这个安全层的主要负责人是CA机构。采用了CA机构颁发的CA证书，主要就是在数据传输过程规定了公钥以及私钥（通过数字签名），通过CA根证书判断签名的信息以及公钥的所有者。"><a href="#主要的区别就是在应用层和传输层中间加了一个安全层，这个安全层的主要负责人是CA机构。采用了CA机构颁发的CA证书，主要就是在数据传输过程规定了公钥以及私钥（通过数字签名），通过CA根证书判断签名的信息以及公钥的所有者。" class="headerlink" title="主要的区别就是在应用层和传输层中间加了一个安全层，这个安全层的主要负责人是CA机构。采用了CA机构颁发的CA证书，主要就是在数据传输过程规定了公钥以及私钥（通过数字签名），通过CA根证书判断签名的信息以及公钥的所有者。"></a>主要的区别就是在应用层和传输层中间加了一个安全层，这个安全层的主要负责人是CA机构。采用了CA机构颁发的CA证书，主要就是在数据传输过程规定了公钥以及私钥（通过数字签名），通过CA根证书判断签名的信息以及公钥的所有者。</h2><p><img src="/images/js/https4.png"></p>]]></content>
      
      
      <categories>
          
          <category> basis </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>项目性能优化</title>
      <link href="/posts/1656.html"/>
      <url>/posts/1656.html</url>
      
        <content type="html"><![CDATA[<p><img src="/images/basis/%E9%A1%B9%E7%9B%AE%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> basis </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>call、apply、bind的实现</title>
      <link href="/posts/3229.html"/>
      <url>/posts/3229.html</url>
      
        <content type="html"><![CDATA[<h1 id="1、call"><a href="#1、call" class="headerlink" title="1、call"></a>1、call</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title class_">Person</span>=<span class="keyword">function</span>(<span class="params">...args</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(...args);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> stu=&#123;<span class="attr">name</span>:<span class="string">&#x27;测试&#x27;</span>&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">newCall</span>=<span class="keyword">function</span>(<span class="params">obj,...args</span>)&#123;</span><br><span class="line">            obj.<span class="property">fn</span>=<span class="variable language_">this</span>;</span><br><span class="line">            <span class="keyword">const</span> result=obj.<span class="title function_">fn</span>(...args);</span><br><span class="line">            <span class="keyword">delete</span> obj.<span class="property">fn</span>;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125; </span><br><span class="line">       <span class="title class_">Person</span>.<span class="title function_">newCall</span>(stu,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure><h1 id="2、apply"><a href="#2、apply" class="headerlink" title="2、apply"></a>2、apply</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">newApply</span>=<span class="keyword">function</span>(<span class="params">obj,args</span>)&#123;</span><br><span class="line">        obj.<span class="property">fn</span>=<span class="variable language_">this</span>;</span><br><span class="line">        <span class="keyword">const</span> res=obj.<span class="title function_">fn</span>(...args);</span><br><span class="line">        <span class="keyword">delete</span> obj.<span class="property">fn</span>;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">     </span><br><span class="line"></span><br><span class="line">       <span class="keyword">let</span> <span class="title class_">Person11</span>=<span class="keyword">function</span>(<span class="params">...args</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(...args);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">let</span> stu2=&#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;测试2&#x27;</span></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="title class_">Person11</span>.<span class="title function_">newApply</span>(stu2,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br></pre></td></tr></table></figure><h1 id="3、bind"><a href="#3、bind" class="headerlink" title="3、bind"></a>3、bind</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">newBind</span>=<span class="keyword">function</span>(<span class="params">obj,...args</span>)&#123;</span><br><span class="line"> <span class="keyword">const</span> f=<span class="variable language_">this</span>;</span><br><span class="line"> <span class="keyword">return</span> f.<span class="title function_">apply</span>(obj,[...args,...<span class="variable language_">arguments</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Person3</span>=<span class="keyword">function</span>(<span class="params">...args</span>)&#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(...args);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> stu3=&#123;</span><br><span class="line"> <span class="attr">name</span>:<span class="string">&quot;测试3&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Person3</span>.<span class="title function_">newBind</span>(stu3,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>下拉刷新</title>
      <link href="/posts/9c94.html"/>
      <url>/posts/9c94.html</url>
      
        <content type="html"><![CDATA[<p><img src="/images/js/%E4%B8%8B%E6%8B%89%E5%88%B7%E6%96%B0.jpg"></p><h1 id="clientHeight-scrollscrollHeight-gt-x3D-scrollHeight-distant-判定符合即可触发"><a href="#clientHeight-scrollscrollHeight-gt-x3D-scrollHeight-distant-判定符合即可触发" class="headerlink" title="clientHeight+scrollscrollHeight&gt;&#x3D;scrollHeight-distant     判定符合即可触发"></a>clientHeight+scrollscrollHeight&gt;&#x3D;scrollHeight-distant     判定符合即可触发</h1>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>尾递归</title>
      <link href="/posts/7e79.html"/>
      <url>/posts/7e79.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//递归老思路</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params">x</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(x===<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> x+ <span class="title function_">f1</span>(x-<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">f1</span>(<span class="number">5</span>)); </span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"><span class="comment">//中间加个处理变量即可，每次返回的参数不引用上次的参数</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">tailrecsum</span>(<span class="params">x, running_total = <span class="number">0</span></span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (x === <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> running_total;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="title function_">tailrecsum</span>(x - <span class="number">1</span>, running_total + x);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">tailrecsum</span>(<span class="number">5</span>)); </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>继承的方式</title>
      <link href="/posts/a354.html"/>
      <url>/posts/a354.html</url>
      
        <content type="html"><![CDATA[<h1 id="1、原型继承"><a href="#1、原型继承" class="headerlink" title="1、原型继承"></a>1、原型继承</h1><h2 id="优点-1、可以继承父类属性和方法2、子类实例对象不能给父类构造函数传参缺点-子类更改父类的复杂数据类型的数据-对象、数组-所有继承了父类的子类的数据也会改变"><a href="#优点-1、可以继承父类属性和方法2、子类实例对象不能给父类构造函数传参缺点-子类更改父类的复杂数据类型的数据-对象、数组-所有继承了父类的子类的数据也会改变" class="headerlink" title="优点:1、可以继承父类属性和方法2、子类实例对象不能给父类构造函数传参缺点:子类更改父类的复杂数据类型的数据(对象、数组),所有继承了父类的子类的数据也会改变"></a>优点:<br>1、可以继承父类属性和方法<br>2、子类实例对象不能给父类构造函数传参<br>缺点:子类更改父类的复杂数据类型的数据(对象、数组),所有继承了父类的子类的数据也会改变</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">name</span>=<span class="string">&#x27;父类&#x27;</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">age</span>=<span class="string">&#x27;40&#x27;</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">res</span>=[<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">getName</span>=<span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">get</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;父类的get方法&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">        <span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span>=<span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> son1=<span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">        son1.<span class="property">res</span>.<span class="title function_">push</span>(<span class="number">3</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(son1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;------------------------&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> son2=<span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(son2);</span><br></pre></td></tr></table></figure><h1 id="2、构造函数继承"><a href="#2、构造函数继承" class="headerlink" title="2、构造函数继承"></a>2、构造函数继承</h1><h2 id="优点：父类的复杂数据类型不会被子类共享，不会相互影响缺点：子类获取不到父类的原型对象"><a href="#优点：父类的复杂数据类型不会被子类共享，不会相互影响缺点：子类获取不到父类的原型对象" class="headerlink" title="优点：父类的复杂数据类型不会被子类共享，不会相互影响缺点：子类获取不到父类的原型对象"></a>优点：父类的复杂数据类型不会被子类共享，不会相互影响<br>缺点：子类获取不到父类的原型对象</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">name</span>=<span class="string">&#x27;父类&#x27;</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">age</span>=<span class="string">&#x27;40&#x27;</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">res</span>=[<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">getName</span>=<span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">get</span>=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;父类的get方法&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="title class_">Person</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> son1=<span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">        son1.<span class="property">res</span>.<span class="title function_">push</span>(<span class="number">3</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(son1);</span><br><span class="line">        son1.<span class="title function_">get</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;------------------------&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> son2=<span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(son2);</span><br></pre></td></tr></table></figure><h1 id="3、组合继承"><a href="#3、组合继承" class="headerlink" title="3、组合继承"></a>3、组合继承</h1><h2 id="优点：1、父类复杂数据不会被子类共享2、子类可以获取父类的原型对象的属性缺点：构造函数被调用两次，影响性能"><a href="#优点：1、父类复杂数据不会被子类共享2、子类可以获取父类的原型对象的属性缺点：构造函数被调用两次，影响性能" class="headerlink" title="优点：1、父类复杂数据不会被子类共享2、子类可以获取父类的原型对象的属性缺点：构造函数被调用两次，影响性能"></a>优点：<br>1、父类复杂数据不会被子类共享<br>2、子类可以获取父类的原型对象的属性<br>缺点：构造函数被调用两次，影响性能</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">name</span>=<span class="string">&#x27;父类&#x27;</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">age</span>=<span class="string">&#x27;40&#x27;</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">res</span>=[<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">getName</span>=<span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">get</span>=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;父类的get方法&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="title class_">Person</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span>=<span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> son1=<span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">        son1.<span class="property">res</span>.<span class="title function_">push</span>(<span class="number">3</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(son1);</span><br><span class="line">        son1.<span class="title function_">get</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;------------------------&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> son2=<span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(son2);</span><br></pre></td></tr></table></figure><h1 id="4、寄生组合继承（新建一个中间子类）"><a href="#4、寄生组合继承（新建一个中间子类）" class="headerlink" title="4、寄生组合继承（新建一个中间子类）"></a>4、寄生组合继承（新建一个中间子类）</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">name</span>=<span class="string">&#x27;父类&#x27;</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">age</span>=<span class="string">&#x27;40&#x27;</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">res</span>=[<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">getName</span>=<span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">get</span>=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;父类的get方法&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="title class_">Person</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//中间子类</span></span><br><span class="line">        <span class="keyword">const</span> fn=<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;;</span><br><span class="line">        fn.<span class="property"><span class="keyword">prototype</span></span>=<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line">        <span class="comment">//中间子类</span></span><br><span class="line">        <span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span>=<span class="keyword">new</span> <span class="title function_">fn</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> son1=<span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">        son1.<span class="property">res</span>.<span class="title function_">push</span>(<span class="number">3</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(son1);</span><br><span class="line">        son1.<span class="title function_">get</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;------------------------&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> son2=<span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(son2);</span><br></pre></td></tr></table></figure><h1 id="5、类继承"><a href="#5、类继承" class="headerlink" title="5、类继承"></a>5、类继承</h1><h2 id="es6最佳方法"><a href="#es6最佳方法" class="headerlink" title="es6最佳方法"></a>es6最佳方法</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">            <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;小明&#x27;</span>;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">res</span> = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>];</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">getName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            get = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;父类prototype上的方法&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> son1 = <span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">        son1.<span class="property">res</span>.<span class="title function_">push</span>(<span class="number">3</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(son1);</span><br><span class="line">        son1.<span class="title function_">get</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;------------------------&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> son2 = <span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(son2);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MVC、MVP、MVVM</title>
      <link href="/posts/720d.html"/>
      <url>/posts/720d.html</url>
      
        <content type="html"><![CDATA[<h1 id="MVC：逻辑上就是当用户进行数据交互的时候，C负责唤醒M进行数据交互，M数据交互完成之后唤醒V进行页面刷新"><a href="#MVC：逻辑上就是当用户进行数据交互的时候，C负责唤醒M进行数据交互，M数据交互完成之后唤醒V进行页面刷新" class="headerlink" title="MVC：逻辑上就是当用户进行数据交互的时候，C负责唤醒M进行数据交互，M数据交互完成之后唤醒V进行页面刷新"></a>MVC：逻辑上就是当用户进行数据交互的时候，C负责唤醒M进行数据交互，M数据交互完成之后唤醒V进行页面刷新</h1><h1 id="MVP：和MVC类似，但是在P中实现了将V和M进行耦合，也就是不像MVC那样只能由C控制M，P能够实现P控制M和V"><a href="#MVP：和MVC类似，但是在P中实现了将V和M进行耦合，也就是不像MVC那样只能由C控制M，P能够实现P控制M和V" class="headerlink" title="MVP：和MVC类似，但是在P中实现了将V和M进行耦合，也就是不像MVC那样只能由C控制M，P能够实现P控制M和V"></a>MVP：和MVC类似，但是在P中实现了将V和M进行耦合，也就是不像MVC那样只能由C控制M，P能够实现P控制M和V</h1><h1 id="MVVM：逻辑上也是和MVP差不多，但是VM之间并没有直接的联系，而是通过VM来进行联系的，VM和M之间双向数据绑定，当M发生数据改变的时候，V也就跟随这刷新。主要实现了M和V的数据自动同步"><a href="#MVVM：逻辑上也是和MVP差不多，但是VM之间并没有直接的联系，而是通过VM来进行联系的，VM和M之间双向数据绑定，当M发生数据改变的时候，V也就跟随这刷新。主要实现了M和V的数据自动同步" class="headerlink" title="MVVM：逻辑上也是和MVP差不多，但是VM之间并没有直接的联系，而是通过VM来进行联系的，VM和M之间双向数据绑定，当M发生数据改变的时候，V也就跟随这刷新。主要实现了M和V的数据自动同步"></a>MVVM：逻辑上也是和MVP差不多，但是VM之间并没有直接的联系，而是通过VM来进行联系的，VM和M之间双向数据绑定，当M发生数据改变的时候，V也就跟随这刷新。主要实现了M和V的数据自动同步</h1>]]></content>
      
      
      <categories>
          
          <category> basis </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
