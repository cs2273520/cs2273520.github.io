<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>发布订阅者模式</title>
      <link href="/posts/1354.html"/>
      <url>/posts/1354.html</url>
      
        <content type="html"><![CDATA[<p>发布订阅者模式和观察者模式比较类似，只不过在中间加了个处理机制，这个机制就好比是派发器，也就是说一旦发布者发布了消息，派发器就接收消息，那么订阅者都会通过派发器接收到发布者的消息</p><p>应用场景就是更改某个状态时，多个依赖该状态的组件或者对象进行相对应的改变，黑暗模式以及白天模式的转换。在vue中比较相似的api就是v-model；</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">       <span class="keyword">let</span> e=&#123;</span><br><span class="line">  </span><br><span class="line">        <span class="attr">_callback</span>:[],</span><br><span class="line">        <span class="title function_">on</span>(<span class="params">callback</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">_callback</span>.<span class="title function_">push</span>(callback);</span><br><span class="line">        &#125;,</span><br><span class="line">   </span><br><span class="line">        <span class="title function_">emit</span>(<span class="params">value</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">_callback</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">the</span>=&gt;</span>&#123;</span><br><span class="line">                <span class="title function_">the</span>(value)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    e.<span class="title function_">on</span>(<span class="keyword">function</span>(<span class="params">value</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;张三订阅:&#x27;</span>+value)</span><br><span class="line">    &#125;)</span><br><span class="line">    e.<span class="title function_">on</span>(<span class="keyword">function</span>(<span class="params">value</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;零四订阅:&#x27;</span>+value)</span><br><span class="line">    &#125;)</span><br><span class="line">    e.<span class="title function_">on</span>(<span class="keyword">function</span>(<span class="params">value</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;王五订阅:&#x27;</span>+value)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    e.<span class="title function_">emit</span>(<span class="string">&#x27;中央日报&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>继承模式</title>
      <link href="/posts/9fa3.html"/>
      <url>/posts/9fa3.html</url>
      
        <content type="html"><![CDATA[<p>1、原型继承<br>优点:<br>1、可以继承父类属性和方法<br>2、子类实例对象不能给父类构造函数传参<br>缺点:子类更改父类的复杂数据类型的数据(对象、数组),所有继承了父类的子类的数据也会改变</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">name</span>=<span class="string">&#x27;父类&#x27;</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">age</span>=<span class="string">&#x27;40&#x27;</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">res</span>=[<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">getName</span>=<span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">get</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;父类的get方法&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">        <span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span>=<span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> son1=<span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">        son1.<span class="property">res</span>.<span class="title function_">push</span>(<span class="number">3</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(son1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;------------------------&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> son2=<span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(son2);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2、构造函数继承<br>优点：父类的复杂数据类型不会被子类共享，不会相互影响<br>缺点：子类获取不到父类的原型对象</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">name</span>=<span class="string">&#x27;父类&#x27;</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">age</span>=<span class="string">&#x27;40&#x27;</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">res</span>=[<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">getName</span>=<span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">get</span>=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;父类的get方法&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="title class_">Person</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> son1=<span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">        son1.<span class="property">res</span>.<span class="title function_">push</span>(<span class="number">3</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(son1);</span><br><span class="line">        son1.<span class="title function_">get</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;------------------------&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> son2=<span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(son2);</span><br></pre></td></tr></table></figure><p>3、组合继承<br>优点：<br>1、父类复杂数据不会被子类共享<br>2、子类可以获取父类的原型对象的属性<br>缺点：构造函数被调用两次，影响性能</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">name</span>=<span class="string">&#x27;父类&#x27;</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">age</span>=<span class="string">&#x27;40&#x27;</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">res</span>=[<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">getName</span>=<span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">get</span>=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;父类的get方法&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="title class_">Person</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span>=<span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> son1=<span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">        son1.<span class="property">res</span>.<span class="title function_">push</span>(<span class="number">3</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(son1);</span><br><span class="line">        son1.<span class="title function_">get</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;------------------------&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> son2=<span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(son2);</span><br></pre></td></tr></table></figure><p>4、寄生组合继承（新建一个中间子类）</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">name</span>=<span class="string">&#x27;父类&#x27;</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">age</span>=<span class="string">&#x27;40&#x27;</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">res</span>=[<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">getName</span>=<span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">get</span>=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;父类的get方法&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="title class_">Person</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//中间子类</span></span><br><span class="line">        <span class="keyword">const</span> fn=<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;;</span><br><span class="line">        fn.<span class="property"><span class="keyword">prototype</span></span>=<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line">        <span class="comment">//中间子类</span></span><br><span class="line">        <span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span>=<span class="keyword">new</span> <span class="title function_">fn</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> son1=<span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">        son1.<span class="property">res</span>.<span class="title function_">push</span>(<span class="number">3</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(son1);</span><br><span class="line">        son1.<span class="title function_">get</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;------------------------&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> son2=<span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(son2);</span><br></pre></td></tr></table></figure><p>5、类继承<br>es6最佳方法</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">            <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;小明&#x27;</span>;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">res</span> = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>];</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">getName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            get = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;父类prototype上的方法&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> son1 = <span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">        son1.<span class="property">res</span>.<span class="title function_">push</span>(<span class="number">3</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(son1);</span><br><span class="line">        son1.<span class="title function_">get</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;------------------------&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> son2 = <span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(son2);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>原型以及原型链的深入理解</title>
      <link href="/posts/9fa3.html"/>
      <url>/posts/9fa3.html</url>
      
        <content type="html"><![CDATA[<p>1、首先，每个对象A都会有一个__proto__,用来连接自己的隐式原型，然后这个对象的构造函数B也有一个prototype去连接自己的显式原型，等价于:<br>A.<strong>proto</strong>&#x3D;&#x3D;B.prototype  都指向原型。<br>2、在这个隐式原型中，如果B继承了C或者D其他的构造函数，那么B继承的所有东西（C的变量、函数）都会放在B.prototype中。<br>3、原型的原型是Object.prototype，也就是说B.prototype.__proto__指向Object.prototype<br>4、再往上就是null了</p><p>原型链继承</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">A</span>(<span class="params"></span>)&#123;</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">name</span>=<span class="string">&#x27;我是A&#x27;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">B</span>(<span class="params"></span>)&#123;</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">name</span>=<span class="string">&#x27;我是B&#x27;</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">    B.<span class="property"><span class="keyword">prototype</span></span>=<span class="keyword">new</span> <span class="title function_">A</span>();</span><br><span class="line">    <span class="keyword">var</span> b=<span class="keyword">new</span> <span class="title function_">B</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b.<span class="property">name</span>);</span><br><span class="line">    <span class="comment">//！！！！！！！！！！注意！！！！！！！！！！！！！！！！</span></span><br><span class="line">    <span class="comment">//！！！！！这里已经原型链继承了(B继承了A),对接下来的原型链的第二部理解很重要！！！！！！！！！！！</span></span><br><span class="line">    <span class="comment">//第一层的__proto__指向原型(是一个对象),也就是B.prototype,因为B原型继承了A，所以B的原型是A;</span></span><br><span class="line">    <span class="comment">//第二层的__proto__指向A.prototype（也就是A的原型）,如果B没有继承A的话，这里就是直接是B的原型了（不会多出一个A的原型）;</span></span><br><span class="line">    <span class="comment">//第三层的__proto__指向Object.prototype，也就是Object的原型;</span></span><br><span class="line">    <span class="comment">//第四层的__proto__指向null(万物最终的归宿就是null);</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b.<span class="property">__proto__</span>.<span class="property">__proto__</span>.<span class="property">__proto__</span>.<span class="property">__proto__</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(b.<span class="property">__proto__</span>.<span class="property">__proto__</span>.<span class="property">__proto__</span>.<span class="property">__proto__</span>) );</span><br><span class="line">    <span class="comment">//忘了可以一个一个删除__proto__来了解每一层代表什么</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index-1.html"/>
      <url>/categories/index-1.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>javascript学习</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
